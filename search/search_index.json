{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tempest","text":"<p>Typesafe DynamoDB for Kotlin and Java.</p>"},{"location":"#efficient-dynamodb","title":"Efficient DynamoDB","text":"<p>DynamoDB applications perform best (and cost the least to operate!) when data is organized for locality:</p> <ul> <li>Multiple types per table: The application can store different entity types in a single table. DynamoDB schemas are flexible.</li> <li>Related entities are stored together: Entities that are accessed together should be stored together. This makes it possible to answer common queries in as few requests as possible, ideally one.</li> </ul>"},{"location":"#example","title":"Example","text":"<p>Let\u2019s build a music library with the following features:</p> <ul> <li>Fetching multiple albums, each of which contains multiple tracks.</li> <li>Fetching individual tracks.</li> </ul> <p>We express it like this in code:</p>"},{"location":"#kotlin","title":"Kotlin","text":"<pre><code>interface MusicLibrary {\n  fun getAlbum(key: AlbumKey): Album\n  fun getTrack(key: TrackKey): Track\n}\n\ndata class Album(\n  val album_title: String,\n  val album_artist: String,\n  val release_date: String,\n  val genre: String,\n  val tracks: List&lt;Track&gt;\n)\n\ndata class Track(\n  val track_title: String,\n  val run_length: String\n)\n</code></pre>"},{"location":"#java","title":"Java","text":"<pre><code>public interface MusicLibrary {\n  Album getAlbum(AlbumKey key);\n  Track getTrack(TrackKey key); \n}\n\npublic class Album {\n  public final String album_title;\n  public final String album_artist;\n  public final String release_date;\n  public final String genre;\n  public final List&lt;Track&gt; tracks; \n}\n\npublic class Track(\n  public final String track_title;\n  public final String run_length;\n)\n</code></pre> <p>We optimize for this access pattern by putting albums and tracks in the same table:</p> Primary Key Attributes partition_key sort_key ALBUM_1 INFO album_title album_artist release_date genre The Dark Side of the Moon Pink Floyd 1973-03-01 Progressive rock ALBUM_1 TRACK_1 track_title run_length Speak to Me PT1M13S ALBUM_1 TRACK_2 track_title run_length Breathe PT2M43S ALBUM_1 TRACK_3 track_title run_length On the Run PT3M36S ... ALBUM_2 INFO album_title album_artist release_date genre The Wall Pink Floyd 1979-11-30 Progressive rock ALBUM_2 TRACK_1 track_title run_length In the Flesh? PT3M20S ... <p>This table uses a composite primary key, <code>(parition_key, sort_key)</code>, to identify each item.</p> <ul> <li>The key <code>(\"ALBUM_1\", \"INFO\")</code> identifies <code>ALBUM_1</code>\u2019s metadata.</li> <li>The key <code>(\"ALBUM_1\", \"TRACK_1\")</code> identifies <code>ALBUM_1</code>\u2019s first track.</li> </ul> <p>This table stores tracks belonging to the same album together and sorts them by the track number. The application needs only one request to DynamoDB to get the album and its tracks.</p> <pre><code>aws dynamodb query \\\n    --table-name music_library_items \\\n    --key-conditions '{ \n        \"PK\": { \n            \"ComparisonOperator\": \"EQ\",\n            \"AttributeValueList\": [ { \"S\": \"ALBUM_1\" } ]\n        } \n    }'\n</code></pre>"},{"location":"#why-tempest","title":"Why Tempest?","text":"<p>For locality, we smashed together several entity types in the same table. This improves performance! But it breaks type safety in DynamoDBMapper.</p>"},{"location":"#dynamodbmapper-api","title":"DynamoDBMapper API","text":"<p><code>DynamoDBMapper</code> / <code>DynamoDbEnhancedClient</code>, the official Java API, forces you to write weakly-typed code that models the actual persistence type.</p>"},{"location":"#kotlin_1","title":"Kotlin","text":"<pre><code>// NOTE: This is not Tempest! It is an example used for comparison.\n@DynamoDBTable(tableName = \"music_library_items\")\nclass MusicLibraryItem {\n  // All Items.\n  @DynamoDBHashKey\n  var partition_key: String? = null\n  @DynamoDBRangeKey\n  var sort_key: String? = null\n\n  // AlbumInfo.\n  @DynamoDBAttribute\n  var album_title: String? = null\n  @DynamoDBAttribute\n  var album_artist: String? = null\n  @DynamoDBAttribute\n  var release_date: String? = null\n  @DynamoDBAttribute\n  var genre: String? = null\n\n  // AlbumTrack.\n  @DynamoDBAttribute\n  var track_title: String? = null\n  @DynamoDBAttribute\n  var run_length: String? = null\n}\n</code></pre>"},{"location":"#java_1","title":"Java","text":"<pre><code>// NOTE: This is not Tempest! It is an example used for comparison.\n@DynamoDBTable(tableName = \"music_library_items\")\npublic class MusicLibraryItem {\n  // All Items.\n  String partition_key = null;\n  String sort_key = null;\n\n  // AlbumInfo.\n  String album_title = null;\n  String artist_name = null;\n  String release_date = null;\n  String genre_name = null;\n\n  // AlbumTrack.\n  String track_title = null;\n  String run_length = null;\n\n  @DynamoDBHashKey(attributeName = \"partition_key\")\n  public String getPartitionKey() {\n    return partition_key;\n  }\n\n  public void setPartitionKey(String partition_key) {\n    this.partition_key = partition_key;\n  }\n\n  @DynamoDBRangeKey(attributeName = \"sort_key\")\n  public String getSortKey() {\n    return sort_key;\n  }\n\n  public void setSortKey(String sort_key) {\n    this.sort_key = sort_key;\n  }\n\n  @DynamoDBAttribute(attributeName = \"album_title\")\n  public String getAlbumTitle() {\n    return album_title;\n  }\n\n  public void setAlbumTitle(String album_title) {\n    this.album_title = album_title;\n  }\n\n  @DynamoDBAttribute(attributeName = \"artist_name\")\n  public String getArtistName() {\n    return artist_name;\n  }\n\n  public void setArtistName(String artist_name) {\n    this.artist_name = artist_name;\n  }\n\n  @DynamoDBAttribute(attributeName = \"release_date\")\n  public String getReleaseDate() {\n    return release_date;\n  }\n\n  public void setReleaseDate(String release_date) {\n    this.release_date = release_date;\n  }\n\n  @DynamoDBAttribute(attributeName = \"genre_name\")\n  public String getGenreName() {\n    return genre_name;\n  }\n\n  public void setGenreName(String genre_name) {\n    this.genre_name = genre_name;\n  }\n\n  @DynamoDBAttribute(attributeName = \"track_title\")\n  public String getTrackTitle() {\n    return track_title;\n  }\n\n  public void setTrackTitle(String track_title) {\n    this.track_title = track_title;\n  }\n\n  @DynamoDBAttribute(attributeName = \"run_length\")\n  public String getRunLength() {\n    return run_length;\n  }\n\n  public void setRunLength(String run_length) {\n    this.run_length = run_length;\n  }\n}\n</code></pre> <p>Note that <code>MusicLibraryItem</code> is a union type of all the entity types: <code>AlbumInfo</code> and <code>AlbumTrack</code>. Because all of its attributes are nullable and mutable, code that interacts with it is brittle and error prone.</p>"},{"location":"#tempest-api","title":"Tempest API","text":"<p>Tempest restores maintainability without losing locality. It lets you declare strongly-typed key and item classes for each logical type in the domain layer.</p>"},{"location":"#kotlin_2","title":"Kotlin","text":"<pre><code>data class AlbumInfo(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  val album_title: String,\n  val album_artist: String,\n  val release_date: String,\n  val genre_name: String\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n\n  data class Key(\n    val album_token: String\n  ) {\n    val sort_key: String = \"\"\n  }\n}\n\ndata class AlbumTrack(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  val track_token: String,\n  val track_title: String,\n  val run_length: String\n) {\n  data class Key(\n    val album_token: String,\n    val track_token: String\n  )\n}\n</code></pre>"},{"location":"#java_2","title":"Java","text":"<pre><code>public class AlbumInfo {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  public final String album_title;\n  public final String artist_name;\n  public final String release_date;\n  public final String genre_name;\n\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n\n  public static class Key {\n    public final String album_token;\n    public final String sort_key = \"\";\n  }\n}\n\npublic class AlbumTrack {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  public final String track_token;\n  public final String track_title;\n  public final String run_length;\n\n  public static class Key {\n    public final String album_token;\n    public final String track_token;\n  }\n}\n</code></pre> <p>You build business logic with logical types. Tempest handles mapping them to the underlying persistence type.</p> <p>Note: The base item type <code>MusicLibraryItem</code> is still used for the <code>LogicalTable</code>. This type is intended to model an empty row, so all its fields should be nullable with a <code>null</code> default value. Using non-nullable types or fields with default values will cause issues during serialization and querying.</p>"},{"location":"#kotlin_3","title":"Kotlin","text":"<pre><code>interface MusicLibraryTable : LogicalTable&lt;MusicLibraryItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n}\n\nprivate val musicLibrary: MusicLibraryTable\n\n// Load.\nfun getAlbumTitle(albumToken: String): String? {\n  val key = AlbumInfo.Key(albumToken)\n  val albumInfo = musicLibrary.albumInfo.load(key) ?: return null\n  return albumInfo.album_title\n}\n\n// Update.\nfun addAlbumTrack(\n  albumToken: String, \n  track_token: String, \n  track_title: String, \n  run_length: String\n) {\n  val newAlbumTrack = AlbumTrack(albumToken, track_token, track_title, run_length)\n  musicLibrary.albumTracks.save(newAlbumTrack)\n} \n\n// Query.\nfun getAlbumTrackTitles(albumToken: String): List&lt;String&gt; {\n  val page = musicLibrary.albumTracks.query(\n    keyCondition = BeginsWith(AlbumTrack.Key(albumToken))\n  )\n  return page.contents.map { it.track_title }\n}\n</code></pre>"},{"location":"#java_3","title":"Java","text":"<pre><code>public interface MusicLibraryTable extends LogicalTable&lt;MusicLibraryItem&gt; {\n  InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n  InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n}\n\nprivate MusicLibraryTable musicLibrary; \n\n// Load.\n@Nullable\npublic String getAlbumTitle(String albumToken) {\n  AlbumInfo albumInfo = table.albumInfo().load(new AlbumInfo.Key(albumToken));\n  if (albumInfo == null) {\n    return null;\n  }\n  return albumInfo.album_title;\n}\n\n// Update.\npublic void addAlbumTrack(\n  String albumToken, \n  String track_token, \n  String track_title, \n  String run_length\n) {\n  AlbumTrack newAlbumTrack = new AlbumTrack(albumToken, track_token, track_title, run_length);\n  musicLibrary.albumTracks().save(newAlbumTrack);\n}\n\n// Query.\npublic List&lt;String&gt; getAlbumTrackTitles(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = musicLibrary.albumTracks().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.Key(albumToken)\n      )\n  );\n  return page.getContents().stream().map(track -&gt; track.track_title).collect(Collectors.toList());\n}\n</code></pre>"},{"location":"#get-tempest","title":"Get Tempest","text":"<p>For AWS SDK 1.x:</p> <pre><code>implementation \"app.cash.tempest:tempest:1.10.0\"\n</code></pre> <p>For AWS SDK 2.x:</p> <pre><code>implementation \"app.cash.tempest:tempest2:1.10.0\"\n</code></pre>"},{"location":"#migrating-from-tempest-1-to-tempest-2","title":"Migrating From Tempest 1 to Tempest 2","text":"<p>Please follow the Migration Guide that has been set up to upgrade from Tempest 1 (AWS SDK 1.x) to Tempest 2 (AWS SDK 2.x)</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2020 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#1103-2023-12-15","title":"[1.10.3] - 2023-12-15","text":"<ul> <li>Fix: Pin DynamoDB Docker image to 2.1.0 to avoid breaking issue with latest</li> </ul>"},{"location":"changelog/#1102-2023-08-16","title":"[1.10.2] - 2023-08-16","text":"<ul> <li>Fix: Creating new tag for publication </li> </ul>"},{"location":"changelog/#1101-2023-08-16","title":"[1.10.1] - 2023-08-16","text":"<ul> <li>Fix: Initialize the dynamodb clients immediately to avoid DI issues in consumers</li> </ul>"},{"location":"changelog/#1100-2023-06-06","title":"[1.10.0] - 2023-06-06","text":"<ul> <li>Fix: Async Batch support for multiple pages</li> </ul>"},{"location":"changelog/#190-2023-06-06","title":"[1.9.0] - 2023-06-06","text":"<ul> <li>New: add BOM</li> </ul>"},{"location":"changelog/#180-2023-05-31","title":"[1.8.0] - 2023-05-31","text":"<ul> <li>New(tempest2): Adds <code>Attribute.allowEmpty</code> to support nullable, prefixed fields</li> </ul>"},{"location":"changelog/#170-2023-05-03","title":"[1.7.0] - 2023-05-03","text":"<ul> <li>New(gradle): Add Hermit</li> <li>New: Add <code>pageWritten</code> hook to <code>WritingPager.Handler</code></li> <li>New: Add paging to <code>batchLoad</code> and <code>batchWrite</code> (sync only)</li> <li>Docs: Migration guide for v1 -&gt; v2</li> <li>Test: Shorter timeout on test dynamo server</li> <li>Chore(deps): Upgrade OpenJDK to 17</li> <li>Chore(gradle): Upgrade to 7.6.1</li> <li>Chore(deps): Upgrade to Kotlin 1.7</li> <li>Chore(gradle): Swap out kotlin-dsl for kotlin-jvm</li> </ul>"},{"location":"changelog/#162-2022-04-01","title":"[1.6.2] - 2022-04-01","text":"<ul> <li>Fixed: Fixing release, making sure we run the publication logic (#100)</li> </ul>"},{"location":"changelog/#161-2022-04-01","title":"[1.6.1] - 2022-04-01","text":"<ul> <li>Fixed: Fixing release logic (#99)</li> </ul>"},{"location":"changelog/#160-2022-03-30","title":"[1.6.0] - 2022-03-30","text":"<ul> <li>New: Adds the correct sqlite4java dep when running on M1 Macs (#96).</li> <li>Fixed: unit test to be able to run in docker bridge environment (#97).</li> <li>Fixed: need to allow m1 arch (#94).</li> <li>Fixed: can\u2019t do enforce of the platform (#93)</li> <li>Fixed: Improve error message about property names starting with is (#71)</li> <li>Fixed: syntax formatting in README.md (#69)</li> <li>Fixed: typo \u2018album_artiest\u2019 =&gt; \u2018album_artist\u2019 (#68)</li> <li>Fixed: Improve performance for cache reflection results (#65)</li> <li>Chore: Upgrade to kotlin 1.6; gradle 7.3.2; fix docker usage (#92)</li> <li>Chore: Bump actions/checkout from 2.3.4 to 3 dependencies github_actions (#90)</li> <li>Chore: Update log4j version to 2.16.0. (#85)</li> <li>Chore: Upgrade spotless to a 5.x version (#84)</li> <li>Chore: Upgrade log4j version to avoid potential RCE vuln (#83)</li> <li>Chore: Bump junixsocket-common from 2.3.4 to 2.4.0  dependencies java (#67)</li> <li>Chore: Bump junixsocket-native-common from 2.3.4 to 2.4.0  dependencies java (#66)</li> </ul>"},{"location":"changelog/#152-2021-05-31","title":"[1.5.2] - 2021-05-31","text":"<ul> <li>Fixed: Make it easy to integrate with other testing frameworks (#58).</li> </ul>"},{"location":"changelog/#151-2021-05-31","title":"[1.5.1] - 2021-05-31","text":"<ul> <li>Fixed: To share one test server with multiple tests (#57).</li> </ul>"},{"location":"changelog/#150-2021-05-28","title":"[1.5.0] - 2021-05-28","text":"<ul> <li>New: Add async and suspending APIs for SDK 2.x (#48)</li> <li>New: In SDK 1.x, save now returns a copy of locally updated attributes (#55).</li> </ul>"},{"location":"changelog/#141-2021-04-22","title":"[1.4.1] - 2021-04-22","text":"<ul> <li>Fixed: Improve error message (#44)</li> <li>Fixed: Improve documentation (#43, #46).</li> </ul>"},{"location":"changelog/#140-2021-03-08","title":"[1.4.0] - 2021-03-08","text":"<ul> <li>New: <code>tempest-testing</code> APIs for testing DynamoDB clients using DynamoDBLocal (#33).</li> <li>New: Support for Java Record (#27).</li> </ul>"},{"location":"changelog/#130-2021-01-22","title":"[1.3.0] - 2021-01-22","text":"<ul> <li>New: <code>app.cash.tempest:tempest2:1.3.0</code> supports AWS SDK 2.x (#23).</li> </ul>"},{"location":"changelog/#121-2020-12-09","title":"[1.2.1] - 2020-12-09","text":"<ul> <li>Fixed: Automatically handle reserved words (#20).</li> </ul>"},{"location":"changelog/#120-2020-11-20","title":"[1.2.0] - 2020-11-20","text":"<ul> <li>Fixed: Remove <code>IllegalStateException</code> wrapping of <code>TransactionCanceledException</code> (#18).</li> </ul>"},{"location":"changelog/#110-2020-11-18","title":"[1.1.0] - 2020-11-18","text":"<ul> <li>New: <code>LogicalTable.codec</code> makes it easy to interoperate with <code>DynamoDBMapper</code> APIs.</li> </ul>"},{"location":"changelog/#101-2020-09-18","title":"[1.0.1] - 2020-09-18","text":"<ul> <li>New: Make <code>Offset</code>\u2019s constructor public.</li> </ul>"},{"location":"changelog/#100-2020-08-21","title":"[1.0.0] - 2020-08-21","text":"<ul> <li>New: Add Java friendly APIs.</li> <li>New: Support item types and key types declared in Java.</li> <li>New: Ignore transient properties in item types and key types.</li> </ul>"},{"location":"changelog/#010-2020-07-06","title":"[0.1.0] - 2020-07-06","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request.</p> <p>When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.</p> <p>Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA).</p>"},{"location":"1.x/guides/","title":"guides - Tempest","text":"<p>//guides</p>"},{"location":"1.x/guides/#guides","title":"guides","text":""},{"location":"1.x/guides/#packages","title":"Packages","text":"Name app.cash.tempest.guides app.cash.tempest.guides.java"},{"location":"1.x/guides/guides/app.cash.tempest.guides/","title":"Package-level declarations - Tempest","text":"<p>//guides/app.cash.tempest.guides</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/guides/guides/app.cash.tempest.guides/#types","title":"Types","text":"Name Summary AlbumTrackWritingPagerHandler [jvm]class AlbumTrackWritingPagerHandler(playlistToken: String, table: MusicTable) : WritingPager.Handler&lt;AlbumTrack.Key&gt; BatchReadWrite [jvm]class BatchReadWrite(db: MusicDb) Crud [jvm]class Crud(table: MusicTable) DataModeling [jvm]class DataModeling(db: MusicDb) OptimisticLocking [jvm]class OptimisticLocking(table: MusicTable) QueryNScan [jvm]class QueryNScan(table: MusicTable) Transaction [jvm]class Transaction(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/","title":"AlbumTrackWritingPagerHandler - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/#albumtrackwritingpagerhandler","title":"AlbumTrackWritingPagerHandler","text":"<p>[jvm]\\ class AlbumTrackWritingPagerHandler(playlistToken: String, table: MusicTable) : WritingPager.Handler&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/#constructors","title":"Constructors","text":"AlbumTrackWritingPagerHandler [jvm]constructor(playlistToken: String, table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/#functions","title":"Functions","text":"Name Summary beforePage [jvm]open override fun beforePage(remainingUpdates: List&lt;AlbumTrack.Key&gt;, maxTransactionItems: Int): Int eachPage [jvm]open override fun eachPage(proceed: () -&gt; Unit) finishPage [jvm]open override fun finishPage(builder: TransactionWriteSet.Builder) item [jvm]open override fun item(builder: TransactionWriteSet.Builder, item: AlbumTrack.Key)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/-album-track-writing-pager-handler/","title":"AlbumTrackWritingPagerHandler - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler/AlbumTrackWritingPagerHandler</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/-album-track-writing-pager-handler/#albumtrackwritingpagerhandler","title":"AlbumTrackWritingPagerHandler","text":"<p>[jvm]\\ constructor(playlistToken: String, table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/before-page/","title":"beforePage - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler/beforePage</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/before-page/#beforepage","title":"beforePage","text":"<p>[jvm]\\ open override fun beforePage(remainingUpdates: List&lt;AlbumTrack.Key&gt;, maxTransactionItems: Int): Int</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/each-page/","title":"eachPage - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler/eachPage</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/each-page/#eachpage","title":"eachPage","text":"<p>[jvm]\\ open override fun eachPage(proceed: () -&gt; Unit)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/finish-page/","title":"finishPage - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler/finishPage</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/finish-page/#finishpage","title":"finishPage","text":"<p>[jvm]\\ open override fun finishPage(builder: TransactionWriteSet.Builder)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/item/","title":"item - Tempest","text":"<p>//guides/app.cash.tempest.guides/AlbumTrackWritingPagerHandler/item</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-album-track-writing-pager-handler/item/#item","title":"item","text":"<p>[jvm]\\ open override fun item(builder: TransactionWriteSet.Builder, item: AlbumTrack.Key)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides/BatchReadWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ class BatchReadWrite(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/#constructors","title":"Constructors","text":"BatchReadWrite [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/#functions","title":"Functions","text":"Name Summary backfill [jvm]fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean loadPlaylistTracks [jvm]fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides/BatchReadWrite/BatchReadWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/backfill/","title":"backfill - Tempest","text":"<p>//guides/app.cash.tempest.guides/BatchReadWrite/backfill</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/backfill/#backfill","title":"backfill","text":"<p>[jvm]\\ fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides/BatchReadWrite/loadPlaylistTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-batch-read-write/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/","title":"Crud - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ class Crud(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/#constructors","title":"Constructors","text":"Crud [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/#functions","title":"Functions","text":"Name Summary addAlbum [jvm]fun addAlbum(albumInfo: AlbumInfo) addAlbum2 [jvm]fun addAlbum2(albumInfo: AlbumInfo) deleteAlbum [jvm]fun deleteAlbum(albumToken: String) deleteAlbum2 [jvm]fun deleteAlbum2(albumToken: String) getAlbumTitle [jvm]fun getAlbumTitle(albumToken: String): String? getAlbumTitle2 [jvm]fun getAlbumTitle2(albumToken: String): String? readAfterWrite [jvm]fun readAfterWrite()"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/-crud/","title":"Crud - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/Crud</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/add-album/","title":"addAlbum - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/addAlbum</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/add-album/#addalbum","title":"addAlbum","text":"<p>[jvm]\\ fun addAlbum(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/add-album2/","title":"addAlbum2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/addAlbum2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/add-album2/#addalbum2","title":"addAlbum2","text":"<p>[jvm]\\ fun addAlbum2(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/delete-album/","title":"deleteAlbum - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/deleteAlbum</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/delete-album/#deletealbum","title":"deleteAlbum","text":"<p>[jvm]\\ fun deleteAlbum(albumToken: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/delete-album2/","title":"deleteAlbum2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/deleteAlbum2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/delete-album2/#deletealbum2","title":"deleteAlbum2","text":"<p>[jvm]\\ fun deleteAlbum2(albumToken: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/getAlbumTitle</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\ fun getAlbumTitle(albumToken: String): String?</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/get-album-title2/","title":"getAlbumTitle2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/getAlbumTitle2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/get-album-title2/#getalbumtitle2","title":"getAlbumTitle2","text":"<p>[jvm]\\ fun getAlbumTitle2(albumToken: String): String?</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/read-after-write/","title":"readAfterWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides/Crud/readAfterWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-crud/read-after-write/#readafterwrite","title":"readAfterWrite","text":"<p>[jvm]\\ fun readAfterWrite()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides/app.cash.tempest.guides/DataModeling</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ class DataModeling(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/#constructors","title":"Constructors","text":"DataModeling [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/#functions","title":"Functions","text":"Name Summary logicalDbOptionalConfiguration [jvm]fun logicalDbOptionalConfiguration() logicalDbUsage1 [jvm]fun logicalDbUsage1() logicalDbUsage2 [jvm]fun logicalDbUsage2()"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides/app.cash.tempest.guides/DataModeling/DataModeling</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-optional-configuration/","title":"logicalDbOptionalConfiguration - Tempest","text":"<p>//guides/app.cash.tempest.guides/DataModeling/logicalDbOptionalConfiguration</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-optional-configuration/#logicaldboptionalconfiguration","title":"logicalDbOptionalConfiguration","text":"<p>[jvm]\\ fun logicalDbOptionalConfiguration()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-usage1/","title":"logicalDbUsage1 - Tempest","text":"<p>//guides/app.cash.tempest.guides/DataModeling/logicalDbUsage1</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-usage1/#logicaldbusage1","title":"logicalDbUsage1","text":"<p>[jvm]\\ fun logicalDbUsage1()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-usage2/","title":"logicalDbUsage2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/DataModeling/logicalDbUsage2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-data-modeling/logical-db-usage2/#logicaldbusage2","title":"logicalDbUsage2","text":"<p>[jvm]\\ fun logicalDbUsage2()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides/app.cash.tempest.guides/OptimisticLocking</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ class OptimisticLocking(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/#constructors","title":"Constructors","text":"OptimisticLocking [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]fun changePlaylistName(playlistToken: String, newName: String)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides/app.cash.tempest.guides/OptimisticLocking/OptimisticLocking</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides/app.cash.tempest.guides/OptimisticLocking/changePlaylistName</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-optimistic-locking/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ fun changePlaylistName(playlistToken: String, newName: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ class QueryNScan(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/#constructors","title":"Constructors","text":"QueryNScan [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/#functions","title":"Functions","text":"Name Summary loadAlbumTracks [jvm]fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks2 [jvm]fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks3 [jvm]fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks4 [jvm]fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks5 [jvm]fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks6 [jvm]fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracksAfterTrack [jvm]fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt; loadAllAlbumTracks [jvm]fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt; loadAllAlbumTracks2 [jvm]fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/QueryNScan</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks-after-track/","title":"loadAlbumTracksAfterTrack - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracksAfterTrack</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks-after-track/#loadalbumtracksaftertrack","title":"loadAlbumTracksAfterTrack","text":"<p>[jvm]\\ fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks/","title":"loadAlbumTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks/#loadalbumtracks","title":"loadAlbumTracks","text":"<p>[jvm]\\ fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks2/","title":"loadAlbumTracks2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks2/#loadalbumtracks2","title":"loadAlbumTracks2","text":"<p>[jvm]\\ fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks3/","title":"loadAlbumTracks3 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks3</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks3/#loadalbumtracks3","title":"loadAlbumTracks3","text":"<p>[jvm]\\ fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks4/","title":"loadAlbumTracks4 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks4</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks4/#loadalbumtracks4","title":"loadAlbumTracks4","text":"<p>[jvm]\\ fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks5/","title":"loadAlbumTracks5 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks5</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks5/#loadalbumtracks5","title":"loadAlbumTracks5","text":"<p>[jvm]\\ fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks6/","title":"loadAlbumTracks6 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAlbumTracks6</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-album-tracks6/#loadalbumtracks6","title":"loadAlbumTracks6","text":"<p>[jvm]\\ fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-all-album-tracks/","title":"loadAllAlbumTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAllAlbumTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-all-album-tracks/#loadallalbumtracks","title":"loadAllAlbumTracks","text":"<p>[jvm]\\ fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-all-album-tracks2/","title":"loadAllAlbumTracks2 - Tempest","text":"<p>//guides/app.cash.tempest.guides/QueryNScan/loadAllAlbumTracks2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-query-n-scan/load-all-album-tracks2/#loadallalbumtracks2","title":"loadAllAlbumTracks2","text":"<p>[jvm]\\ fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/","title":"Transaction - Tempest","text":"<p>//guides/app.cash.tempest.guides/Transaction</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ class Transaction(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/#constructors","title":"Constructors","text":"Transaction [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/#functions","title":"Functions","text":"Name Summary addTracksToPlaylist [jvm]fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;) addTrackToPlaylist [jvm]fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key) loadPlaylistTracks [jvm]fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/-transaction/","title":"Transaction - Tempest","text":"<p>//guides/app.cash.tempest.guides/Transaction/Transaction</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/add-track-to-playlist/","title":"addTrackToPlaylist - Tempest","text":"<p>//guides/app.cash.tempest.guides/Transaction/addTrackToPlaylist</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/add-track-to-playlist/#addtracktoplaylist","title":"addTrackToPlaylist","text":"<p>[jvm]\\ fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/add-tracks-to-playlist/","title":"addTracksToPlaylist - Tempest","text":"<p>//guides/app.cash.tempest.guides/Transaction/addTracksToPlaylist</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/add-tracks-to-playlist/#addtrackstoplaylist","title":"addTracksToPlaylist","text":"<p>[jvm]\\ fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides/Transaction/loadPlaylistTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides/-transaction/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/","title":"Package-level declarations - Tempest","text":"<p>//guides/app.cash.tempest.guides.java</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/#types","title":"Types","text":"Name Summary BatchReadWrite [jvm]open class BatchReadWrite Crud [jvm]open class Crud DataModeling [jvm]open class DataModeling OptimisticLocking [jvm]open class OptimisticLocking QueryNScan [jvm]open class QueryNScan Transaction [jvm]open class Transaction"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/BatchReadWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ open class BatchReadWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/#constructors","title":"Constructors","text":"BatchReadWrite [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/#functions","title":"Functions","text":"Name Summary backfill [jvm]open fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean loadPlaylistTracks [jvm]open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/BatchReadWrite/BatchReadWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/backfill/","title":"backfill - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/BatchReadWrite/backfill</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/backfill/#backfill","title":"backfill","text":"<p>[jvm]\\ open fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/BatchReadWrite/loadPlaylistTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-batch-read-write/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/","title":"Crud - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ open class Crud</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/#constructors","title":"Constructors","text":"Crud [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/#functions","title":"Functions","text":"Name Summary addAlbum [jvm]open fun addAlbum(albumInfo: AlbumInfo) addAlbum2 [jvm]open fun addAlbum2(albumInfo: AlbumInfo) deleteAlbum [jvm]open fun deleteAlbum(albumToken: String) deleteAlbum2 [jvm]open fun deleteAlbum2(albumToken: String) getAlbumTitle [jvm]@Nullableopen fun getAlbumTitle(albumToken: String): String getAlbumTitle2 [jvm]@Nullableopen fun getAlbumTitle2(albumToken: String): String readAfterWrite [jvm]open fun readAfterWrite()"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/-crud/","title":"Crud - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/Crud</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/add-album/","title":"addAlbum - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/addAlbum</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/add-album/#addalbum","title":"addAlbum","text":"<p>[jvm]\\ open fun addAlbum(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/add-album2/","title":"addAlbum2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/addAlbum2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/add-album2/#addalbum2","title":"addAlbum2","text":"<p>[jvm]\\ open fun addAlbum2(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/delete-album/","title":"deleteAlbum - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/deleteAlbum</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/delete-album/#deletealbum","title":"deleteAlbum","text":"<p>[jvm]\\ open fun deleteAlbum(albumToken: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/delete-album2/","title":"deleteAlbum2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/deleteAlbum2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/delete-album2/#deletealbum2","title":"deleteAlbum2","text":"<p>[jvm]\\ open fun deleteAlbum2(albumToken: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/getAlbumTitle</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getAlbumTitle(albumToken: String): String</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/get-album-title2/","title":"getAlbumTitle2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/getAlbumTitle2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/get-album-title2/#getalbumtitle2","title":"getAlbumTitle2","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getAlbumTitle2(albumToken: String): String</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/read-after-write/","title":"readAfterWrite - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Crud/readAfterWrite</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-crud/read-after-write/#readafterwrite","title":"readAfterWrite","text":"<p>[jvm]\\ open fun readAfterWrite()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/DataModeling</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ open class DataModeling</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/#constructors","title":"Constructors","text":"DataModeling [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/#functions","title":"Functions","text":"Name Summary logicalDbOptionalConfiguration [jvm]open fun logicalDbOptionalConfiguration() logicalDbUsage1 [jvm]open fun logicalDbUsage1() logicalDbUsage2 [jvm]open fun logicalDbUsage2()"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/DataModeling/DataModeling</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-optional-configuration/","title":"logicalDbOptionalConfiguration - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/DataModeling/logicalDbOptionalConfiguration</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-optional-configuration/#logicaldboptionalconfiguration","title":"logicalDbOptionalConfiguration","text":"<p>[jvm]\\ open fun logicalDbOptionalConfiguration()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-usage1/","title":"logicalDbUsage1 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/DataModeling/logicalDbUsage1</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-usage1/#logicaldbusage1","title":"logicalDbUsage1","text":"<p>[jvm]\\ open fun logicalDbUsage1()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-usage2/","title":"logicalDbUsage2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/DataModeling/logicalDbUsage2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-data-modeling/logical-db-usage2/#logicaldbusage2","title":"logicalDbUsage2","text":"<p>[jvm]\\ open fun logicalDbUsage2()</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/OptimisticLocking</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ open class OptimisticLocking</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/#constructors","title":"Constructors","text":"OptimisticLocking [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]open fun changePlaylistName(playlistToken: String, newName: String)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/OptimisticLocking/OptimisticLocking</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/OptimisticLocking/changePlaylistName</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-optimistic-locking/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ open fun changePlaylistName(playlistToken: String, newName: String)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ open class QueryNScan</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/#constructors","title":"Constructors","text":"QueryNScan [jvm]constructor(table: MusicTable, executor: ExecutorService)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/#functions","title":"Functions","text":"Name Summary loadAlbumTracks [jvm]open fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks2 [jvm]open fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks3 [jvm]open fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks4 [jvm]open fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks5 [jvm]open fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks6 [jvm]open fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracksAfterTrack [jvm]open fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt; loadAllAlbumTracks [jvm]open fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt; loadAllAlbumTracks2 [jvm]open fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/QueryNScan</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ constructor(table: MusicTable, executor: ExecutorService)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks-after-track/","title":"loadAlbumTracksAfterTrack - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracksAfterTrack</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks-after-track/#loadalbumtracksaftertrack","title":"loadAlbumTracksAfterTrack","text":"<p>[jvm]\\ open fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks/","title":"loadAlbumTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks/#loadalbumtracks","title":"loadAlbumTracks","text":"<p>[jvm]\\ open fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks2/","title":"loadAlbumTracks2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks2/#loadalbumtracks2","title":"loadAlbumTracks2","text":"<p>[jvm]\\ open fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks3/","title":"loadAlbumTracks3 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks3</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks3/#loadalbumtracks3","title":"loadAlbumTracks3","text":"<p>[jvm]\\ open fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks4/","title":"loadAlbumTracks4 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks4</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks4/#loadalbumtracks4","title":"loadAlbumTracks4","text":"<p>[jvm]\\ open fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks5/","title":"loadAlbumTracks5 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks5</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks5/#loadalbumtracks5","title":"loadAlbumTracks5","text":"<p>[jvm]\\ open fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks6/","title":"loadAlbumTracks6 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAlbumTracks6</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-album-tracks6/#loadalbumtracks6","title":"loadAlbumTracks6","text":"<p>[jvm]\\ open fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-all-album-tracks/","title":"loadAllAlbumTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAllAlbumTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-all-album-tracks/#loadallalbumtracks","title":"loadAllAlbumTracks","text":"<p>[jvm]\\ open fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-all-album-tracks2/","title":"loadAllAlbumTracks2 - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/QueryNScan/loadAllAlbumTracks2</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-query-n-scan/load-all-album-tracks2/#loadallalbumtracks2","title":"loadAllAlbumTracks2","text":"<p>[jvm]\\ open fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/","title":"Transaction - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Transaction</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ open class Transaction</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/#constructors","title":"Constructors","text":"Transaction [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/#functions","title":"Functions","text":"Name Summary addTracksToPlaylist [jvm]open fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;) addTrackToPlaylist [jvm]open fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key) loadPlaylistTracks [jvm]open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/-transaction/","title":"Transaction - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Transaction/Transaction</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/add-track-to-playlist/","title":"addTrackToPlaylist - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Transaction/addTrackToPlaylist</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/add-track-to-playlist/#addtracktoplaylist","title":"addTrackToPlaylist","text":"<p>[jvm]\\ open fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/add-tracks-to-playlist/","title":"addTracksToPlaylist - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Transaction/addTracksToPlaylist</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/add-tracks-to-playlist/#addtrackstoplaylist","title":"addTracksToPlaylist","text":"<p>[jvm]\\ open fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides/app.cash.tempest.guides.java/Transaction/loadPlaylistTracks</p>"},{"location":"1.x/guides/guides/app.cash.tempest.guides.java/-transaction/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/","title":"guides2 - Tempest","text":"<p>//guides2</p>"},{"location":"1.x/guides2/#guides2","title":"guides2","text":""},{"location":"1.x/guides2/#packages","title":"Packages","text":"Name app.cash.tempest2.guides app.cash.tempest2.guides.java"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/","title":"Package-level declarations - Tempest","text":"<p>//guides2/app.cash.tempest2.guides</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/#types","title":"Types","text":"Name Summary AlbumTrackWritingPagerHandler [jvm]class AlbumTrackWritingPagerHandler(playlistToken: String, table: MusicTable) : WritingPager.Handler&lt;AlbumTrack.Key&gt; AsynchronousProgramming [jvm]class AsynchronousProgramming(table: AsyncMusicTable) BatchReadWrite [jvm]class BatchReadWrite(db: MusicDb) Crud [jvm]class Crud(table: MusicTable) DataModeling [jvm]class DataModeling(db: MusicDb) OptimisticLocking [jvm]class OptimisticLocking(table: MusicTable) QueryNScan [jvm]class QueryNScan(table: MusicTable) Transaction [jvm]class Transaction(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/","title":"AlbumTrackWritingPagerHandler - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/#albumtrackwritingpagerhandler","title":"AlbumTrackWritingPagerHandler","text":"<p>[jvm]\\ class AlbumTrackWritingPagerHandler(playlistToken: String, table: MusicTable) : WritingPager.Handler&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/#constructors","title":"Constructors","text":"AlbumTrackWritingPagerHandler [jvm]constructor(playlistToken: String, table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/#functions","title":"Functions","text":"Name Summary beforePage [jvm]open override fun beforePage(remainingUpdates: List&lt;AlbumTrack.Key&gt;, maxTransactionItems: Int): Int eachPage [jvm]open override fun eachPage(proceed: () -&gt; Unit) finishPage [jvm]open override fun finishPage(builder: TransactionWriteSet.Builder) item [jvm]open override fun item(builder: TransactionWriteSet.Builder, item: AlbumTrack.Key) pageWritten [jvm]open fun pageWritten(writeSet: TransactionWriteSet)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/-album-track-writing-pager-handler/","title":"AlbumTrackWritingPagerHandler - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler/AlbumTrackWritingPagerHandler</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/-album-track-writing-pager-handler/#albumtrackwritingpagerhandler","title":"AlbumTrackWritingPagerHandler","text":"<p>[jvm]\\ constructor(playlistToken: String, table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/before-page/","title":"beforePage - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler/beforePage</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/before-page/#beforepage","title":"beforePage","text":"<p>[jvm]\\ open override fun beforePage(remainingUpdates: List&lt;AlbumTrack.Key&gt;, maxTransactionItems: Int): Int</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/each-page/","title":"eachPage - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler/eachPage</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/each-page/#eachpage","title":"eachPage","text":"<p>[jvm]\\ open override fun eachPage(proceed: () -&gt; Unit)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/finish-page/","title":"finishPage - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler/finishPage</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/finish-page/#finishpage","title":"finishPage","text":"<p>[jvm]\\ open override fun finishPage(builder: TransactionWriteSet.Builder)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/item/","title":"item - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AlbumTrackWritingPagerHandler/item</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-album-track-writing-pager-handler/item/#item","title":"item","text":"<p>[jvm]\\ open override fun item(builder: TransactionWriteSet.Builder, item: AlbumTrack.Key)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/","title":"AsynchronousProgramming - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AsynchronousProgramming</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/#asynchronousprogramming","title":"AsynchronousProgramming","text":"<p>[jvm]\\ class AsynchronousProgramming(table: AsyncMusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/#constructors","title":"Constructors","text":"AsynchronousProgramming [jvm]constructor(table: AsyncMusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]suspend fun changePlaylistName(playlistToken: String, newName: String)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/-asynchronous-programming/","title":"AsynchronousProgramming - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AsynchronousProgramming/AsynchronousProgramming</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/-asynchronous-programming/#asynchronousprogramming","title":"AsynchronousProgramming","text":"<p>[jvm]\\ constructor(table: AsyncMusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/AsynchronousProgramming/changePlaylistName</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-asynchronous-programming/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ suspend fun changePlaylistName(playlistToken: String, newName: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/BatchReadWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ class BatchReadWrite(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/#constructors","title":"Constructors","text":"BatchReadWrite [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/#functions","title":"Functions","text":"Name Summary backfill [jvm]fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean loadPlaylistTracks [jvm]fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/BatchReadWrite/BatchReadWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/backfill/","title":"backfill - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/BatchReadWrite/backfill</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/backfill/#backfill","title":"backfill","text":"<p>[jvm]\\ fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/BatchReadWrite/loadPlaylistTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-batch-read-write/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/","title":"Crud - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ class Crud(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/#constructors","title":"Constructors","text":"Crud [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/#functions","title":"Functions","text":"Name Summary addAlbum [jvm]fun addAlbum(albumInfo: AlbumInfo) addAlbum2 [jvm]fun addAlbum2(albumInfo: AlbumInfo) deleteAlbum [jvm]fun deleteAlbum(albumToken: String) deleteAlbum2 [jvm]fun deleteAlbum2(albumToken: String) getAlbumTitle [jvm]fun getAlbumTitle(albumToken: String): String? getAlbumTitle2 [jvm]fun getAlbumTitle2(albumToken: String): String? readAfterWrite [jvm]fun readAfterWrite()"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/-crud/","title":"Crud - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/Crud</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/add-album/","title":"addAlbum - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/addAlbum</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/add-album/#addalbum","title":"addAlbum","text":"<p>[jvm]\\ fun addAlbum(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/add-album2/","title":"addAlbum2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/addAlbum2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/add-album2/#addalbum2","title":"addAlbum2","text":"<p>[jvm]\\ fun addAlbum2(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/delete-album/","title":"deleteAlbum - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/deleteAlbum</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/delete-album/#deletealbum","title":"deleteAlbum","text":"<p>[jvm]\\ fun deleteAlbum(albumToken: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/delete-album2/","title":"deleteAlbum2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/deleteAlbum2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/delete-album2/#deletealbum2","title":"deleteAlbum2","text":"<p>[jvm]\\ fun deleteAlbum2(albumToken: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/getAlbumTitle</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\ fun getAlbumTitle(albumToken: String): String?</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/get-album-title2/","title":"getAlbumTitle2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/getAlbumTitle2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/get-album-title2/#getalbumtitle2","title":"getAlbumTitle2","text":"<p>[jvm]\\ fun getAlbumTitle2(albumToken: String): String?</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/read-after-write/","title":"readAfterWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Crud/readAfterWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-crud/read-after-write/#readafterwrite","title":"readAfterWrite","text":"<p>[jvm]\\ fun readAfterWrite()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/DataModeling</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ class DataModeling(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/#constructors","title":"Constructors","text":"DataModeling [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/#functions","title":"Functions","text":"Name Summary logicalDbOptionalConfiguration [jvm]fun logicalDbOptionalConfiguration() logicalDbUsage1 [jvm]fun logicalDbUsage1() logicalDbUsage2 [jvm]fun logicalDbUsage2()"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/DataModeling/DataModeling</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-optional-configuration/","title":"logicalDbOptionalConfiguration - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/DataModeling/logicalDbOptionalConfiguration</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-optional-configuration/#logicaldboptionalconfiguration","title":"logicalDbOptionalConfiguration","text":"<p>[jvm]\\ fun logicalDbOptionalConfiguration()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-usage1/","title":"logicalDbUsage1 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/DataModeling/logicalDbUsage1</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-usage1/#logicaldbusage1","title":"logicalDbUsage1","text":"<p>[jvm]\\ fun logicalDbUsage1()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-usage2/","title":"logicalDbUsage2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/DataModeling/logicalDbUsage2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-data-modeling/logical-db-usage2/#logicaldbusage2","title":"logicalDbUsage2","text":"<p>[jvm]\\ fun logicalDbUsage2()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/OptimisticLocking</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ class OptimisticLocking(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/#constructors","title":"Constructors","text":"OptimisticLocking [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]fun changePlaylistName(playlistToken: String, newName: String)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/OptimisticLocking/OptimisticLocking</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/OptimisticLocking/changePlaylistName</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-optimistic-locking/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ fun changePlaylistName(playlistToken: String, newName: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ class QueryNScan(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/#constructors","title":"Constructors","text":"QueryNScan [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/#functions","title":"Functions","text":"Name Summary loadAlbumTracks [jvm]fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks2 [jvm]fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks3 [jvm]fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks4 [jvm]fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks5 [jvm]fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks6 [jvm]fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracksAfterTrack [jvm]fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt; loadAllAlbumTracks [jvm]fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/QueryNScan</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks-after-track/","title":"loadAlbumTracksAfterTrack - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracksAfterTrack</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks-after-track/#loadalbumtracksaftertrack","title":"loadAlbumTracksAfterTrack","text":"<p>[jvm]\\ fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks/","title":"loadAlbumTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks/#loadalbumtracks","title":"loadAlbumTracks","text":"<p>[jvm]\\ fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks2/","title":"loadAlbumTracks2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks2/#loadalbumtracks2","title":"loadAlbumTracks2","text":"<p>[jvm]\\ fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks3/","title":"loadAlbumTracks3 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks3</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks3/#loadalbumtracks3","title":"loadAlbumTracks3","text":"<p>[jvm]\\ fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks4/","title":"loadAlbumTracks4 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks4</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks4/#loadalbumtracks4","title":"loadAlbumTracks4","text":"<p>[jvm]\\ fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks5/","title":"loadAlbumTracks5 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks5</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks5/#loadalbumtracks5","title":"loadAlbumTracks5","text":"<p>[jvm]\\ fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks6/","title":"loadAlbumTracks6 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAlbumTracks6</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-album-tracks6/#loadalbumtracks6","title":"loadAlbumTracks6","text":"<p>[jvm]\\ fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-all-album-tracks/","title":"loadAllAlbumTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/QueryNScan/loadAllAlbumTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-query-n-scan/load-all-album-tracks/#loadallalbumtracks","title":"loadAllAlbumTracks","text":"<p>[jvm]\\ fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/","title":"Transaction - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Transaction</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ class Transaction(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/#constructors","title":"Constructors","text":"Transaction [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/#functions","title":"Functions","text":"Name Summary addTracksToPlaylist [jvm]fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;) addTrackToPlaylist [jvm]fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key) loadPlaylistTracks [jvm]fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/-transaction/","title":"Transaction - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Transaction/Transaction</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/add-track-to-playlist/","title":"addTrackToPlaylist - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Transaction/addTrackToPlaylist</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/add-track-to-playlist/#addtracktoplaylist","title":"addTrackToPlaylist","text":"<p>[jvm]\\ fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/add-tracks-to-playlist/","title":"addTracksToPlaylist - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Transaction/addTracksToPlaylist</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/add-tracks-to-playlist/#addtrackstoplaylist","title":"addTracksToPlaylist","text":"<p>[jvm]\\ fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides/Transaction/loadPlaylistTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides/-transaction/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/","title":"Package-level declarations - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/#types","title":"Types","text":"Name Summary AsynchronousProgramming [jvm]open class AsynchronousProgramming BatchReadWrite [jvm]open class BatchReadWrite Crud [jvm]open class Crud DataModeling [jvm]open class DataModeling OptimisticLocking [jvm]open class OptimisticLocking QueryNScan [jvm]open class QueryNScan Transaction [jvm]open class Transaction"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/","title":"AsynchronousProgramming - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/AsynchronousProgramming</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/#asynchronousprogramming","title":"AsynchronousProgramming","text":"<p>[jvm]\\ open class AsynchronousProgramming</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/#constructors","title":"Constructors","text":"AsynchronousProgramming [jvm]constructor(table: AsyncMusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]open fun changePlaylistName(playlistToken: String, newName: String): CompletableFuture&lt;Void&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/-asynchronous-programming/","title":"AsynchronousProgramming - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/AsynchronousProgramming/AsynchronousProgramming</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/-asynchronous-programming/#asynchronousprogramming","title":"AsynchronousProgramming","text":"<p>[jvm]\\ constructor(table: AsyncMusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/AsynchronousProgramming/changePlaylistName</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-asynchronous-programming/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ open fun changePlaylistName(playlistToken: String, newName: String): CompletableFuture&lt;Void&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/BatchReadWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ open class BatchReadWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/#constructors","title":"Constructors","text":"BatchReadWrite [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/#functions","title":"Functions","text":"Name Summary backfill [jvm]open fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean loadPlaylistTracks [jvm]open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/-batch-read-write/","title":"BatchReadWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/BatchReadWrite/BatchReadWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/-batch-read-write/#batchreadwrite","title":"BatchReadWrite","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/backfill/","title":"backfill - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/BatchReadWrite/backfill</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/backfill/#backfill","title":"backfill","text":"<p>[jvm]\\ open fun backfill(albumTracksToSave: List&lt;AlbumTrack&gt;, albumTracksToDelete: List&lt;AlbumTrack.Key&gt;): Boolean</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/BatchReadWrite/loadPlaylistTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-batch-read-write/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/","title":"Crud - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ open class Crud</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/#constructors","title":"Constructors","text":"Crud [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/#functions","title":"Functions","text":"Name Summary addAlbum [jvm]open fun addAlbum(albumInfo: AlbumInfo) addAlbum2 [jvm]open fun addAlbum2(albumInfo: AlbumInfo) deleteAlbum [jvm]open fun deleteAlbum(albumToken: String) deleteAlbum2 [jvm]open fun deleteAlbum2(albumToken: String) getAlbumTitle [jvm]@Nullableopen fun getAlbumTitle(albumToken: String): String getAlbumTitle2 [jvm]@Nullableopen fun getAlbumTitle2(albumToken: String): String readAfterWrite [jvm]open fun readAfterWrite()"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/-crud/","title":"Crud - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/Crud</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/-crud/#crud","title":"Crud","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/add-album/","title":"addAlbum - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/addAlbum</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/add-album/#addalbum","title":"addAlbum","text":"<p>[jvm]\\ open fun addAlbum(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/add-album2/","title":"addAlbum2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/addAlbum2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/add-album2/#addalbum2","title":"addAlbum2","text":"<p>[jvm]\\ open fun addAlbum2(albumInfo: AlbumInfo)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/delete-album/","title":"deleteAlbum - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/deleteAlbum</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/delete-album/#deletealbum","title":"deleteAlbum","text":"<p>[jvm]\\ open fun deleteAlbum(albumToken: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/delete-album2/","title":"deleteAlbum2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/deleteAlbum2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/delete-album2/#deletealbum2","title":"deleteAlbum2","text":"<p>[jvm]\\ open fun deleteAlbum2(albumToken: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/getAlbumTitle</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getAlbumTitle(albumToken: String): String</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/get-album-title2/","title":"getAlbumTitle2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/getAlbumTitle2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/get-album-title2/#getalbumtitle2","title":"getAlbumTitle2","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getAlbumTitle2(albumToken: String): String</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/read-after-write/","title":"readAfterWrite - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Crud/readAfterWrite</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-crud/read-after-write/#readafterwrite","title":"readAfterWrite","text":"<p>[jvm]\\ open fun readAfterWrite()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/DataModeling</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ open class DataModeling</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/#constructors","title":"Constructors","text":"DataModeling [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/#functions","title":"Functions","text":"Name Summary logicalDbOptionalConfiguration [jvm]open fun logicalDbOptionalConfiguration() logicalDbUsage1 [jvm]open fun logicalDbUsage1() logicalDbUsage2 [jvm]open fun logicalDbUsage2()"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/-data-modeling/","title":"DataModeling - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/DataModeling/DataModeling</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/-data-modeling/#datamodeling","title":"DataModeling","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-optional-configuration/","title":"logicalDbOptionalConfiguration - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/DataModeling/logicalDbOptionalConfiguration</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-optional-configuration/#logicaldboptionalconfiguration","title":"logicalDbOptionalConfiguration","text":"<p>[jvm]\\ open fun logicalDbOptionalConfiguration()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-usage1/","title":"logicalDbUsage1 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/DataModeling/logicalDbUsage1</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-usage1/#logicaldbusage1","title":"logicalDbUsage1","text":"<p>[jvm]\\ open fun logicalDbUsage1()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-usage2/","title":"logicalDbUsage2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/DataModeling/logicalDbUsage2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-data-modeling/logical-db-usage2/#logicaldbusage2","title":"logicalDbUsage2","text":"<p>[jvm]\\ open fun logicalDbUsage2()</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/OptimisticLocking</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ open class OptimisticLocking</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/#constructors","title":"Constructors","text":"OptimisticLocking [jvm]constructor(table: MusicTable)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/#functions","title":"Functions","text":"Name Summary changePlaylistName [jvm]open fun changePlaylistName(playlistToken: String, newName: String)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/-optimistic-locking/","title":"OptimisticLocking - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/OptimisticLocking/OptimisticLocking</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/-optimistic-locking/#optimisticlocking","title":"OptimisticLocking","text":"<p>[jvm]\\ constructor(table: MusicTable)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/change-playlist-name/","title":"changePlaylistName - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/OptimisticLocking/changePlaylistName</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-optimistic-locking/change-playlist-name/#changeplaylistname","title":"changePlaylistName","text":"<p>[jvm]\\ open fun changePlaylistName(playlistToken: String, newName: String)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ open class QueryNScan</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/#constructors","title":"Constructors","text":"QueryNScan [jvm]constructor(table: MusicTable, executor: ExecutorService)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/#functions","title":"Functions","text":"Name Summary loadAlbumTracks [jvm]open fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks2 [jvm]open fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks3 [jvm]open fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks4 [jvm]open fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks5 [jvm]open fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracks6 [jvm]open fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt; loadAlbumTracksAfterTrack [jvm]open fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt; loadAllAlbumTracks [jvm]open fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt; loadAllAlbumTracks2 [jvm]open fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/-query-n-scan/","title":"QueryNScan - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/QueryNScan</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/-query-n-scan/#querynscan","title":"QueryNScan","text":"<p>[jvm]\\ constructor(table: MusicTable, executor: ExecutorService)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks-after-track/","title":"loadAlbumTracksAfterTrack - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracksAfterTrack</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks-after-track/#loadalbumtracksaftertrack","title":"loadAlbumTracksAfterTrack","text":"<p>[jvm]\\ open fun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks/","title":"loadAlbumTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks/#loadalbumtracks","title":"loadAlbumTracks","text":"<p>[jvm]\\ open fun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks2/","title":"loadAlbumTracks2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks2/#loadalbumtracks2","title":"loadAlbumTracks2","text":"<p>[jvm]\\ open fun loadAlbumTracks2(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks3/","title":"loadAlbumTracks3 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks3</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks3/#loadalbumtracks3","title":"loadAlbumTracks3","text":"<p>[jvm]\\ open fun loadAlbumTracks3(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks4/","title":"loadAlbumTracks4 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks4</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks4/#loadalbumtracks4","title":"loadAlbumTracks4","text":"<p>[jvm]\\ open fun loadAlbumTracks4(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks5/","title":"loadAlbumTracks5 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks5</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks5/#loadalbumtracks5","title":"loadAlbumTracks5","text":"<p>[jvm]\\ open fun loadAlbumTracks5(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks6/","title":"loadAlbumTracks6 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAlbumTracks6</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-album-tracks6/#loadalbumtracks6","title":"loadAlbumTracks6","text":"<p>[jvm]\\ open fun loadAlbumTracks6(albumToken: String): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-all-album-tracks/","title":"loadAllAlbumTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAllAlbumTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-all-album-tracks/#loadallalbumtracks","title":"loadAllAlbumTracks","text":"<p>[jvm]\\ open fun loadAllAlbumTracks(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-all-album-tracks2/","title":"loadAllAlbumTracks2 - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/QueryNScan/loadAllAlbumTracks2</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-query-n-scan/load-all-album-tracks2/#loadallalbumtracks2","title":"loadAllAlbumTracks2","text":"<p>[jvm]\\ open fun loadAllAlbumTracks2(): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/","title":"Transaction - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Transaction</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ open class Transaction</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/#constructors","title":"Constructors","text":"Transaction [jvm]constructor(db: MusicDb)"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/#functions","title":"Functions","text":"Name Summary addTracksToPlaylist [jvm]open fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;) addTrackToPlaylist [jvm]open fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key) loadPlaylistTracks [jvm]open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/-transaction/","title":"Transaction - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Transaction/Transaction</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/-transaction/#transaction","title":"Transaction","text":"<p>[jvm]\\ constructor(db: MusicDb)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/add-track-to-playlist/","title":"addTrackToPlaylist - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Transaction/addTrackToPlaylist</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/add-track-to-playlist/#addtracktoplaylist","title":"addTrackToPlaylist","text":"<p>[jvm]\\ open fun addTrackToPlaylist(playlistToken: String, albumTrack: AlbumTrack.Key)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/add-tracks-to-playlist/","title":"addTracksToPlaylist - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Transaction/addTracksToPlaylist</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/add-tracks-to-playlist/#addtrackstoplaylist","title":"addTracksToPlaylist","text":"<p>[jvm]\\ open fun addTracksToPlaylist(playlistToken: String, albumTracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/load-playlist-tracks/","title":"loadPlaylistTracks - Tempest","text":"<p>//guides2/app.cash.tempest2.guides.java/Transaction/loadPlaylistTracks</p>"},{"location":"1.x/guides2/guides2/app.cash.tempest2.guides.java/-transaction/load-playlist-tracks/#loadplaylisttracks","title":"loadPlaylistTracks","text":"<p>[jvm]\\ open fun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary/","title":"musiclibrary - Tempest","text":"<p>//musiclibrary</p>"},{"location":"1.x/musiclibrary/#musiclibrary","title":"musiclibrary","text":""},{"location":"1.x/musiclibrary/#packages","title":"Packages","text":"Name app.cash.tempest.musiclibrary app.cash.tempest.musiclibrary.java app.cash.tempest.reservedwords app.cash.tempest.versionedattribute"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/#types","title":"Types","text":"Name Summary AlbumInfo [jvm]data class AlbumInfo(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String) AlbumTrack [jvm]data class AlbumTrack(val album_token: String, val track_token: String, val track_title: String, val run_length: Duration) MusicDb [jvm]interface MusicDb : LogicalDb MusicItem [jvm]class MusicItem MusicTable [jvm]interface MusicTable : LogicalTable&lt;MusicItem&gt; PlaylistInfo [jvm]data class PlaylistInfo(val playlist_token: String, val playlist_name: String, val playlist_tracks: List&lt;AlbumTrack.Key&gt;, val playlist_version: Long = 1)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ data class AlbumInfo(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/#constructors","title":"Constructors","text":"AlbumInfo [jvm]constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/#types","title":"Types","text":"Name Summary ArtistIndexOffset [jvm]data class ArtistIndexOffset(val artist_name: String, val album_token: String? = null, val sort_key: String? = null) GenreIndexOffset [jvm]data class GenreIndexOffset(val genre_name: String, val album_token: String? = null, val sort_key: String? = null) Key [jvm]data class Key(val album_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/#properties","title":"Properties","text":"Name Summary album_title [jvm]val album_title: String album_token [jvm]val album_token: String artist_name [jvm]val artist_name: String genre_name [jvm]val genre_name: String key [jvm]@Transientval key: AlbumInfo.Key release_date [jvm]val release_date: LocalDate sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/AlbumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/album_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ val album_title: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/artist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/genre_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: AlbumInfo.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/release_date</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ val release_date: LocalDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ data class ArtistIndexOffset(val artist_name: String, val album_token: String? = null, val sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/#constructors","title":"Constructors","text":"ArtistIndexOffset [jvm]constructor(artist_name: String, album_token: String? = null, sort_key: String? = null)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String? = null artist_name [jvm]val artist_name: String sort_key [jvm]val sort_key: String? = null"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/ArtistIndexOffset/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ constructor(artist_name: String, album_token: String? = null, sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/ArtistIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/ArtistIndexOffset/artist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/ArtistIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-artist-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ data class GenreIndexOffset(val genre_name: String, val album_token: String? = null, val sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/#constructors","title":"Constructors","text":"GenreIndexOffset [jvm]constructor(genre_name: String, album_token: String? = null, sort_key: String? = null)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String? = null genre_name [jvm]val genre_name: String sort_key [jvm]val sort_key: String? = null"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/GenreIndexOffset/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ constructor(genre_name: String, album_token: String? = null, sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/GenreIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/GenreIndexOffset/genre_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/GenreIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-genre-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val album_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/Key/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ data class AlbumTrack(val album_token: String, val track_token: String, val track_title: String, val run_length: Duration)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/#constructors","title":"Constructors","text":"AlbumTrack [jvm]constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val album_token: String, val track_token: String = \"\") TitleIndexOffset [jvm]data class TitleIndexOffset(val album_token: String, val track_title: String? = null, val track_token: String? = null)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String key [jvm]@Transientval key: AlbumTrack.Key run_length [jvm]val run_length: Duration track_number [jvm]@Transientval track_number: Long track_title [jvm]val track_title: String track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/AlbumTrack</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)</p> <p>constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: AlbumTrack.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/run_length</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ val run_length: Duration</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/track_number</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val track_number: Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/track_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val album_token: String, val track_token: String = \"\")</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String, track_number: Long)constructor(album_token: String, track_token: String = \"\")"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_number [jvm]@Transientval track_number: Long track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String, track_number: Long)</p> <p>constructor(album_token: String, track_token: String = \"\")</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/Key/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/Key/track_number</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val track_number: Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/Key/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-key/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ data class TitleIndexOffset(val album_token: String, val track_title: String? = null, val track_token: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/#constructors","title":"Constructors","text":"TitleIndexOffset [jvm]constructor(album_token: String, track_title: String? = null, track_token: String? = null)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_title [jvm]val track_title: String? = null track_token [jvm]val track_token: String? = null"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/TitleIndexOffset/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ constructor(album_token: String, track_title: String? = null, track_token: String? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/TitleIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/TitleIndexOffset/track_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/AlbumTrack/TitleIndexOffset/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-album-track/-title-index-offset/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/","title":"MusicDb - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/#musicdb","title":"MusicDb","text":"<p>[jvm]\\ interface MusicDb : LogicalDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/#properties","title":"Properties","text":"Name Summary music [jvm]abstract val music: MusicTable"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicDb/music</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract val music: MusicTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ class MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/#constructors","title":"Constructors","text":"MusicItem [jvm]constructor()"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/#properties","title":"Properties","text":"Name Summary album_title [jvm]var album_title: String? artist_name [jvm]var artist_name: String? genre_name [jvm]var genre_name: String? partition_key [jvm]var partition_key: String? playlist_name [jvm]var playlist_name: String? playlist_size [jvm]var playlist_size: Int? playlist_tracks [jvm]var playlist_tracks: List&lt;AlbumTrack.Key&gt;? playlist_version [jvm]var playlist_version: Long? release_date [jvm]var release_date: LocalDate? run_length [jvm]var run_length: Duration? sort_key [jvm]var sort_key: String? track_title [jvm]var track_title: String? track_token [jvm]var track_token: String?"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/album_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ var album_title: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/artist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ var artist_name: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/genre_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ var genre_name: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/partition_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ var partition_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/playlist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ var playlist_name: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_size/","title":"playlist_size - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/playlist_size</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_size/#playlist_size","title":"playlist_size","text":"<p>[jvm]\\ var playlist_size: Int?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/playlist_tracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ var playlist_tracks: List&lt;AlbumTrack.Key&gt;?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/playlist_version</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ var playlist_version: Long?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/release_date</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ var release_date: LocalDate?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/run_length</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ var run_length: Duration?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ var sort_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/track_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ var track_title: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicItem/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-item/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ var track_token: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/","title":"MusicTable - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/#musictable","title":"MusicTable","text":"<p>[jvm]\\ interface MusicTable : LogicalTable&lt;MusicItem&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/#properties","title":"Properties","text":"Name Summary albumInfo [jvm]abstract val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; playlistInfo [jvm]abstract val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, MusicItem&gt; delete [jvm]open fun delete(item: MusicItem)open fun delete(item: MusicItem, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: MusicItem, ignoreVersionConstraints: Boolean)abstract fun delete(item: MusicItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) deleteKey [jvm]open fun deleteKey(key: MusicItem)open fun deleteKey(key: MusicItem, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: MusicItem, ignoreVersionConstraints: Boolean)abstract fun deleteKey(key: MusicItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: MusicItem): MusicItem?abstract fun load(key: MusicItem, consistentReads: DynamoDBMapperConfig.ConsistentReads): MusicItem? save [jvm]open fun save(item: MusicItem): MusicItemopen fun save(item: MusicItem, saveExpression: DynamoDBSaveExpression): MusicItemopen fun save(item: MusicItem, ignoreVersionConstraints: Boolean): MusicItemabstract fun save(item: MusicItem, saveExpression: DynamoDBSaveExpression?, ignoreVersionConstraints: Boolean): MusicItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/MusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ data class PlaylistInfo(val playlist_token: String, val playlist_name: String, val playlist_tracks: List&lt;AlbumTrack.Key&gt;, val playlist_version: Long = 1)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/#constructors","title":"Constructors","text":"PlaylistInfo [jvm]constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long = 1)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val playlist_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/#properties","title":"Properties","text":"Name Summary playlist_name [jvm]val playlist_name: String playlist_token [jvm]val playlist_token: String playlist_tracks [jvm]val playlist_tracks: List&lt;AlbumTrack.Key&gt; playlist_version [jvm]val playlist_version: Long = 1 sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/PlaylistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long = 1)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/playlist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ val playlist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/playlist_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/playlist_tracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ val playlist_tracks: List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/playlist_version</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ val playlist_version: Long = 1</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val playlist_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(playlist_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/#properties","title":"Properties","text":"Name Summary playlist_token [jvm]val playlist_token: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(playlist_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/Key/playlist_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary/PlaylistInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary/-playlist-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/#types","title":"Types","text":"Name Summary AlbumInfo [jvm]open class AlbumInfo AlbumTrack [jvm]open class AlbumTrack MusicDb [jvm]interface MusicDb : LogicalDb MusicItem [jvm]open class MusicItem MusicTable [jvm]interface MusicTable : LogicalTable&lt;RI&gt; PlaylistInfo [jvm]open class PlaylistInfo"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ open class AlbumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/#constructors","title":"Constructors","text":"AlbumInfo [jvm]constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/#types","title":"Types","text":"Name Summary ArtistIndexOffset [jvm]open class ArtistIndexOffset GenreIndexOffset [jvm]open class GenreIndexOffset Key [jvm]open class Key"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/#properties","title":"Properties","text":"Name Summary album_title [jvm]val album_title: String album_token [jvm]val album_token: String artist_name [jvm]val artist_name: String genre_name [jvm]val genre_name: String key [jvm]val key: AlbumInfo.Key release_date [jvm]val release_date: LocalDate sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/AlbumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/album_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ val album_title: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/artist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/genre_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/key/#key","title":"key","text":"<p>[jvm]\\ val key: AlbumInfo.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/release_date</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ val release_date: LocalDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ open class ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/#constructors","title":"Constructors","text":"ArtistIndexOffset [jvm]constructor(artist_name: String)constructor(artist_name: String, album_token: String)constructor(artist_name: String, @Nullablealbum_token: String, @Nullablesort_key: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]@Nullableval album_token: String artist_name [jvm]val artist_name: String sort_key [jvm]@Nullableval sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/ArtistIndexOffset/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ constructor(artist_name: String)</p> <p>constructor(artist_name: String, album_token: String)</p> <p>constructor(artist_name: String, @Nullablealbum_token: String, @Nullablesort_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/ArtistIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/ArtistIndexOffset/artist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/ArtistIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-artist-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ open class GenreIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/#constructors","title":"Constructors","text":"GenreIndexOffset [jvm]constructor(genre_name: String)constructor(genre_name: String, album_token: String)constructor(genre_name: String, album_token: String, sort_key: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]@Nullableval album_token: String genre_name [jvm]val genre_name: String sort_key [jvm]@Nullableval sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/GenreIndexOffset/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ constructor(genre_name: String)</p> <p>constructor(genre_name: String, album_token: String)</p> <p>constructor(genre_name: String, album_token: String, sort_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/GenreIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/GenreIndexOffset/genre_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/GenreIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-genre-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/Key/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ open class AlbumTrack</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/#constructors","title":"Constructors","text":"AlbumTrack [jvm]constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/#types","title":"Types","text":"Name Summary Key [jvm]open class Key TitleIndexOffset [jvm]open class TitleIndexOffset"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String key [jvm]val key: AlbumTrack.Key run_length [jvm]val run_length: Duration track_number [jvm]val track_number: Long track_title [jvm]val track_title: String track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/AlbumTrack</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)</p> <p>constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/key/#key","title":"key","text":"<p>[jvm]\\ val key: AlbumTrack.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/run_length</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ val run_length: Duration</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/track_number</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\ val track_number: Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/track_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String, track_token: String)constructor(album_token: String, track_number: Long)constructor(album_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_number [jvm]val track_number: Long track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String, track_token: String)</p> <p>constructor(album_token: String, track_number: Long)</p> <p>constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/Key/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/Key/track_number</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\ val track_number: Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/Key/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-key/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ open class TitleIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/#constructors","title":"Constructors","text":"TitleIndexOffset [jvm]constructor(album_token: String, track_title: String)constructor(album_token: String, track_title: String, track_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_title [jvm]val track_title: String track_token [jvm]@Nullableval track_token: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/TitleIndexOffset/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ constructor(album_token: String, track_title: String)</p> <p>constructor(album_token: String, track_title: String, track_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/TitleIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/TitleIndexOffset/track_title</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/AlbumTrack/TitleIndexOffset/track_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-album-track/-title-index-offset/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val track_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/","title":"MusicDb - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/#musicdb","title":"MusicDb","text":"<p>[jvm]\\ interface MusicDb : LogicalDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/#properties","title":"Properties","text":"Name Summary Companion [jvm]val Companion: LogicalDb.Companion"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]abstract fun batchLoad(p: KeySet, p1: DynamoDBMapperConfig.ConsistentReads, p2: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]abstract fun batchWrite(p: BatchWriteSet, p1: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult create [jvm]open fun &lt;DB : LogicalDb?&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper): DB logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;?, RI&gt; logicalTable(p: KClass&lt;T&gt;): T music [jvm]abstract fun music(): MusicTable transactionLoad [jvm]abstract fun transactionLoad(p: KeySet): ItemSet transactionWrite [jvm]abstract fun transactionWrite(p: TransactionWriteSet)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicDb/music</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract fun music(): MusicTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ open class MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/#constructors","title":"Constructors","text":"MusicItem [jvm]constructor()"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/#types","title":"Types","text":"Name Summary LocalDateTypeConverter [jvm]open class LocalDateTypeConverter : DynamoDBTypeConverter&lt;S, T&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/#functions","title":"Functions","text":"Name Summary getAlbumTitle [jvm]open fun getAlbumTitle(): String getArtistName [jvm]open fun getArtistName(): String getGenreName [jvm]open fun getGenreName(): String getPartitionKey [jvm]open fun getPartitionKey(): String getPlaylistName [jvm]open fun getPlaylistName(): String getPlaylistSize [jvm]open fun getPlaylistSize(): Integer getPlaylistTracks [jvm]open fun getPlaylistTracks(): List&lt;AlbumTrack.Key&gt; getPlaylistVersion [jvm]open fun getPlaylistVersion(): Long getReleaseDate [jvm]open fun getReleaseDate(): LocalDate getRunLength [jvm]open fun getRunLength(): Duration getSortKey [jvm]open fun getSortKey(): String getTrackTitle [jvm]open fun getTrackTitle(): String getTrackToken [jvm]open fun getTrackToken(): String setAlbumTitle [jvm]open fun setAlbumTitle(album_title: String) setArtistName [jvm]open fun setArtistName(artist_name: String) setGenreName [jvm]open fun setGenreName(genre_name: String) setPartitionKey [jvm]open fun setPartitionKey(partition_key: String) setPlaylistName [jvm]open fun setPlaylistName(playlist_name: String) setPlaylistSize [jvm]open fun setPlaylistSize(playlist_size: Integer) setPlaylistTracks [jvm]open fun setPlaylistTracks(playlist_tracks: List&lt;AlbumTrack.Key&gt;) setPlaylistVersion [jvm]open fun setPlaylistVersion(playlist_version: Long) setReleaseDate [jvm]open fun setReleaseDate(release_date: LocalDate) setRunLength [jvm]open fun setRunLength(run_length: Duration) setSortKey [jvm]open fun setSortKey(sort_key: String) setTrackTitle [jvm]open fun setTrackTitle(track_title: String) setTrackToken [jvm]open fun setTrackToken(track_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/MusicItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getAlbumTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\ open fun getAlbumTitle(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-artist-name/","title":"getArtistName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getArtistName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-artist-name/#getartistname","title":"getArtistName","text":"<p>[jvm]\\ open fun getArtistName(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-genre-name/","title":"getGenreName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getGenreName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-genre-name/#getgenrename","title":"getGenreName","text":"<p>[jvm]\\ open fun getGenreName(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-partition-key/","title":"getPartitionKey - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getPartitionKey</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-partition-key/#getpartitionkey","title":"getPartitionKey","text":"<p>[jvm]\\ open fun getPartitionKey(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-name/","title":"getPlaylistName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getPlaylistName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-name/#getplaylistname","title":"getPlaylistName","text":"<p>[jvm]\\ open fun getPlaylistName(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-size/","title":"getPlaylistSize - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getPlaylistSize</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-size/#getplaylistsize","title":"getPlaylistSize","text":"<p>[jvm]\\ open fun getPlaylistSize(): Integer</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-tracks/","title":"getPlaylistTracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getPlaylistTracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-tracks/#getplaylisttracks","title":"getPlaylistTracks","text":"<p>[jvm]\\ open fun getPlaylistTracks(): List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-version/","title":"getPlaylistVersion - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getPlaylistVersion</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-playlist-version/#getplaylistversion","title":"getPlaylistVersion","text":"<p>[jvm]\\ open fun getPlaylistVersion(): Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-release-date/","title":"getReleaseDate - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getReleaseDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-release-date/#getreleasedate","title":"getReleaseDate","text":"<p>[jvm]\\ open fun getReleaseDate(): LocalDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-run-length/","title":"getRunLength - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getRunLength</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-run-length/#getrunlength","title":"getRunLength","text":"<p>[jvm]\\ open fun getRunLength(): Duration</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-sort-key/","title":"getSortKey - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getSortKey</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-sort-key/#getsortkey","title":"getSortKey","text":"<p>[jvm]\\ open fun getSortKey(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-track-title/","title":"getTrackTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getTrackTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-track-title/#gettracktitle","title":"getTrackTitle","text":"<p>[jvm]\\ open fun getTrackTitle(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-track-token/","title":"getTrackToken - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/getTrackToken</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/get-track-token/#gettracktoken","title":"getTrackToken","text":"<p>[jvm]\\ open fun getTrackToken(): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-album-title/","title":"setAlbumTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setAlbumTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-album-title/#setalbumtitle","title":"setAlbumTitle","text":"<p>[jvm]\\ open fun setAlbumTitle(album_title: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-artist-name/","title":"setArtistName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setArtistName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-artist-name/#setartistname","title":"setArtistName","text":"<p>[jvm]\\ open fun setArtistName(artist_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-genre-name/","title":"setGenreName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setGenreName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-genre-name/#setgenrename","title":"setGenreName","text":"<p>[jvm]\\ open fun setGenreName(genre_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-partition-key/","title":"setPartitionKey - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setPartitionKey</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-partition-key/#setpartitionkey","title":"setPartitionKey","text":"<p>[jvm]\\ open fun setPartitionKey(partition_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-name/","title":"setPlaylistName - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setPlaylistName</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-name/#setplaylistname","title":"setPlaylistName","text":"<p>[jvm]\\ open fun setPlaylistName(playlist_name: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-size/","title":"setPlaylistSize - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setPlaylistSize</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-size/#setplaylistsize","title":"setPlaylistSize","text":"<p>[jvm]\\ open fun setPlaylistSize(playlist_size: Integer)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-tracks/","title":"setPlaylistTracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setPlaylistTracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-tracks/#setplaylisttracks","title":"setPlaylistTracks","text":"<p>[jvm]\\ open fun setPlaylistTracks(playlist_tracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-version/","title":"setPlaylistVersion - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setPlaylistVersion</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-playlist-version/#setplaylistversion","title":"setPlaylistVersion","text":"<p>[jvm]\\ open fun setPlaylistVersion(playlist_version: Long)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-release-date/","title":"setReleaseDate - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setReleaseDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-release-date/#setreleasedate","title":"setReleaseDate","text":"<p>[jvm]\\ open fun setReleaseDate(release_date: LocalDate)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-run-length/","title":"setRunLength - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setRunLength</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-run-length/#setrunlength","title":"setRunLength","text":"<p>[jvm]\\ open fun setRunLength(run_length: Duration)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-sort-key/","title":"setSortKey - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setSortKey</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-sort-key/#setsortkey","title":"setSortKey","text":"<p>[jvm]\\ open fun setSortKey(sort_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-track-title/","title":"setTrackTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setTrackTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-track-title/#settracktitle","title":"setTrackTitle","text":"<p>[jvm]\\ open fun setTrackTitle(track_title: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-track-token/","title":"setTrackToken - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/setTrackToken</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/set-track-token/#settracktoken","title":"setTrackToken","text":"<p>[jvm]\\ open fun setTrackToken(track_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/","title":"LocalDateTypeConverter - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/LocalDateTypeConverter</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/#localdatetypeconverter","title":"LocalDateTypeConverter","text":"<p>[jvm]\\ open class LocalDateTypeConverter : DynamoDBTypeConverter&lt;S, T&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/#constructors","title":"Constructors","text":"LocalDateTypeConverter [jvm]constructor()"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/#functions","title":"Functions","text":"Name Summary convert [jvm]open fun convert(object: LocalDate): String unconvert [jvm]open fun unconvert(object: String): LocalDate"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/-local-date-type-converter/","title":"LocalDateTypeConverter - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/LocalDateTypeConverter/LocalDateTypeConverter</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/-local-date-type-converter/#localdatetypeconverter","title":"LocalDateTypeConverter","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/convert/","title":"convert - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/LocalDateTypeConverter/convert</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/convert/#convert","title":"convert","text":"<p>[jvm]\\ open fun convert(object: LocalDate): String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/unconvert/","title":"unconvert - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicItem/LocalDateTypeConverter/unconvert</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-item/-local-date-type-converter/unconvert/#unconvert","title":"unconvert","text":"<p>[jvm]\\ open fun unconvert(object: String): LocalDate</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/","title":"MusicTable - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/#musictable","title":"MusicTable","text":"<p>[jvm]\\ interface MusicTable : LogicalTable&lt;RI&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/#functions","title":"Functions","text":"Name Summary albumInfo [jvm]abstract fun albumInfo(): InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract fun albumInfoByArtist(): SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract fun albumInfoByGenre(): SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract fun albumTracks(): InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract fun albumTracksByTitle(): SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; codec [jvm]abstract fun &lt;T&gt; codec(p: KClass&lt;T&gt;): Codec&lt;T, RI&gt; delete [jvm]abstract fun delete(p: I, p1: DynamoDBDeleteExpression, p2: Boolean) deleteKey [jvm]abstract fun deleteKey(p: K, p1: DynamoDBDeleteExpression, p2: Boolean) inlineView [jvm]abstract fun &lt;K, I&gt; inlineView(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]abstract fun load(p: K, p1: DynamoDBMapperConfig.ConsistentReads): I playlistInfo [jvm]abstract fun playlistInfo(): InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; save [jvm]abstract fun save(p: I, p1: DynamoDBSaveExpression, p2: Boolean): I secondaryIndex [jvm]abstract fun &lt;K, I&gt; secondaryIndex(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract fun albumInfoByArtist(): SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract fun albumInfoByGenre(): SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract fun albumInfo(): InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract fun albumTracksByTitle(): SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract fun albumTracks(): InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/MusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract fun playlistInfo(): InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ open class PlaylistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/#constructors","title":"Constructors","text":"PlaylistInfo [jvm]constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;)constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/#types","title":"Types","text":"Name Summary Key [jvm]open class Key"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/#properties","title":"Properties","text":"Name Summary playlist_name [jvm]val playlist_name: String playlist_token [jvm]val playlist_token: String playlist_tracks [jvm]val playlist_tracks: List&lt;AlbumTrack.Key&gt; playlist_version [jvm]val playlist_version: Long sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/PlaylistInfo</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;)</p> <p>constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/playlist_name</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ val playlist_name: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/playlist_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/playlist_tracks</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ val playlist_tracks: List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/playlist_version</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ val playlist_version: Long</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(playlist_token: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/#properties","title":"Properties","text":"Name Summary playlist_token [jvm]val playlist_token: String sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(playlist_token: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/Key/playlist_token</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.musiclibrary.java/PlaylistInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.musiclibrary.java/-playlist-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/#types","title":"Types","text":"Name Summary ReservedWordObject [jvm]data class ReservedWordObject(val agent: String, val counter: String, val tOkEn: String) ReservedWordsDb [jvm]interface ReservedWordsDb : LogicalDb ReservedWordsItem [jvm]class ReservedWordsItem ReservedWordsTable [jvm]interface ReservedWordsTable : LogicalTable&lt;ReservedWordsItem&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/","title":"ReservedWordObject - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/#reservedwordobject","title":"ReservedWordObject","text":"<p>[jvm]\\ data class ReservedWordObject(val agent: String, val counter: String, val tOkEn: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/#constructors","title":"Constructors","text":"ReservedWordObject [jvm]constructor(agent: String, counter: String, tOkEn: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val agent: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/#properties","title":"Properties","text":"Name Summary agent [jvm]val agent: String counter [jvm]val counter: String key [jvm]@Transientval key: ReservedWordObject.Key sort_key [jvm]val sort_key: String tOkEn [jvm]val tOkEn: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-reserved-word-object/","title":"ReservedWordObject - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/ReservedWordObject</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-reserved-word-object/#reservedwordobject","title":"ReservedWordObject","text":"<p>[jvm]\\ constructor(agent: String, counter: String, tOkEn: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/agent/","title":"agent - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/agent</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/agent/#agent","title":"agent","text":"<p>[jvm]\\ val agent: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/counter/","title":"counter - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/counter</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/counter/#counter","title":"counter","text":"<p>[jvm]\\ val counter: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: ReservedWordObject.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/t-ok-en/","title":"tOkEn - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/tOkEn</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/t-ok-en/#token","title":"tOkEn","text":"<p>[jvm]\\ val tOkEn: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val agent: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(agent: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/#properties","title":"Properties","text":"Name Summary agent [jvm]val agent: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(agent: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/agent/","title":"agent - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/Key/agent</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/agent/#agent","title":"agent","text":"<p>[jvm]\\ val agent: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordObject/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-word-object/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/","title":"ReservedWordsDb - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/#reservedwordsdb","title":"ReservedWordsDb","text":"<p>[jvm]\\ interface ReservedWordsDb : LogicalDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/#properties","title":"Properties","text":"Name Summary table [jvm]abstract val table: ReservedWordsTable"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/table/","title":"table - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsDb/table</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-db/table/#table","title":"table","text":"<p>[jvm]\\ abstract val table: ReservedWordsTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/","title":"ReservedWordsItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/#reservedwordsitem","title":"ReservedWordsItem","text":"<p>[jvm]\\ class ReservedWordsItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/#constructors","title":"Constructors","text":"ReservedWordsItem [jvm]constructor()"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/#properties","title":"Properties","text":"Name Summary agent [jvm]var agent: String? counter [jvm]var counter: String? partition_key [jvm]var partition_key: String? sort_key [jvm]var sort_key: String? tOkEn [jvm]var tOkEn: String?"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/-reserved-words-item/","title":"ReservedWordsItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/ReservedWordsItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/-reserved-words-item/#reservedwordsitem","title":"ReservedWordsItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/agent/","title":"agent - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/agent</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/agent/#agent","title":"agent","text":"<p>[jvm]\\ var agent: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/counter/","title":"counter - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/counter</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/counter/#counter","title":"counter","text":"<p>[jvm]\\ var counter: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/partition_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ var partition_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ var sort_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/t-ok-en/","title":"tOkEn - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsItem/tOkEn</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-item/t-ok-en/#token","title":"tOkEn","text":"<p>[jvm]\\ var tOkEn: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/","title":"ReservedWordsTable - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/#reservedwordstable","title":"ReservedWordsTable","text":"<p>[jvm]\\ interface ReservedWordsTable : LogicalTable&lt;ReservedWordsItem&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/#properties","title":"Properties","text":"Name Summary reservedWords [jvm]abstract val reservedWords: InlineView&lt;ReservedWordObject.Key, ReservedWordObject&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, ReservedWordsItem&gt; delete [jvm]open fun delete(item: ReservedWordsItem)open fun delete(item: ReservedWordsItem, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: ReservedWordsItem, ignoreVersionConstraints: Boolean)abstract fun delete(item: ReservedWordsItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) deleteKey [jvm]open fun deleteKey(key: ReservedWordsItem)open fun deleteKey(key: ReservedWordsItem, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: ReservedWordsItem, ignoreVersionConstraints: Boolean)abstract fun deleteKey(key: ReservedWordsItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: ReservedWordsItem): ReservedWordsItem?abstract fun load(key: ReservedWordsItem, consistentReads: DynamoDBMapperConfig.ConsistentReads): ReservedWordsItem? save [jvm]open fun save(item: ReservedWordsItem): ReservedWordsItemopen fun save(item: ReservedWordsItem, saveExpression: DynamoDBSaveExpression): ReservedWordsItemopen fun save(item: ReservedWordsItem, ignoreVersionConstraints: Boolean): ReservedWordsItemabstract fun save(item: ReservedWordsItem, saveExpression: DynamoDBSaveExpression?, ignoreVersionConstraints: Boolean): ReservedWordsItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/reserved-words/","title":"reservedWords - Tempest","text":"<p>//musiclibrary/app.cash.tempest.reservedwords/ReservedWordsTable/reservedWords</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.reservedwords/-reserved-words-table/reserved-words/#reservedwords","title":"reservedWords","text":"<p>[jvm]\\ abstract val reservedWords: InlineView&lt;ReservedWordObject.Key, ReservedWordObject&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/#types","title":"Types","text":"Name Summary VersionedAttribute [jvm]data class VersionedAttribute(val partition_key: String, val updated_at: Long? = null, val version: Long? = null) VersionedAttributeDb [jvm]interface VersionedAttributeDb : LogicalDb VersionedAttributeItem [jvm]class VersionedAttributeItem VersionedAttributeTable [jvm]interface VersionedAttributeTable : LogicalTable&lt;VersionedAttributeItem&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/","title":"VersionedAttribute - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/#versionedattribute","title":"VersionedAttribute","text":"<p>[jvm]\\ data class VersionedAttribute(val partition_key: String, val updated_at: Long? = null, val version: Long? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/#constructors","title":"Constructors","text":"VersionedAttribute [jvm]constructor(partition_key: String, updated_at: Long? = null, version: Long? = null)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val partition_key: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/#properties","title":"Properties","text":"Name Summary key [jvm]@Transientval key: VersionedAttribute.Key partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String updated_at [jvm]val updated_at: Long? = null version [jvm]val version: Long? = null"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-versioned-attribute/","title":"VersionedAttribute - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/VersionedAttribute</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-versioned-attribute/#versionedattribute","title":"VersionedAttribute","text":"<p>[jvm]\\ constructor(partition_key: String, updated_at: Long? = null, version: Long? = null)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/key/","title":"key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: VersionedAttribute.Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/partition_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/updated_at/","title":"updated_at - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/updated_at</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/updated_at/#updated_at","title":"updated_at","text":"<p>[jvm]\\ val updated_at: Long? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/version/","title":"version - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/version</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/version/#version","title":"version","text":"<p>[jvm]\\ val version: Long? = null</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val partition_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(partition_key: String)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/#properties","title":"Properties","text":"Name Summary partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/Key/Key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(partition_key: String)</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/Key/partition_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttribute/Key/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/","title":"VersionedAttributeDb - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/#versionedattributedb","title":"VersionedAttributeDb","text":"<p>[jvm]\\ interface VersionedAttributeDb : LogicalDb</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/#properties","title":"Properties","text":"Name Summary versionedAttributes [jvm]abstract val versionedAttributes: VersionedAttributeTable"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/versioned-attributes/","title":"versionedAttributes - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeDb/versionedAttributes</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-db/versioned-attributes/#versionedattributes","title":"versionedAttributes","text":"<p>[jvm]\\ abstract val versionedAttributes: VersionedAttributeTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/","title":"VersionedAttributeItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/#versionedattributeitem","title":"VersionedAttributeItem","text":"<p>[jvm]\\ class VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/#constructors","title":"Constructors","text":"VersionedAttributeItem [jvm]constructor()"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/#properties","title":"Properties","text":"Name Summary partition_key [jvm]var partition_key: String? sort_key [jvm]var sort_key: String? updated_at [jvm]var updated_at: Long? version [jvm]var version: Long?"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/-versioned-attribute-item/","title":"VersionedAttributeItem - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem/VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/-versioned-attribute-item/#versionedattributeitem","title":"VersionedAttributeItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem/partition_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ var partition_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem/sort_key</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ var sort_key: String?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/updated_at/","title":"updated_at - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem/updated_at</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/updated_at/#updated_at","title":"updated_at","text":"<p>[jvm]\\ var updated_at: Long?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/version/","title":"version - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeItem/version</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-item/version/#version","title":"version","text":"<p>[jvm]\\ var version: Long?</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/","title":"VersionedAttributeTable - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeTable</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/#versionedattributetable","title":"VersionedAttributeTable","text":"<p>[jvm]\\ interface VersionedAttributeTable : LogicalTable&lt;VersionedAttributeItem&gt;</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/#properties","title":"Properties","text":"Name Summary attributes [jvm]abstract val attributes: InlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, VersionedAttributeItem&gt; delete [jvm]open fun delete(item: VersionedAttributeItem)open fun delete(item: VersionedAttributeItem, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: VersionedAttributeItem, ignoreVersionConstraints: Boolean)abstract fun delete(item: VersionedAttributeItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) deleteKey [jvm]open fun deleteKey(key: VersionedAttributeItem)open fun deleteKey(key: VersionedAttributeItem, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: VersionedAttributeItem, ignoreVersionConstraints: Boolean)abstract fun deleteKey(key: VersionedAttributeItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: VersionedAttributeItem): VersionedAttributeItem?abstract fun load(key: VersionedAttributeItem, consistentReads: DynamoDBMapperConfig.ConsistentReads): VersionedAttributeItem? save [jvm]open fun save(item: VersionedAttributeItem): VersionedAttributeItemopen fun save(item: VersionedAttributeItem, saveExpression: DynamoDBSaveExpression): VersionedAttributeItemopen fun save(item: VersionedAttributeItem, ignoreVersionConstraints: Boolean): VersionedAttributeItemabstract fun save(item: VersionedAttributeItem, saveExpression: DynamoDBSaveExpression?, ignoreVersionConstraints: Boolean): VersionedAttributeItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/attributes/","title":"attributes - Tempest","text":"<p>//musiclibrary/app.cash.tempest.versionedattribute/VersionedAttributeTable/attributes</p>"},{"location":"1.x/musiclibrary/musiclibrary/app.cash.tempest.versionedattribute/-versioned-attribute-table/attributes/#attributes","title":"attributes","text":"<p>[jvm]\\ abstract val attributes: InlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt;</p>"},{"location":"1.x/musiclibrary-testing/","title":"musiclibrary-testing - Tempest","text":"<p>//musiclibrary-testing</p>"},{"location":"1.x/musiclibrary-testing/#musiclibrary-testing","title":"musiclibrary-testing","text":""},{"location":"1.x/musiclibrary-testing/#packages","title":"Packages","text":"Name app.cash.tempest.musiclibrary"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/#types","title":"Types","text":"Name Summary Album [jvm]data class Album(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String, val tracks: List&lt;Track&gt;, val label: String? = null) Track [jvm]data class Track(val track_title: String, val run_length: Duration)"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/#properties","title":"Properties","text":"Name Summary AFTER_HOURS_EP [jvm]val AFTER_HOURS_EP: Album LOCKDOWN_SINGLE [jvm]val LOCKDOWN_SINGLE: Album SPIRIT_WORLD_FIELD_GUIDE [jvm]val SPIRIT_WORLD_FIELD_GUIDE: Album THE_DARK_SIDE_OF_THE_MOON [jvm]val THE_DARK_SIDE_OF_THE_MOON: Album THE_WALL [jvm]val THE_WALL: Album WHAT_YOU_DO_TO_ME_SINGLE [jvm]val WHAT_YOU_DO_TO_ME_SINGLE: Album"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-a-f-t-e-r_-h-o-u-r-s_-e-p/","title":"AFTER_HOURS_EP - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/AFTER_HOURS_EP</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-a-f-t-e-r_-h-o-u-r-s_-e-p/#after_hours_ep","title":"AFTER_HOURS_EP","text":"<p>[jvm]\\ val AFTER_HOURS_EP: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-l-o-c-k-d-o-w-n_-s-i-n-g-l-e/","title":"LOCKDOWN_SINGLE - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/LOCKDOWN_SINGLE</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-l-o-c-k-d-o-w-n_-s-i-n-g-l-e/#lockdown_single","title":"LOCKDOWN_SINGLE","text":"<p>[jvm]\\ val LOCKDOWN_SINGLE: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-s-p-i-r-i-t_-w-o-r-l-d_-f-i-e-l-d_-g-u-i-d-e/","title":"SPIRIT_WORLD_FIELD_GUIDE - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/SPIRIT_WORLD_FIELD_GUIDE</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-s-p-i-r-i-t_-w-o-r-l-d_-f-i-e-l-d_-g-u-i-d-e/#spirit_world_field_guide","title":"SPIRIT_WORLD_FIELD_GUIDE","text":"<p>[jvm]\\ val SPIRIT_WORLD_FIELD_GUIDE: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-t-h-e_-d-a-r-k_-s-i-d-e_-o-f_-t-h-e_-m-o-o-n/","title":"THE_DARK_SIDE_OF_THE_MOON - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/THE_DARK_SIDE_OF_THE_MOON</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-t-h-e_-d-a-r-k_-s-i-d-e_-o-f_-t-h-e_-m-o-o-n/#the_dark_side_of_the_moon","title":"THE_DARK_SIDE_OF_THE_MOON","text":"<p>[jvm]\\ val THE_DARK_SIDE_OF_THE_MOON: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-t-h-e_-w-a-l-l/","title":"THE_WALL - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/THE_WALL</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-t-h-e_-w-a-l-l/#the_wall","title":"THE_WALL","text":"<p>[jvm]\\ val THE_WALL: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-w-h-a-t_-y-o-u_-d-o_-t-o_-m-e_-s-i-n-g-l-e/","title":"WHAT_YOU_DO_TO_ME_SINGLE - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/WHAT_YOU_DO_TO_ME_SINGLE</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-w-h-a-t_-y-o-u_-d-o_-t-o_-m-e_-s-i-n-g-l-e/#what_you_do_to_me_single","title":"WHAT_YOU_DO_TO_ME_SINGLE","text":"<p>[jvm]\\ val WHAT_YOU_DO_TO_ME_SINGLE: Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/","title":"Album - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/#album","title":"Album","text":"<p>[jvm]\\ data class Album(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String, val tracks: List&lt;Track&gt;, val label: String? = null)</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/#constructors","title":"Constructors","text":"Album [jvm]constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String, tracks: List&lt;Track&gt;, label: String? = null)"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/#properties","title":"Properties","text":"Name Summary album_title [jvm]val album_title: String album_token [jvm]val album_token: String artist_name [jvm]val artist_name: String genre_name [jvm]val genre_name: String label [jvm]val label: String? = null release_date [jvm]val release_date: LocalDate tracks [jvm]val tracks: List&lt;Track&gt; trackTitles [jvm]val trackTitles: List&lt;String&gt;"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/-album/","title":"Album - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/Album</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/-album/#album","title":"Album","text":"<p>[jvm]\\ constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String, tracks: List&lt;Track&gt;, label: String? = null)</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/album_title</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ val album_title: String</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/album_token</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/artist_name</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/genre_name</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/label/","title":"label - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/label</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/label/#label","title":"label","text":"<p>[jvm]\\ val label: String? = null</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/release_date</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ val release_date: LocalDate</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/track-titles/","title":"trackTitles - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/trackTitles</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/track-titles/#tracktitles","title":"trackTitles","text":"<p>[jvm]\\ val trackTitles: List&lt;String&gt;</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/tracks/","title":"tracks - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Album/tracks</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-album/tracks/#tracks","title":"tracks","text":"<p>[jvm]\\ val tracks: List&lt;Track&gt;</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/","title":"Track - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Track</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/#track","title":"Track","text":"<p>[jvm]\\ data class Track(val track_title: String, val run_length: Duration)</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/#constructors","title":"Constructors","text":"Track [jvm]constructor(track_title: String, run_length: Duration)"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/#properties","title":"Properties","text":"Name Summary run_length [jvm]val run_length: Duration track_title [jvm]val track_title: String"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/-track/","title":"Track - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Track/Track</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/-track/#track","title":"Track","text":"<p>[jvm]\\ constructor(track_title: String, run_length: Duration)</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Track/run_length</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ val run_length: Duration</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary-testing/app.cash.tempest.musiclibrary/Track/track_title</p>"},{"location":"1.x/musiclibrary-testing/musiclibrary-testing/app.cash.tempest.musiclibrary/-track/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary2/","title":"musiclibrary2 - Tempest","text":"<p>//musiclibrary2</p>"},{"location":"1.x/musiclibrary2/#musiclibrary2","title":"musiclibrary2","text":""},{"location":"1.x/musiclibrary2/#packages","title":"Packages","text":"Name app.cash.tempest2.musiclibrary app.cash.tempest2.musiclibrary.java app.cash.tempest2.musiclibrary.versionedattribute"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/#types","title":"Types","text":"Name Summary AlbumInfo [jvm]data class AlbumInfo(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String, val label_name: String? = null) AlbumTrack [jvm]data class AlbumTrack(val album_token: String, val track_token: String, val track_title: String, val run_length: Duration, val track_description: String = \"\") AsyncMusicDb [jvm]interface AsyncMusicDb : AsyncLogicalDb AsyncMusicTable [jvm]interface AsyncMusicTable : AsyncLogicalTable&lt;MusicItem&gt; MusicDb [jvm]interface MusicDb : LogicalDb MusicItem [jvm]class MusicItem MusicTable [jvm]interface MusicTable : LogicalTable&lt;MusicItem&gt; PlaylistInfo [jvm]data class PlaylistInfo(val playlist_token: String, val playlist_name: String, val playlist_tracks: List&lt;AlbumTrack.Key&gt;, val playlist_version: Long = 1)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ data class AlbumInfo(val album_token: String, val album_title: String, val artist_name: String, val release_date: LocalDate, val genre_name: String, val label_name: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/#constructors","title":"Constructors","text":"AlbumInfo [jvm]constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String, label_name: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/#types","title":"Types","text":"Name Summary ArtistIndexOffset [jvm]data class ArtistIndexOffset(val artist_name: String, val album_token: String? = null, val sort_key: String? = null) GenreIndexOffset [jvm]data class GenreIndexOffset(val genre_name: String, val album_token: String? = null, val sort_key: String? = null) Key [jvm]data class Key(val album_token: String) LabelIndexOffset [jvm]data class LabelIndexOffset(val label_name: String, val album_token: String? = null, val sort_key: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/#properties","title":"Properties","text":"Name Summary album_title [jvm]val album_title: String album_token [jvm]val album_token: String artist_name [jvm]val artist_name: String genre_name [jvm]val genre_name: String key [jvm]@Transientval key: AlbumInfo.Key label_name [jvm]val label_name: String? = null release_date [jvm]val release_date: LocalDate sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/AlbumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String, label_name: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/album_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ val album_title: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/artist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/genre_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: AlbumInfo.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/label_name/","title":"label_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/label_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/label_name/#label_name","title":"label_name","text":"<p>[jvm]\\ val label_name: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/release_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ val release_date: LocalDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ data class ArtistIndexOffset(val artist_name: String, val album_token: String? = null, val sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/#constructors","title":"Constructors","text":"ArtistIndexOffset [jvm]constructor(artist_name: String, album_token: String? = null, sort_key: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String? = null artist_name [jvm]val artist_name: String sort_key [jvm]val sort_key: String? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/ArtistIndexOffset/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ constructor(artist_name: String, album_token: String? = null, sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/ArtistIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/ArtistIndexOffset/artist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/ArtistIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-artist-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ data class GenreIndexOffset(val genre_name: String, val album_token: String? = null, val sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/#constructors","title":"Constructors","text":"GenreIndexOffset [jvm]constructor(genre_name: String, album_token: String? = null, sort_key: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String? = null genre_name [jvm]val genre_name: String sort_key [jvm]val sort_key: String? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/GenreIndexOffset/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ constructor(genre_name: String, album_token: String? = null, sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/GenreIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/GenreIndexOffset/genre_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/GenreIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-genre-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val album_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/Key/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/","title":"LabelIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/LabelIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/#labelindexoffset","title":"LabelIndexOffset","text":"<p>[jvm]\\ data class LabelIndexOffset(val label_name: String, val album_token: String? = null, val sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/#constructors","title":"Constructors","text":"LabelIndexOffset [jvm]constructor(label_name: String, album_token: String? = null, sort_key: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String? = null label_name [jvm]val label_name: String sort_key [jvm]val sort_key: String? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/-label-index-offset/","title":"LabelIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/LabelIndexOffset/LabelIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/-label-index-offset/#labelindexoffset","title":"LabelIndexOffset","text":"<p>[jvm]\\ constructor(label_name: String, album_token: String? = null, sort_key: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/LabelIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/label_name/","title":"label_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/LabelIndexOffset/label_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/label_name/#label_name","title":"label_name","text":"<p>[jvm]\\ val label_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumInfo/LabelIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-info/-label-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ data class AlbumTrack(val album_token: String, val track_token: String, val track_title: String, val run_length: Duration, val track_description: String = \"\")</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/#constructors","title":"Constructors","text":"AlbumTrack [jvm]constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration, track_description: String = \"\")constructor(album_token: String, track_token: String, track_title: String, run_length: Duration, track_description: String = \"\")"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val album_token: String, val track_token: String = \"\") TitleIndexOffset [jvm]data class TitleIndexOffset(val album_token: String, val track_title: String? = null, val track_token: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String key [jvm]@Transientval key: AlbumTrack.Key run_length [jvm]val run_length: Duration track_description [jvm]val track_description: String track_number [jvm]@Transientval track_number: Long track_title [jvm]val track_title: String track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/AlbumTrack</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration, track_description: String = \"\")</p> <p>constructor(album_token: String, track_token: String, track_title: String, run_length: Duration, track_description: String = \"\")</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: AlbumTrack.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/run_length</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ val run_length: Duration</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_description/","title":"track_description - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/track_description</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_description/#track_description","title":"track_description","text":"<p>[jvm]\\ val track_description: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/track_number</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val track_number: Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/track_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val album_token: String, val track_token: String = \"\")</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String, track_number: Long)constructor(album_token: String, track_token: String = \"\")"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_number [jvm]@Transientval track_number: Long track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String, track_number: Long)</p> <p>constructor(album_token: String, track_token: String = \"\")</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/Key/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/Key/track_number</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val track_number: Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/Key/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-key/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ data class TitleIndexOffset(val album_token: String, val track_title: String? = null, val track_token: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/#constructors","title":"Constructors","text":"TitleIndexOffset [jvm]constructor(album_token: String, track_title: String? = null, track_token: String? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_title [jvm]val track_title: String? = null track_token [jvm]val track_token: String? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/TitleIndexOffset/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ constructor(album_token: String, track_title: String? = null, track_token: String? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/TitleIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/TitleIndexOffset/track_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AlbumTrack/TitleIndexOffset/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-album-track/-title-index-offset/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/","title":"AsyncMusicDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/#asyncmusicdb","title":"AsyncMusicDb","text":"<p>[jvm]\\ interface AsyncMusicDb : AsyncLogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/#properties","title":"Properties","text":"Name Summary music [jvm]abstract val music: AsyncMusicTable"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open suspend fun batchLoad(vararg keys: Any, consistentReads: Boolean, maxPageSize: Int): ItemSetopen suspend fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, maxPageSize: Int): ItemSetopen suspend fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSet batchLoadAsync [jvm]open fun batchLoadAsync(keys: Iterable&lt;Any&gt;): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(vararg keys: Any, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;abstract fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt; batchWrite [jvm]open suspend fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int): BatchWriteResult batchWriteAsync [jvm]abstract fun batchWriteAsync(writeSet: BatchWriteSet, maxPageSize: Int): CompletableFuture&lt;BatchWriteResult&gt; logicalTable [jvm]abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]open suspend fun transactionLoad(keys: KeySet): ItemSetopen suspend fun transactionLoad(vararg keys: Any): ItemSetopen suspend fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionLoadAsync [jvm]abstract fun transactionLoadAsync(keys: KeySet): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(vararg keys: Any): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(keys: Iterable&lt;Any&gt;): CompletableFuture&lt;ItemSet&gt; transactionWrite [jvm]open suspend fun transactionWrite(writeSet: TransactionWriteSet) transactionWriteAsync [jvm]abstract fun transactionWriteAsync(writeSet: TransactionWriteSet): CompletableFuture&lt;Void&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicDb/music</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract val music: AsyncMusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/","title":"AsyncMusicTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/#asyncmusictable","title":"AsyncMusicTable","text":"<p>[jvm]\\ interface AsyncMusicTable : AsyncLogicalTable&lt;MusicItem&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/#properties","title":"Properties","text":"Name Summary albumInfo [jvm]abstract val albumInfo: AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract val albumInfoByArtist: AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract val albumInfoByGenre: AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract val albumTracks: AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract val albumTracksByTitle: AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; playlistInfo [jvm]abstract val playlistInfo: AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, MusicItem&gt; delete [jvm]open suspend fun delete(item: MusicItem, deleteExpression: Expression?): MusicItem? deleteAsync [jvm]open fun deleteAsync(item: MusicItem): CompletableFuture&lt;MusicItem?&gt;abstract fun deleteAsync(item: MusicItem, deleteExpression: Expression?): CompletableFuture&lt;MusicItem?&gt; deleteKey [jvm]open suspend fun deleteKey(key: MusicItem, deleteExpression: Expression?): MusicItem? deleteKeyAsync [jvm]open fun deleteKeyAsync(key: MusicItem): CompletableFuture&lt;MusicItem?&gt;abstract fun deleteKeyAsync(key: MusicItem, deleteExpression: Expression?): CompletableFuture&lt;MusicItem?&gt; inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt; load [jvm]open suspend fun load(key: MusicItem, consistentReads: Boolean): MusicItem?open suspend fun load(key: MusicItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Pair&lt;MusicItem?, ConsumedCapacity?&gt; loadAsync [jvm]open fun loadAsync(key: MusicItem): CompletableFuture&lt;MusicItem?&gt;abstract fun loadAsync(key: MusicItem, consistentReads: Boolean): CompletableFuture&lt;MusicItem?&gt;abstract fun loadAsync(key: MusicItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;MusicItem?, ConsumedCapacity?&gt;&gt; save [jvm]open suspend fun save(item: MusicItem, saveExpression: Expression?): Void saveAsync [jvm]open fun saveAsync(item: MusicItem): CompletableFuture&lt;Void&gt;abstract fun saveAsync(item: MusicItem, saveExpression: Expression?): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]open fun saveAsyncWithResult(item: MusicItem): CompletableFuture&lt;MusicItem&gt;abstract fun saveAsyncWithResult(item: MusicItem, saveExpression: Expression?): CompletableFuture&lt;MusicItem&gt; saveWithResult [jvm]open suspend fun saveWithResult(item: MusicItem, saveExpression: Expression?): MusicItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract val albumInfoByArtist: AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract val albumInfoByGenre: AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract val albumInfo: AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract val albumTracksByTitle: AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract val albumTracks: AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/AsyncMusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-async-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract val playlistInfo: AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/","title":"MusicDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/#musicdb","title":"MusicDb","text":"<p>[jvm]\\ interface MusicDb : LogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/#properties","title":"Properties","text":"Name Summary music [jvm]abstract val music: MusicTable"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicDb/music</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract val music: MusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ class MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/#constructors","title":"Constructors","text":"MusicItem [jvm]constructor()"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/#properties","title":"Properties","text":"Name Summary album_title [jvm]var album_title: String? artist_name [jvm]var artist_name: String? genre_name [jvm]var genre_name: String? label_name [jvm]var label_name: String? partition_key [jvm]var partition_key: String? playlist_name [jvm]var playlist_name: String? playlist_size [jvm]var playlist_size: Int? playlist_tracks [jvm]var playlist_tracks: List&lt;AlbumTrack.Key&gt;? playlist_version [jvm]var playlist_version: Long? release_date [jvm]var release_date: LocalDate? run_length [jvm]var run_length: Duration? sort_key [jvm]var sort_key: String? track_description [jvm]var track_description: String? track_title [jvm]var track_title: String? track_token [jvm]var track_token: String?"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/album_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ var album_title: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/artist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ var artist_name: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/genre_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ var genre_name: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/label_name/","title":"label_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/label_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/label_name/#label_name","title":"label_name","text":"<p>[jvm]\\ var label_name: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ var partition_key: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/playlist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ var playlist_name: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_size/","title":"playlist_size - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/playlist_size</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_size/#playlist_size","title":"playlist_size","text":"<p>[jvm]\\ var playlist_size: Int?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/playlist_tracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ var playlist_tracks: List&lt;AlbumTrack.Key&gt;?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/playlist_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ var playlist_version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/release_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ var release_date: LocalDate?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/run_length</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ var run_length: Duration?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ var sort_key: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_description/","title":"track_description - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/track_description</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_description/#track_description","title":"track_description","text":"<p>[jvm]\\ var track_description: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/track_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ var track_title: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ var track_token: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-companion/","title":"Companion - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/Companion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-companion/#properties","title":"Properties","text":"Name Summary TABLE_NAME [jvm]const val TABLE_NAME: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-companion/-t-a-b-l-e_-n-a-m-e/","title":"TABLE_NAME - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicItem/Companion/TABLE_NAME</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-item/-companion/-t-a-b-l-e_-n-a-m-e/#table_name","title":"TABLE_NAME","text":"<p>[jvm]\\ const val TABLE_NAME: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/","title":"MusicTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/#musictable","title":"MusicTable","text":"<p>[jvm]\\ interface MusicTable : LogicalTable&lt;MusicItem&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/#properties","title":"Properties","text":"Name Summary albumInfo [jvm]abstract val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumInfoByLabel [jvm]abstract val albumInfoByLabel: SecondaryIndex&lt;AlbumInfo.LabelIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; playlistInfo [jvm]abstract val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, MusicItem&gt; delete [jvm]open fun delete(item: MusicItem): MusicItem?abstract fun delete(item: MusicItem, deleteExpression: Expression?): MusicItem? deleteKey [jvm]open fun deleteKey(key: MusicItem): MusicItem?abstract fun deleteKey(key: MusicItem, deleteExpression: Expression?): MusicItem? inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: MusicItem): MusicItem?abstract fun load(key: MusicItem, consistentReads: Boolean): MusicItem?abstract fun load(key: MusicItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Pair&lt;MusicItem?, ConsumedCapacity?&gt; save [jvm]open fun save(item: MusicItem)abstract fun save(item: MusicItem, saveExpression: Expression?) saveWithResult [jvm]open fun saveWithResult(item: MusicItem): MusicItemabstract fun saveWithResult(item: MusicItem, saveExpression: Expression?): MusicItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-label/","title":"albumInfoByLabel - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumInfoByLabel</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info-by-label/#albuminfobylabel","title":"albumInfoByLabel","text":"<p>[jvm]\\ abstract val albumInfoByLabel: SecondaryIndex&lt;AlbumInfo.LabelIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/MusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ data class PlaylistInfo(val playlist_token: String, val playlist_name: String, val playlist_tracks: List&lt;AlbumTrack.Key&gt;, val playlist_version: Long = 1)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/#constructors","title":"Constructors","text":"PlaylistInfo [jvm]constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long = 1)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val playlist_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/#properties","title":"Properties","text":"Name Summary playlist_name [jvm]val playlist_name: String playlist_token [jvm]val playlist_token: String playlist_tracks [jvm]val playlist_tracks: List&lt;AlbumTrack.Key&gt; playlist_version [jvm]val playlist_version: Long = 1 sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/PlaylistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long = 1)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/playlist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ val playlist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/playlist_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/playlist_tracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ val playlist_tracks: List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/playlist_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ val playlist_version: Long = 1</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val playlist_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(playlist_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/#properties","title":"Properties","text":"Name Summary playlist_token [jvm]val playlist_token: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(playlist_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/Key/playlist_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary/PlaylistInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary/-playlist-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/#types","title":"Types","text":"Name Summary AlbumInfo [jvm]open class AlbumInfo AlbumTrack [jvm]open class AlbumTrack AsyncMusicDb [jvm]interface AsyncMusicDb : AsyncLogicalDb AsyncMusicTable [jvm]interface AsyncMusicTable : AsyncLogicalTable&lt;RI&gt; MusicDb [jvm]interface MusicDb : LogicalDb MusicItem [jvm]open class MusicItem MusicTable [jvm]interface MusicTable : LogicalTable&lt;RI&gt; PlaylistInfo [jvm]open class PlaylistInfo"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ open class AlbumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/#constructors","title":"Constructors","text":"AlbumInfo [jvm]constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/#types","title":"Types","text":"Name Summary ArtistIndexOffset [jvm]open class ArtistIndexOffset GenreIndexOffset [jvm]open class GenreIndexOffset Key [jvm]open class Key"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/#properties","title":"Properties","text":"Name Summary album_title [jvm]val album_title: String album_token [jvm]val album_token: String artist_name [jvm]val artist_name: String genre_name [jvm]val genre_name: String key [jvm]val key: AlbumInfo.Key release_date [jvm]val release_date: LocalDate sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-album-info/","title":"AlbumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/AlbumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-album-info/#albuminfo","title":"AlbumInfo","text":"<p>[jvm]\\ constructor(album_token: String, album_title: String, artist_name: String, release_date: LocalDate, genre_name: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/album_title/","title":"album_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/album_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/album_title/#album_title","title":"album_title","text":"<p>[jvm]\\ val album_title: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/artist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/genre_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/key/#key","title":"key","text":"<p>[jvm]\\ val key: AlbumInfo.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/release_date/","title":"release_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/release_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/release_date/#release_date","title":"release_date","text":"<p>[jvm]\\ val release_date: LocalDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ open class ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/#constructors","title":"Constructors","text":"ArtistIndexOffset [jvm]constructor(artist_name: String)constructor(artist_name: String, album_token: String)constructor(artist_name: String, @Nullablealbum_token: String, @Nullablesort_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]@Nullableval album_token: String artist_name [jvm]val artist_name: String sort_key [jvm]@Nullableval sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/-artist-index-offset/","title":"ArtistIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/ArtistIndexOffset/ArtistIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/-artist-index-offset/#artistindexoffset","title":"ArtistIndexOffset","text":"<p>[jvm]\\ constructor(artist_name: String)</p> <p>constructor(artist_name: String, album_token: String)</p> <p>constructor(artist_name: String, @Nullablealbum_token: String, @Nullablesort_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/ArtistIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/artist_name/","title":"artist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/ArtistIndexOffset/artist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/artist_name/#artist_name","title":"artist_name","text":"<p>[jvm]\\ val artist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/ArtistIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-artist-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ open class GenreIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/#constructors","title":"Constructors","text":"GenreIndexOffset [jvm]constructor(genre_name: String)constructor(genre_name: String, album_token: String)constructor(genre_name: String, album_token: String, sort_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]@Nullableval album_token: String genre_name [jvm]val genre_name: String sort_key [jvm]@Nullableval sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/-genre-index-offset/","title":"GenreIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/GenreIndexOffset/GenreIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/-genre-index-offset/#genreindexoffset","title":"GenreIndexOffset","text":"<p>[jvm]\\ constructor(genre_name: String)</p> <p>constructor(genre_name: String, album_token: String)</p> <p>constructor(genre_name: String, album_token: String, sort_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/GenreIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/genre_name/","title":"genre_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/GenreIndexOffset/genre_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/genre_name/#genre_name","title":"genre_name","text":"<p>[jvm]\\ val genre_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/GenreIndexOffset/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-genre-index-offset/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/Key/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ open class AlbumTrack</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/#constructors","title":"Constructors","text":"AlbumTrack [jvm]constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/#types","title":"Types","text":"Name Summary Key [jvm]open class Key TitleIndexOffset [jvm]open class TitleIndexOffset"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String key [jvm]val key: AlbumTrack.Key run_length [jvm]val run_length: Duration track_number [jvm]val track_number: Long track_title [jvm]val track_title: String track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-album-track/","title":"AlbumTrack - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/AlbumTrack</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-album-track/#albumtrack","title":"AlbumTrack","text":"<p>[jvm]\\ constructor(album_token: String, track_token: String, track_title: String, run_length: Duration)</p> <p>constructor(album_token: String, track_number: Long, track_title: String, run_length: Duration)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/key/#key","title":"key","text":"<p>[jvm]\\ val key: AlbumTrack.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/run_length/","title":"run_length - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/run_length</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/run_length/#run_length","title":"run_length","text":"<p>[jvm]\\ val run_length: Duration</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/track_number</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\ val track_number: Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/track_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(album_token: String, track_token: String)constructor(album_token: String, track_number: Long)constructor(album_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_number [jvm]val track_number: Long track_token [jvm]val track_token: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(album_token: String, track_token: String)</p> <p>constructor(album_token: String, track_number: Long)</p> <p>constructor(album_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/Key/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/track_number/","title":"track_number - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/Key/track_number</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/track_number/#track_number","title":"track_number","text":"<p>[jvm]\\ val track_number: Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/Key/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-key/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\ val track_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ open class TitleIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/#constructors","title":"Constructors","text":"TitleIndexOffset [jvm]constructor(album_token: String, track_title: String)constructor(album_token: String, track_title: String, track_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/#properties","title":"Properties","text":"Name Summary album_token [jvm]val album_token: String track_title [jvm]val track_title: String track_token [jvm]@Nullableval track_token: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/-title-index-offset/","title":"TitleIndexOffset - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/TitleIndexOffset/TitleIndexOffset</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/-title-index-offset/#titleindexoffset","title":"TitleIndexOffset","text":"<p>[jvm]\\ constructor(album_token: String, track_title: String)</p> <p>constructor(album_token: String, track_title: String, track_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/album_token/","title":"album_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/TitleIndexOffset/album_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/album_token/#album_token","title":"album_token","text":"<p>[jvm]\\ val album_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/track_title/","title":"track_title - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/TitleIndexOffset/track_title</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/track_title/#track_title","title":"track_title","text":"<p>[jvm]\\ val track_title: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/track_token/","title":"track_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AlbumTrack/TitleIndexOffset/track_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-album-track/-title-index-offset/track_token/#track_token","title":"track_token","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>val track_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/","title":"AsyncMusicDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/#asyncmusicdb","title":"AsyncMusicDb","text":"<p>[jvm]\\ interface AsyncMusicDb : AsyncLogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/#properties","title":"Properties","text":"Name Summary Companion [jvm]val Companion: AsyncLogicalDb.Companion"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity, $completion: Continuation&lt;in ItemSet&gt;): Any batchLoadAsync [jvm]abstract fun batchLoadAsync(p: KeySet, p1: Boolean, p2: Int, p3: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt; batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int, $completion: Continuation&lt;in BatchWriteResult&gt;): Any batchWriteAsync [jvm]abstract fun batchWriteAsync(p: BatchWriteSet, p1: Int): CompletableFuture&lt;BatchWriteResult&gt; create [jvm]open fun &lt;DB : AsyncLogicalDb?&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient): DB logicalTable [jvm]abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;?, RI&gt; logicalTable(p: String, p1: KClass&lt;T&gt;): T music [jvm]abstract fun music(): AsyncMusicTable transactionLoad [jvm]open fun transactionLoad(keys: KeySet, $completion: Continuation&lt;in ItemSet&gt;): Any transactionLoadAsync [jvm]abstract fun transactionLoadAsync(p: KeySet): CompletableFuture&lt;ItemSet&gt; transactionWrite [jvm]open fun transactionWrite(writeSet: TransactionWriteSet, $completion: Continuation&lt;in Unit&gt;): Any transactionWriteAsync [jvm]abstract fun transactionWriteAsync(p: TransactionWriteSet): CompletableFuture&lt;Void&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicDb/music</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract fun music(): AsyncMusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/","title":"AsyncMusicTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/#asyncmusictable","title":"AsyncMusicTable","text":"<p>[jvm]\\ interface AsyncMusicTable : AsyncLogicalTable&lt;RI&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/#functions","title":"Functions","text":"Name Summary albumInfo [jvm]abstract fun albumInfo(): AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract fun albumInfoByArtist(): AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract fun albumInfoByGenre(): AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract fun albumTracks(): AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract fun albumTracksByTitle(): AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; codec [jvm]abstract fun &lt;T&gt; codec(p: KClass&lt;T&gt;): Codec&lt;T, RI&gt; delete [jvm]open fun delete(item: I, deleteExpression: Expression, $completion: Continuation&lt;in I&gt;): Any deleteAsync [jvm]abstract fun deleteAsync(p: I, p1: Expression): CompletableFuture&lt;I&gt; deleteKey [jvm]open fun deleteKey(key: K, deleteExpression: Expression, $completion: Continuation&lt;in I&gt;): Any deleteKeyAsync [jvm]abstract fun deleteKeyAsync(p: K, p1: Expression): CompletableFuture&lt;I&gt; inlineView [jvm]abstract fun &lt;K, I&gt; inlineView(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt; load [jvm]open fun load(key: K, consistentReads: Boolean, $completion: Continuation&lt;in I&gt;): Any loadAsync [jvm]abstract fun loadAsync(p: K, p1: Boolean): CompletableFuture&lt;I&gt;abstract fun loadAsync(p: K, p1: Boolean, p2: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;I, ConsumedCapacity&gt;&gt; playlistInfo [jvm]abstract fun playlistInfo(): AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; save [jvm]open fun save(item: I, saveExpression: Expression, $completion: Continuation&lt;in Void&gt;): Any saveAsync [jvm]abstract fun saveAsync(p: I, p1: Expression): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]abstract fun saveAsyncWithResult(p: I, p1: Expression): CompletableFuture&lt;I&gt; saveWithResult [jvm]open fun saveWithResult(item: I, saveExpression: Expression, $completion: Continuation&lt;in I&gt;): Any secondaryIndex [jvm]abstract fun &lt;K, I&gt; secondaryIndex(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract fun albumInfoByArtist(): AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract fun albumInfoByGenre(): AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract fun albumInfo(): AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract fun albumTracksByTitle(): AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract fun albumTracks(): AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/AsyncMusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-async-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract fun playlistInfo(): AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/","title":"MusicDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/#musicdb","title":"MusicDb","text":"<p>[jvm]\\ interface MusicDb : LogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/#properties","title":"Properties","text":"Name Summary Companion [jvm]val Companion: LogicalDb.Companion"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]abstract fun batchLoad(p: KeySet, p1: Boolean, p2: Int, p3: ReturnConsumedCapacity): ItemSet batchWrite [jvm]abstract fun batchWrite(p: BatchWriteSet, p1: Int): BatchWriteResult create [jvm]open fun &lt;DB : LogicalDb?&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient): DB logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;?, RI&gt; logicalTable(p: String, p1: KClass&lt;T&gt;): T music [jvm]abstract fun music(): MusicTable transactionLoad [jvm]abstract fun transactionLoad(p: KeySet): ItemSet transactionWrite [jvm]abstract fun transactionWrite(p: TransactionWriteSet)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/music/","title":"music - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicDb/music</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-db/music/#music","title":"music","text":"<p>[jvm]\\ abstract fun music(): MusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ open class MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/#constructors","title":"Constructors","text":"MusicItem [jvm]constructor()"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/#types","title":"Types","text":"Name Summary LocalDateTypeConverter [jvm]open class LocalDateTypeConverter : AttributeConverter&lt;T&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/#properties","title":"Properties","text":"Name Summary TABLE_NAME [jvm]open var TABLE_NAME: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/#functions","title":"Functions","text":"Name Summary getAlbumTitle [jvm]open fun getAlbumTitle(): String getArtistName [jvm]open fun getArtistName(): String getGenreName [jvm]open fun getGenreName(): String getPartitionKey [jvm]open fun getPartitionKey(): String getPlaylistName [jvm]open fun getPlaylistName(): String getPlaylistSize [jvm]open fun getPlaylistSize(): Integer getPlaylistTracks [jvm]open fun getPlaylistTracks(): List&lt;AlbumTrack.Key&gt; getPlaylistVersion [jvm]open fun getPlaylistVersion(): Long getReleaseDate [jvm]open fun getReleaseDate(): LocalDate getRunLength [jvm]open fun getRunLength(): Duration getSortKey [jvm]open fun getSortKey(): String getTrackTitle [jvm]open fun getTrackTitle(): String getTrackToken [jvm]open fun getTrackToken(): String setAlbumTitle [jvm]open fun setAlbumTitle(album_title: String) setArtistName [jvm]open fun setArtistName(artist_name: String) setGenreName [jvm]open fun setGenreName(genre_name: String) setPartitionKey [jvm]open fun setPartitionKey(partition_key: String) setPlaylistName [jvm]open fun setPlaylistName(playlist_name: String) setPlaylistSize [jvm]open fun setPlaylistSize(playlist_size: Integer) setPlaylistTracks [jvm]open fun setPlaylistTracks(playlist_tracks: List&lt;AlbumTrack.Key&gt;) setPlaylistVersion [jvm]open fun setPlaylistVersion(playlist_version: Long) setReleaseDate [jvm]open fun setReleaseDate(release_date: LocalDate) setRunLength [jvm]open fun setRunLength(run_length: Duration) setSortKey [jvm]open fun setSortKey(sort_key: String) setTrackTitle [jvm]open fun setTrackTitle(track_title: String) setTrackToken [jvm]open fun setTrackToken(track_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-music-item/","title":"MusicItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/MusicItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-music-item/#musicitem","title":"MusicItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-t-a-b-l-e_-n-a-m-e/","title":"TABLE_NAME - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/TABLE_NAME</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-t-a-b-l-e_-n-a-m-e/#table_name","title":"TABLE_NAME","text":"<p>[jvm]\\ open var TABLE_NAME: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-album-title/","title":"getAlbumTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getAlbumTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-album-title/#getalbumtitle","title":"getAlbumTitle","text":"<p>[jvm]\\ open fun getAlbumTitle(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-artist-name/","title":"getArtistName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getArtistName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-artist-name/#getartistname","title":"getArtistName","text":"<p>[jvm]\\ open fun getArtistName(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-genre-name/","title":"getGenreName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getGenreName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-genre-name/#getgenrename","title":"getGenreName","text":"<p>[jvm]\\ open fun getGenreName(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-partition-key/","title":"getPartitionKey - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getPartitionKey</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-partition-key/#getpartitionkey","title":"getPartitionKey","text":"<p>[jvm]\\ open fun getPartitionKey(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-name/","title":"getPlaylistName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getPlaylistName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-name/#getplaylistname","title":"getPlaylistName","text":"<p>[jvm]\\ open fun getPlaylistName(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-size/","title":"getPlaylistSize - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getPlaylistSize</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-size/#getplaylistsize","title":"getPlaylistSize","text":"<p>[jvm]\\ open fun getPlaylistSize(): Integer</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-tracks/","title":"getPlaylistTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getPlaylistTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-tracks/#getplaylisttracks","title":"getPlaylistTracks","text":"<p>[jvm]\\ open fun getPlaylistTracks(): List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-version/","title":"getPlaylistVersion - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getPlaylistVersion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-playlist-version/#getplaylistversion","title":"getPlaylistVersion","text":"<p>[jvm]\\ open fun getPlaylistVersion(): Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-release-date/","title":"getReleaseDate - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getReleaseDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-release-date/#getreleasedate","title":"getReleaseDate","text":"<p>[jvm]\\ open fun getReleaseDate(): LocalDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-run-length/","title":"getRunLength - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getRunLength</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-run-length/#getrunlength","title":"getRunLength","text":"<p>[jvm]\\ open fun getRunLength(): Duration</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-sort-key/","title":"getSortKey - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getSortKey</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-sort-key/#getsortkey","title":"getSortKey","text":"<p>[jvm]\\ open fun getSortKey(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-track-title/","title":"getTrackTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getTrackTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-track-title/#gettracktitle","title":"getTrackTitle","text":"<p>[jvm]\\ open fun getTrackTitle(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-track-token/","title":"getTrackToken - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/getTrackToken</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/get-track-token/#gettracktoken","title":"getTrackToken","text":"<p>[jvm]\\ open fun getTrackToken(): String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-album-title/","title":"setAlbumTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setAlbumTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-album-title/#setalbumtitle","title":"setAlbumTitle","text":"<p>[jvm]\\ open fun setAlbumTitle(album_title: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-artist-name/","title":"setArtistName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setArtistName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-artist-name/#setartistname","title":"setArtistName","text":"<p>[jvm]\\ open fun setArtistName(artist_name: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-genre-name/","title":"setGenreName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setGenreName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-genre-name/#setgenrename","title":"setGenreName","text":"<p>[jvm]\\ open fun setGenreName(genre_name: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-partition-key/","title":"setPartitionKey - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setPartitionKey</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-partition-key/#setpartitionkey","title":"setPartitionKey","text":"<p>[jvm]\\ open fun setPartitionKey(partition_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-name/","title":"setPlaylistName - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setPlaylistName</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-name/#setplaylistname","title":"setPlaylistName","text":"<p>[jvm]\\ open fun setPlaylistName(playlist_name: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-size/","title":"setPlaylistSize - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setPlaylistSize</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-size/#setplaylistsize","title":"setPlaylistSize","text":"<p>[jvm]\\ open fun setPlaylistSize(playlist_size: Integer)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-tracks/","title":"setPlaylistTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setPlaylistTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-tracks/#setplaylisttracks","title":"setPlaylistTracks","text":"<p>[jvm]\\ open fun setPlaylistTracks(playlist_tracks: List&lt;AlbumTrack.Key&gt;)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-version/","title":"setPlaylistVersion - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setPlaylistVersion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-playlist-version/#setplaylistversion","title":"setPlaylistVersion","text":"<p>[jvm]\\ open fun setPlaylistVersion(playlist_version: Long)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-release-date/","title":"setReleaseDate - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setReleaseDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-release-date/#setreleasedate","title":"setReleaseDate","text":"<p>[jvm]\\ open fun setReleaseDate(release_date: LocalDate)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-run-length/","title":"setRunLength - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setRunLength</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-run-length/#setrunlength","title":"setRunLength","text":"<p>[jvm]\\ open fun setRunLength(run_length: Duration)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-sort-key/","title":"setSortKey - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setSortKey</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-sort-key/#setsortkey","title":"setSortKey","text":"<p>[jvm]\\ open fun setSortKey(sort_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-track-title/","title":"setTrackTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setTrackTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-track-title/#settracktitle","title":"setTrackTitle","text":"<p>[jvm]\\ open fun setTrackTitle(track_title: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-track-token/","title":"setTrackToken - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/setTrackToken</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/set-track-token/#settracktoken","title":"setTrackToken","text":"<p>[jvm]\\ open fun setTrackToken(track_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/","title":"LocalDateTypeConverter - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/#localdatetypeconverter","title":"LocalDateTypeConverter","text":"<p>[jvm]\\ open class LocalDateTypeConverter : AttributeConverter&lt;T&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/#constructors","title":"Constructors","text":"LocalDateTypeConverter [jvm]constructor()"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/#functions","title":"Functions","text":"Name Summary attributeValueType [jvm]open fun attributeValueType(): AttributeValueType transformFrom [jvm]open fun transformFrom(input: LocalDate): AttributeValue transformTo [jvm]open fun transformTo(input: AttributeValue): LocalDate type [jvm]open fun type(): EnhancedType&lt;LocalDate&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/-local-date-type-converter/","title":"LocalDateTypeConverter - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter/LocalDateTypeConverter</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/-local-date-type-converter/#localdatetypeconverter","title":"LocalDateTypeConverter","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/attribute-value-type/","title":"attributeValueType - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter/attributeValueType</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/attribute-value-type/#attributevaluetype","title":"attributeValueType","text":"<p>[jvm]\\ open fun attributeValueType(): AttributeValueType</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/transform-from/","title":"transformFrom - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter/transformFrom</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/transform-from/#transformfrom","title":"transformFrom","text":"<p>[jvm]\\ open fun transformFrom(input: LocalDate): AttributeValue</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/transform-to/","title":"transformTo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter/transformTo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/transform-to/#transformto","title":"transformTo","text":"<p>[jvm]\\ open fun transformTo(input: AttributeValue): LocalDate</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/type/","title":"type - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicItem/LocalDateTypeConverter/type</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-item/-local-date-type-converter/type/#type","title":"type","text":"<p>[jvm]\\ open fun type(): EnhancedType&lt;LocalDate&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/","title":"MusicTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/#musictable","title":"MusicTable","text":"<p>[jvm]\\ interface MusicTable : LogicalTable&lt;RI&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/#functions","title":"Functions","text":"Name Summary albumInfo [jvm]abstract fun albumInfo(): InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfoByArtist [jvm]abstract fun albumInfoByArtist(): SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByGenre [jvm]abstract fun albumInfoByGenre(): SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumTracks [jvm]abstract fun albumTracks(): InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracksByTitle [jvm]abstract fun albumTracksByTitle(): SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; codec [jvm]abstract fun &lt;T&gt; codec(p: KClass&lt;T&gt;): Codec&lt;T, RI&gt; delete [jvm]abstract fun delete(p: I, p1: Expression): I deleteKey [jvm]abstract fun deleteKey(p: K, p1: Expression): I inlineView [jvm]abstract fun &lt;K, I&gt; inlineView(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]abstract fun load(p: K, p1: Boolean): Iabstract fun load(p: K, p1: Boolean, p2: ReturnConsumedCapacity): Pair&lt;I, ConsumedCapacity&gt; playlistInfo [jvm]abstract fun playlistInfo(): InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; save [jvm]abstract fun save(p: I, p1: Expression) saveWithResult [jvm]abstract fun saveWithResult(p: I, p1: Expression): I secondaryIndex [jvm]abstract fun &lt;K, I&gt; secondaryIndex(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info-by-artist/","title":"albumInfoByArtist - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/albumInfoByArtist</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info-by-artist/#albuminfobyartist","title":"albumInfoByArtist","text":"<p>[jvm]\\ abstract fun albumInfoByArtist(): SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info-by-genre/","title":"albumInfoByGenre - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/albumInfoByGenre</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info-by-genre/#albuminfobygenre","title":"albumInfoByGenre","text":"<p>[jvm]\\ abstract fun albumInfoByGenre(): SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info/","title":"albumInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/albumInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-info/#albuminfo","title":"albumInfo","text":"<p>[jvm]\\ abstract fun albumInfo(): InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-tracks-by-title/","title":"albumTracksByTitle - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/albumTracksByTitle</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-tracks-by-title/#albumtracksbytitle","title":"albumTracksByTitle","text":"<p>[jvm]\\ abstract fun albumTracksByTitle(): SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-tracks/","title":"albumTracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/albumTracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/album-tracks/#albumtracks","title":"albumTracks","text":"<p>[jvm]\\ abstract fun albumTracks(): InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/playlist-info/","title":"playlistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/MusicTable/playlistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-music-table/playlist-info/#playlistinfo","title":"playlistInfo","text":"<p>[jvm]\\ abstract fun playlistInfo(): InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ open class PlaylistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/#constructors","title":"Constructors","text":"PlaylistInfo [jvm]constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;)constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/#types","title":"Types","text":"Name Summary Key [jvm]open class Key"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/#properties","title":"Properties","text":"Name Summary playlist_name [jvm]val playlist_name: String playlist_token [jvm]val playlist_token: String playlist_tracks [jvm]val playlist_tracks: List&lt;AlbumTrack.Key&gt; playlist_version [jvm]val playlist_version: Long sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-playlist-info/","title":"PlaylistInfo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/PlaylistInfo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-playlist-info/#playlistinfo","title":"PlaylistInfo","text":"<p>[jvm]\\ constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;)</p> <p>constructor(playlist_token: String, playlist_name: String, playlist_tracks: List&lt;AlbumTrack.Key&gt;, playlist_version: Long)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_name/","title":"playlist_name - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/playlist_name</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_name/#playlist_name","title":"playlist_name","text":"<p>[jvm]\\ val playlist_name: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/playlist_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_tracks/","title":"playlist_tracks - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/playlist_tracks</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_tracks/#playlist_tracks","title":"playlist_tracks","text":"<p>[jvm]\\ val playlist_tracks: List&lt;AlbumTrack.Key&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_version/","title":"playlist_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/playlist_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/playlist_version/#playlist_version","title":"playlist_version","text":"<p>[jvm]\\ val playlist_version: Long</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(playlist_token: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/#properties","title":"Properties","text":"Name Summary playlist_token [jvm]val playlist_token: String sort_key [jvm]val sort_key: String = \"\""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(playlist_token: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/playlist_token/","title":"playlist_token - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/Key/playlist_token</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/playlist_token/#playlist_token","title":"playlist_token","text":"<p>[jvm]\\ val playlist_token: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.java/PlaylistInfo/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.java/-playlist-info/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String = \"\"</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/","title":"Package-level declarations - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/#types","title":"Types","text":"Name Summary AsyncVersionedAttributeDb [jvm]interface AsyncVersionedAttributeDb : AsyncLogicalDb AsyncVersionedAttributeTable [jvm]interface AsyncVersionedAttributeTable : AsyncLogicalTable&lt;VersionedAttributeItem&gt; ParallelVersionedAttribute [jvm]data class ParallelVersionedAttribute(val partition_key: String, val description: String, val created_at_instant: Instant? = null, val updated_at_instant: Instant? = null, val one_version: Long? = null, val one_created_at: Instant? = null, val one_updated_at: Instant? = null, val two_version: Long? = null, val two_created_at: Instant? = null, val two_updated_at: Instant? = null, val three_version: Long? = null, val three_created_at: Instant? = null, val three_updated_at: Instant? = null, val four_version: Long? = null, val four_created_at: Instant? = null, val four_updated_at: Instant? = null, val version: Long? = null)Stores the current version and time stamps as it writes the next version to verify parallel write behavior. VersionedAttribute [jvm]data class VersionedAttribute(val partition_key: String, val description: String, val created_at_instant: Instant? = null, val created_at_date: Date? = null, val updated_at_instant: Instant? = null, val updated_at_date: Date? = null, val updated_at_dynamo: Instant? = null, val version: Long? = null) VersionedAttributeDb [jvm]interface VersionedAttributeDb : LogicalDb VersionedAttributeItem [jvm]class VersionedAttributeItem VersionedAttributeTable [jvm]interface VersionedAttributeTable : LogicalTable&lt;VersionedAttributeItem&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/","title":"AsyncVersionedAttributeDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/AsyncVersionedAttributeDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/#asyncversionedattributedb","title":"AsyncVersionedAttributeDb","text":"<p>[jvm]\\ interface AsyncVersionedAttributeDb : AsyncLogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/#properties","title":"Properties","text":"Name Summary versionedAttributes [jvm]abstract val versionedAttributes: AsyncVersionedAttributeTable"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open suspend fun batchLoad(vararg keys: Any, consistentReads: Boolean, maxPageSize: Int): ItemSetopen suspend fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, maxPageSize: Int): ItemSetopen suspend fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSet batchLoadAsync [jvm]open fun batchLoadAsync(keys: Iterable&lt;Any&gt;): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(vararg keys: Any, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt;abstract fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): Publisher&lt;ItemSet&gt; batchWrite [jvm]open suspend fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int): BatchWriteResult batchWriteAsync [jvm]abstract fun batchWriteAsync(writeSet: BatchWriteSet, maxPageSize: Int): CompletableFuture&lt;BatchWriteResult&gt; logicalTable [jvm]abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]open suspend fun transactionLoad(keys: KeySet): ItemSetopen suspend fun transactionLoad(vararg keys: Any): ItemSetopen suspend fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionLoadAsync [jvm]abstract fun transactionLoadAsync(keys: KeySet): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(vararg keys: Any): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(keys: Iterable&lt;Any&gt;): CompletableFuture&lt;ItemSet&gt; transactionWrite [jvm]open suspend fun transactionWrite(writeSet: TransactionWriteSet) transactionWriteAsync [jvm]abstract fun transactionWriteAsync(writeSet: TransactionWriteSet): CompletableFuture&lt;Void&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/versioned-attributes/","title":"versionedAttributes - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/AsyncVersionedAttributeDb/versionedAttributes</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-db/versioned-attributes/#versionedattributes","title":"versionedAttributes","text":"<p>[jvm]\\ abstract val versionedAttributes: AsyncVersionedAttributeTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/","title":"AsyncVersionedAttributeTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/AsyncVersionedAttributeTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/#asyncversionedattributetable","title":"AsyncVersionedAttributeTable","text":"<p>[jvm]\\ interface AsyncVersionedAttributeTable : AsyncLogicalTable&lt;VersionedAttributeItem&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/#properties","title":"Properties","text":"Name Summary attributes [jvm]abstract val attributes: AsyncInlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt; parallelAttributes [jvm]abstract val parallelAttributes: AsyncInlineView&lt;ParallelVersionedAttribute.Key, ParallelVersionedAttribute&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, VersionedAttributeItem&gt; delete [jvm]open suspend fun delete(item: VersionedAttributeItem, deleteExpression: Expression?): VersionedAttributeItem? deleteAsync [jvm]open fun deleteAsync(item: VersionedAttributeItem): CompletableFuture&lt;VersionedAttributeItem?&gt;abstract fun deleteAsync(item: VersionedAttributeItem, deleteExpression: Expression?): CompletableFuture&lt;VersionedAttributeItem?&gt; deleteKey [jvm]open suspend fun deleteKey(key: VersionedAttributeItem, deleteExpression: Expression?): VersionedAttributeItem? deleteKeyAsync [jvm]open fun deleteKeyAsync(key: VersionedAttributeItem): CompletableFuture&lt;VersionedAttributeItem?&gt;abstract fun deleteKeyAsync(key: VersionedAttributeItem, deleteExpression: Expression?): CompletableFuture&lt;VersionedAttributeItem?&gt; inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt; load [jvm]open suspend fun load(key: VersionedAttributeItem, consistentReads: Boolean): VersionedAttributeItem?open suspend fun load(key: VersionedAttributeItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Pair&lt;VersionedAttributeItem?, ConsumedCapacity?&gt; loadAsync [jvm]open fun loadAsync(key: VersionedAttributeItem): CompletableFuture&lt;VersionedAttributeItem?&gt;abstract fun loadAsync(key: VersionedAttributeItem, consistentReads: Boolean): CompletableFuture&lt;VersionedAttributeItem?&gt;abstract fun loadAsync(key: VersionedAttributeItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;VersionedAttributeItem?, ConsumedCapacity?&gt;&gt; save [jvm]open suspend fun save(item: VersionedAttributeItem, saveExpression: Expression?): Void saveAsync [jvm]open fun saveAsync(item: VersionedAttributeItem): CompletableFuture&lt;Void&gt;abstract fun saveAsync(item: VersionedAttributeItem, saveExpression: Expression?): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]open fun saveAsyncWithResult(item: VersionedAttributeItem): CompletableFuture&lt;VersionedAttributeItem&gt;abstract fun saveAsyncWithResult(item: VersionedAttributeItem, saveExpression: Expression?): CompletableFuture&lt;VersionedAttributeItem&gt; saveWithResult [jvm]open suspend fun saveWithResult(item: VersionedAttributeItem, saveExpression: Expression?): VersionedAttributeItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/attributes/","title":"attributes - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/AsyncVersionedAttributeTable/attributes</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/attributes/#attributes","title":"attributes","text":"<p>[jvm]\\ abstract val attributes: AsyncInlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/parallel-attributes/","title":"parallelAttributes - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/AsyncVersionedAttributeTable/parallelAttributes</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-async-versioned-attribute-table/parallel-attributes/#parallelattributes","title":"parallelAttributes","text":"<p>[jvm]\\ abstract val parallelAttributes: AsyncInlineView&lt;ParallelVersionedAttribute.Key, ParallelVersionedAttribute&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/","title":"ParallelVersionedAttribute - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/#parallelversionedattribute","title":"ParallelVersionedAttribute","text":"<p>[jvm]\\ data class ParallelVersionedAttribute(val partition_key: String, val description: String, val created_at_instant: Instant? = null, val updated_at_instant: Instant? = null, val one_version: Long? = null, val one_created_at: Instant? = null, val one_updated_at: Instant? = null, val two_version: Long? = null, val two_created_at: Instant? = null, val two_updated_at: Instant? = null, val three_version: Long? = null, val three_created_at: Instant? = null, val three_updated_at: Instant? = null, val four_version: Long? = null, val four_created_at: Instant? = null, val four_updated_at: Instant? = null, val version: Long? = null)</p> <p>Stores the current version and time stamps as it writes the next version to verify parallel write behavior.</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/#constructors","title":"Constructors","text":"ParallelVersionedAttribute [jvm]constructor(partition_key: String, description: String, created_at_instant: Instant? = null, updated_at_instant: Instant? = null, one_version: Long? = null, one_created_at: Instant? = null, one_updated_at: Instant? = null, two_version: Long? = null, two_created_at: Instant? = null, two_updated_at: Instant? = null, three_version: Long? = null, three_created_at: Instant? = null, three_updated_at: Instant? = null, four_version: Long? = null, four_created_at: Instant? = null, four_updated_at: Instant? = null, version: Long? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val partition_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/#properties","title":"Properties","text":"Name Summary created_at_instant [jvm]val created_at_instant: Instant? = null description [jvm]val description: String four_created_at [jvm]val four_created_at: Instant? = null four_updated_at [jvm]val four_updated_at: Instant? = null four_version [jvm]val four_version: Long? = null key [jvm]@Transientval key: ParallelVersionedAttribute.Key one_created_at [jvm]val one_created_at: Instant? = null one_updated_at [jvm]val one_updated_at: Instant? = null one_version [jvm]val one_version: Long? = null partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String three_created_at [jvm]val three_created_at: Instant? = null three_updated_at [jvm]val three_updated_at: Instant? = null three_version [jvm]val three_version: Long? = null two_created_at [jvm]val two_created_at: Instant? = null two_updated_at [jvm]val two_updated_at: Instant? = null two_version [jvm]val two_version: Long? = null updated_at_instant [jvm]val updated_at_instant: Instant? = null version [jvm]val version: Long? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-parallel-versioned-attribute/","title":"ParallelVersionedAttribute - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/ParallelVersionedAttribute</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-parallel-versioned-attribute/#parallelversionedattribute","title":"ParallelVersionedAttribute","text":"<p>[jvm]\\ constructor(partition_key: String, description: String, created_at_instant: Instant? = null, updated_at_instant: Instant? = null, one_version: Long? = null, one_created_at: Instant? = null, one_updated_at: Instant? = null, two_version: Long? = null, two_created_at: Instant? = null, two_updated_at: Instant? = null, three_version: Long? = null, three_created_at: Instant? = null, three_updated_at: Instant? = null, four_version: Long? = null, four_created_at: Instant? = null, four_updated_at: Instant? = null, version: Long? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/created_at_instant/","title":"created_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/created_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/created_at_instant/#created_at_instant","title":"created_at_instant","text":"<p>[jvm]\\ val created_at_instant: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/description/","title":"description - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/description</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/description/#description","title":"description","text":"<p>[jvm]\\ val description: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_created_at/","title":"four_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/four_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_created_at/#four_created_at","title":"four_created_at","text":"<p>[jvm]\\ val four_created_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_updated_at/","title":"four_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/four_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_updated_at/#four_updated_at","title":"four_updated_at","text":"<p>[jvm]\\ val four_updated_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_version/","title":"four_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/four_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/four_version/#four_version","title":"four_version","text":"<p>[jvm]\\ val four_version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: ParallelVersionedAttribute.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_created_at/","title":"one_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/one_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_created_at/#one_created_at","title":"one_created_at","text":"<p>[jvm]\\ val one_created_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_updated_at/","title":"one_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/one_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_updated_at/#one_updated_at","title":"one_updated_at","text":"<p>[jvm]\\ val one_updated_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_version/","title":"one_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/one_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/one_version/#one_version","title":"one_version","text":"<p>[jvm]\\ val one_version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_created_at/","title":"three_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/three_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_created_at/#three_created_at","title":"three_created_at","text":"<p>[jvm]\\ val three_created_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_updated_at/","title":"three_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/three_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_updated_at/#three_updated_at","title":"three_updated_at","text":"<p>[jvm]\\ val three_updated_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_version/","title":"three_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/three_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/three_version/#three_version","title":"three_version","text":"<p>[jvm]\\ val three_version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_created_at/","title":"two_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/two_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_created_at/#two_created_at","title":"two_created_at","text":"<p>[jvm]\\ val two_created_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_updated_at/","title":"two_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/two_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_updated_at/#two_updated_at","title":"two_updated_at","text":"<p>[jvm]\\ val two_updated_at: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_version/","title":"two_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/two_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/two_version/#two_version","title":"two_version","text":"<p>[jvm]\\ val two_version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/updated_at_instant/","title":"updated_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/updated_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/updated_at_instant/#updated_at_instant","title":"updated_at_instant","text":"<p>[jvm]\\ val updated_at_instant: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/version/","title":"version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/version/#version","title":"version","text":"<p>[jvm]\\ val version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val partition_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(partition_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/#properties","title":"Properties","text":"Name Summary partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(partition_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/Key/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/ParallelVersionedAttribute/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-parallel-versioned-attribute/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/","title":"VersionedAttribute - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/#versionedattribute","title":"VersionedAttribute","text":"<p>[jvm]\\ data class VersionedAttribute(val partition_key: String, val description: String, val created_at_instant: Instant? = null, val created_at_date: Date? = null, val updated_at_instant: Instant? = null, val updated_at_date: Date? = null, val updated_at_dynamo: Instant? = null, val version: Long? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/#constructors","title":"Constructors","text":"VersionedAttribute [jvm]constructor(partition_key: String, description: String, created_at_instant: Instant? = null, created_at_date: Date? = null, updated_at_instant: Instant? = null, updated_at_date: Date? = null, updated_at_dynamo: Instant? = null, version: Long? = null)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val partition_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/#properties","title":"Properties","text":"Name Summary created_at_date [jvm]val created_at_date: Date? = null created_at_instant [jvm]val created_at_instant: Instant? = null description [jvm]val description: String key [jvm]@Transientval key: VersionedAttribute.Key partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String updated_at_date [jvm]val updated_at_date: Date? = null updated_at_dynamo [jvm]val updated_at_dynamo: Instant? = null updated_at_instant [jvm]val updated_at_instant: Instant? = null version [jvm]val version: Long? = null"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-versioned-attribute/","title":"VersionedAttribute - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/VersionedAttribute</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-versioned-attribute/#versionedattribute","title":"VersionedAttribute","text":"<p>[jvm]\\ constructor(partition_key: String, description: String, created_at_instant: Instant? = null, created_at_date: Date? = null, updated_at_instant: Instant? = null, updated_at_date: Date? = null, updated_at_dynamo: Instant? = null, version: Long? = null)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/created_at_date/","title":"created_at_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/created_at_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/created_at_date/#created_at_date","title":"created_at_date","text":"<p>[jvm]\\ val created_at_date: Date? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/created_at_instant/","title":"created_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/created_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/created_at_instant/#created_at_instant","title":"created_at_instant","text":"<p>[jvm]\\ val created_at_instant: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/description/","title":"description - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/description</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/description/#description","title":"description","text":"<p>[jvm]\\ val description: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/key/","title":"key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: VersionedAttribute.Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_date/","title":"updated_at_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/updated_at_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_date/#updated_at_date","title":"updated_at_date","text":"<p>[jvm]\\ val updated_at_date: Date? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_dynamo/","title":"updated_at_dynamo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/updated_at_dynamo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_dynamo/#updated_at_dynamo","title":"updated_at_dynamo","text":"<p>[jvm]\\ val updated_at_dynamo: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_instant/","title":"updated_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/updated_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/updated_at_instant/#updated_at_instant","title":"updated_at_instant","text":"<p>[jvm]\\ val updated_at_instant: Instant? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/version/","title":"version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/version/#version","title":"version","text":"<p>[jvm]\\ val version: Long? = null</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val partition_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(partition_key: String)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/#properties","title":"Properties","text":"Name Summary partition_key [jvm]val partition_key: String sort_key [jvm]val sort_key: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/-key/","title":"Key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/Key/Key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(partition_key: String)</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/Key/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ val partition_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttribute/Key/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute/-key/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ val sort_key: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/","title":"VersionedAttributeDb - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/#versionedattributedb","title":"VersionedAttributeDb","text":"<p>[jvm]\\ interface VersionedAttributeDb : LogicalDb</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/#properties","title":"Properties","text":"Name Summary versionedAttributes [jvm]abstract val versionedAttributes: VersionedAttributeTable"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/versioned-attributes/","title":"versionedAttributes - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeDb/versionedAttributes</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-db/versioned-attributes/#versionedattributes","title":"versionedAttributes","text":"<p>[jvm]\\ abstract val versionedAttributes: VersionedAttributeTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/","title":"VersionedAttributeItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/#versionedattributeitem","title":"VersionedAttributeItem","text":"<p>[jvm]\\ class VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/#constructors","title":"Constructors","text":"VersionedAttributeItem [jvm]constructor()"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/#properties","title":"Properties","text":"Name Summary created_at_date [jvm]var created_at_date: Date? created_at_instant [jvm]var created_at_instant: Instant? description [jvm]var description: String? four_created_at [jvm]var four_created_at: Instant? four_updated_at [jvm]var four_updated_at: Instant? four_version [jvm]var four_version: Long? one_created_at [jvm]var one_created_at: Instant? one_updated_at [jvm]var one_updated_at: Instant? one_version [jvm]var one_version: Long? partition_key [jvm]var partition_key: String? sort_key [jvm]var sort_key: String? three_created_at [jvm]var three_created_at: Instant? three_updated_at [jvm]var three_updated_at: Instant? three_version [jvm]var three_version: Long? two_created_at [jvm]var two_created_at: Instant? two_updated_at [jvm]var two_updated_at: Instant? two_version [jvm]var two_version: Long? updated_at_date [jvm]var updated_at_date: Date? updated_at_dynamo [jvm]var updated_at_dynamo: Instant? updated_at_instant [jvm]var updated_at_instant: Instant? version [jvm]var version: Long?"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-versioned-attribute-item/","title":"VersionedAttributeItem - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/VersionedAttributeItem</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-versioned-attribute-item/#versionedattributeitem","title":"VersionedAttributeItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/created_at_date/","title":"created_at_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/created_at_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/created_at_date/#created_at_date","title":"created_at_date","text":"<p>[jvm]\\ var created_at_date: Date?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/created_at_instant/","title":"created_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/created_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/created_at_instant/#created_at_instant","title":"created_at_instant","text":"<p>[jvm]\\ var created_at_instant: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/description/","title":"description - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/description</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/description/#description","title":"description","text":"<p>[jvm]\\ var description: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_created_at/","title":"four_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/four_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_created_at/#four_created_at","title":"four_created_at","text":"<p>[jvm]\\ var four_created_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_updated_at/","title":"four_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/four_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_updated_at/#four_updated_at","title":"four_updated_at","text":"<p>[jvm]\\ var four_updated_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_version/","title":"four_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/four_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/four_version/#four_version","title":"four_version","text":"<p>[jvm]\\ var four_version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_created_at/","title":"one_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/one_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_created_at/#one_created_at","title":"one_created_at","text":"<p>[jvm]\\ var one_created_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_updated_at/","title":"one_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/one_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_updated_at/#one_updated_at","title":"one_updated_at","text":"<p>[jvm]\\ var one_updated_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_version/","title":"one_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/one_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/one_version/#one_version","title":"one_version","text":"<p>[jvm]\\ var one_version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/partition_key/","title":"partition_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/partition_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/partition_key/#partition_key","title":"partition_key","text":"<p>[jvm]\\ var partition_key: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/sort_key/","title":"sort_key - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/sort_key</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/sort_key/#sort_key","title":"sort_key","text":"<p>[jvm]\\ var sort_key: String?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_created_at/","title":"three_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/three_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_created_at/#three_created_at","title":"three_created_at","text":"<p>[jvm]\\ var three_created_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_updated_at/","title":"three_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/three_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_updated_at/#three_updated_at","title":"three_updated_at","text":"<p>[jvm]\\ var three_updated_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_version/","title":"three_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/three_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/three_version/#three_version","title":"three_version","text":"<p>[jvm]\\ var three_version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_created_at/","title":"two_created_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/two_created_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_created_at/#two_created_at","title":"two_created_at","text":"<p>[jvm]\\ var two_created_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_updated_at/","title":"two_updated_at - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/two_updated_at</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_updated_at/#two_updated_at","title":"two_updated_at","text":"<p>[jvm]\\ var two_updated_at: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_version/","title":"two_version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/two_version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/two_version/#two_version","title":"two_version","text":"<p>[jvm]\\ var two_version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_date/","title":"updated_at_date - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/updated_at_date</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_date/#updated_at_date","title":"updated_at_date","text":"<p>[jvm]\\ var updated_at_date: Date?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_dynamo/","title":"updated_at_dynamo - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/updated_at_dynamo</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_dynamo/#updated_at_dynamo","title":"updated_at_dynamo","text":"<p>[jvm]\\ var updated_at_dynamo: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_instant/","title":"updated_at_instant - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/updated_at_instant</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/updated_at_instant/#updated_at_instant","title":"updated_at_instant","text":"<p>[jvm]\\ var updated_at_instant: Instant?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/version/","title":"version - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/version</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/version/#version","title":"version","text":"<p>[jvm]\\ var version: Long?</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-companion/","title":"Companion - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/Companion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-companion/#properties","title":"Properties","text":"Name Summary TABLE_NAME [jvm]const val TABLE_NAME: String"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-companion/-t-a-b-l-e_-n-a-m-e/","title":"TABLE_NAME - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeItem/Companion/TABLE_NAME</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-item/-companion/-t-a-b-l-e_-n-a-m-e/#table_name","title":"TABLE_NAME","text":"<p>[jvm]\\ const val TABLE_NAME: String</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/","title":"VersionedAttributeTable - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeTable</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/#versionedattributetable","title":"VersionedAttributeTable","text":"<p>[jvm]\\ interface VersionedAttributeTable : LogicalTable&lt;VersionedAttributeItem&gt;</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/#properties","title":"Properties","text":"Name Summary attributes [jvm]abstract val attributes: InlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, VersionedAttributeItem&gt; delete [jvm]open fun delete(item: VersionedAttributeItem): VersionedAttributeItem?abstract fun delete(item: VersionedAttributeItem, deleteExpression: Expression?): VersionedAttributeItem? deleteKey [jvm]open fun deleteKey(key: VersionedAttributeItem): VersionedAttributeItem?abstract fun deleteKey(key: VersionedAttributeItem, deleteExpression: Expression?): VersionedAttributeItem? inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: VersionedAttributeItem): VersionedAttributeItem?abstract fun load(key: VersionedAttributeItem, consistentReads: Boolean): VersionedAttributeItem?abstract fun load(key: VersionedAttributeItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Pair&lt;VersionedAttributeItem?, ConsumedCapacity?&gt; save [jvm]open fun save(item: VersionedAttributeItem)abstract fun save(item: VersionedAttributeItem, saveExpression: Expression?) saveWithResult [jvm]open fun saveWithResult(item: VersionedAttributeItem): VersionedAttributeItemabstract fun saveWithResult(item: VersionedAttributeItem, saveExpression: Expression?): VersionedAttributeItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/attributes/","title":"attributes - Tempest","text":"<p>//musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/VersionedAttributeTable/attributes</p>"},{"location":"1.x/musiclibrary2/musiclibrary2/app.cash.tempest2.musiclibrary.versionedattribute/-versioned-attribute-table/attributes/#attributes","title":"attributes","text":"<p>[jvm]\\ abstract val attributes: InlineView&lt;VersionedAttribute.Key, VersionedAttribute&gt;</p>"},{"location":"1.x/tempest/","title":"tempest - Tempest","text":"<p>//tempest</p>"},{"location":"1.x/tempest/#tempest","title":"tempest","text":""},{"location":"1.x/tempest/#packages","title":"Packages","text":"Name app.cash.tempest"},{"location":"1.x/tempest/tempest/app.cash.tempest/","title":"Package-level declarations - Tempest","text":"<p>//tempest/app.cash.tempest</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest/tempest/app.cash.tempest/#types","title":"Types","text":"Name Summary Attribute [jvm]@Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FIELD])annotation class Attribute(val name: String = \"\", val names: Array&lt;String&gt; = [], val prefix: String = \"\")Maps an item class property to one or more attributes in a DynamoDB table. BatchWriteResult [jvm]data class BatchWriteResult(val failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt;)It contains information about the unprocessed items and the exception causing the failure. BatchWriteSet [jvm]data class BatchWriteSet(val itemsToClobber: ItemSet, val keysToDelete: KeySet)A write that the client sends to the DynamoDb service. BeginsWith [jvm]data class BeginsWith&lt;K&gt;(val prefix: K) : KeyCondition&lt;K&gt; Applies equality condition on the hash key and the following condition on the range key Between [jvm]data class Between&lt;K&gt;(val startInclusive: K, val endInclusive: K) : KeyCondition&lt;K&gt; Applies equality condition on the hash key and the following condition on the range key Codec [jvm]interface Codec&lt;A : Any, D : Any&gt;Converts values between the mutable <code>DynamoDBMapper</code> objects that defines the union of all key and value attributes, and specific Tempest values. FilterExpression [jvm]data class FilterExpression@JvmOverloadsconstructor(val expression: String, val attributeValues: Map&lt;String, AttributeValue&gt; = emptyMap())If you need to further refine the Scan results, you can optionally provide a filter expression. A filter expression determines which items within the Scan results should be returned to you. All of the other results are discarded. ForIndex [jvm]@Target(allowedTargets = [AnnotationTarget.CLASS])annotation class ForIndex(val name: String = \"\")Maps an key class to a global or local secondary index in a DynamoDB table. InlineView [jvm]interface InlineView&lt;K : Any, I : Any&gt; : View&lt;K, I&gt; , Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt; ItemSet [jvm]class ItemSet : Set&lt;Any&gt; A collection of items across tables. KeyCondition [jvm]sealed class KeyCondition&lt;K&gt;Used to query a table or an index. KeySet [jvm]class KeySet : Set&lt;Any&gt; A collection of keys or items across tables. LogicalDb [jvm]interface LogicalDb : LogicalTable.FactoryA collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types. LogicalTable [jvm]interface LogicalTable&lt;RI : Any&gt; : View&lt;RI, RI&gt; , InlineView.Factory, SecondaryIndex.FactoryA collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes. Offset [jvm]data class Offset&lt;K&gt;(val key: K) Page [jvm]data class Page&lt;K, T&gt; Queryable [jvm]interface Queryable&lt;K : Any, I : Any&gt; QueryConfig [jvm]data class QueryConfig ScanConfig [jvm]data class ScanConfig Scannable [jvm]interface Scannable&lt;K : Any, I : Any&gt; SecondaryIndex [jvm]interface SecondaryIndex&lt;K : Any, I : Any&gt; : Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt; TransactionWriteSet [jvm]data class TransactionWriteSet(val itemsToSave: ItemSet, val keysToDelete: KeySet, val keysToCheck: KeySet, val writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;, val idempotencyToken: String?) View [jvm]interface View&lt;K : Any, I : Any&gt; WorkerId [jvm]data class WorkerId(val segment: Int = 0, val totalSegments: Int = 1)By default, the Scan operation processes data sequentially. Amazon DynamoDB returns data to the application in 1 MB increments, and an application performs additional Scan operations to retrieve the next 1 MB of data. WritingPager [jvm]class WritingPager&lt;T&gt;@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)A control flow abstraction for paging transactional writes."},{"location":"1.x/tempest/tempest/app.cash.tempest/#functions","title":"Functions","text":"Name Summary transactionWritingPager [jvm]fun &lt;DB : LogicalDb, T&gt; DB.transactionWritingPager(items: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;): WritingPager&lt;T&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/transaction-writing-pager/","title":"transactionWritingPager - Tempest","text":"<p>//tempest/app.cash.tempest/transactionWritingPager</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/transaction-writing-pager/#transactionwritingpager","title":"transactionWritingPager","text":"<p>[jvm]\\ fun &lt;DB : LogicalDb, T&gt; DB.transactionWritingPager(items: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;): WritingPager&lt;T&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/","title":"Attribute - Tempest","text":"<p>//tempest/app.cash.tempest/Attribute</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/#attribute","title":"Attribute","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FIELD])</p> <p>annotation class Attribute(val name: String = \"\", val names: Array&lt;String&gt; = [], val prefix: String = \"\")</p> <p>Maps an item class property to one or more attributes in a DynamoDB table.</p> <p>If this mapped to a primary range key, it must have a prefix. Tempest automatically adds the prefix before database writes and removes it after database reads.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String names [jvm]val names: Array&lt;String&gt; prefix [jvm]val prefix: String"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/name/","title":"name - Tempest","text":"<p>//tempest/app.cash.tempest/Attribute/name</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/names/","title":"names - Tempest","text":"<p>//tempest/app.cash.tempest/Attribute/names</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/names/#names","title":"names","text":"<p>[jvm]\\ val names: Array&lt;String&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/prefix/","title":"prefix - Tempest","text":"<p>//tempest/app.cash.tempest/Attribute/prefix</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-attribute/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: String</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/","title":"BatchWriteResult - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteResult</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/#batchwriteresult","title":"BatchWriteResult","text":"<p>[jvm]\\ data class BatchWriteResult(val failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt;)</p> <p>It contains information about the unprocessed items and the exception causing the failure.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/#constructors","title":"Constructors","text":"BatchWriteResult [jvm]constructor(failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt;)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/#properties","title":"Properties","text":"Name Summary failedBatches [jvm]val failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt; isSuccessful [jvm]val isSuccessful: Boolean"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/-batch-write-result/","title":"BatchWriteResult - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteResult/BatchWriteResult</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/-batch-write-result/#batchwriteresult","title":"BatchWriteResult","text":"<p>[jvm]\\ constructor(failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt;)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/failed-batches/","title":"failedBatches - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteResult/failedBatches</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/failed-batches/#failedbatches","title":"failedBatches","text":"<p>[jvm]\\ val failedBatches: List&lt;DynamoDBMapper.FailedBatch&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/is-successful/","title":"isSuccessful - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteResult/isSuccessful</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-result/is-successful/#issuccessful","title":"isSuccessful","text":"<p>[jvm]\\ val isSuccessful: Boolean</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/","title":"BatchWriteSet - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/#batchwriteset","title":"BatchWriteSet","text":"<p>[jvm]\\ data class BatchWriteSet(val itemsToClobber: ItemSet, val keysToDelete: KeySet)</p> <p>A write that the client sends to the DynamoDb service.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/#constructors","title":"Constructors","text":"BatchWriteSet [jvm]constructor(itemsToClobber: ItemSet, keysToDelete: KeySet)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/#properties","title":"Properties","text":"Name Summary itemsToClobber [jvm]val itemsToClobber: ItemSet keysToDelete [jvm]val keysToDelete: KeySet"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-batch-write-set/","title":"BatchWriteSet - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/BatchWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-batch-write-set/#batchwriteset","title":"BatchWriteSet","text":"<p>[jvm]\\ constructor(itemsToClobber: ItemSet, keysToDelete: KeySet)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/items-to-clobber/","title":"itemsToClobber - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/itemsToClobber</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/items-to-clobber/#itemstoclobber","title":"itemsToClobber","text":"<p>[jvm]\\ val itemsToClobber: ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/keys-to-delete/","title":"keysToDelete - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/keysToDelete</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/keys-to-delete/#keystodelete","title":"keysToDelete","text":"<p>[jvm]\\ val keysToDelete: KeySet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/#functions","title":"Functions","text":"Name Summary build [jvm]fun build(): BatchWriteSet clobber [jvm]fun clobber(vararg item: Any): BatchWriteSet.BuilderThis method behaves as if SaveBehavior.CLOBBER was specified. Versioned attributes will be discarded.[jvm]fun clobber(items: Iterable&lt;Any&gt;): BatchWriteSet.Builder delete [jvm]fun delete(vararg key: Any): BatchWriteSet.Builderfun delete(keys: Iterable&lt;Any&gt;): BatchWriteSet.Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/Builder/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/build/","title":"build - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/Builder/build</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): BatchWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/clobber/","title":"clobber - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/Builder/clobber</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/clobber/#clobber","title":"clobber","text":"<p>[jvm]\\ fun clobber(vararg item: Any): BatchWriteSet.Builder</p> <p>This method behaves as if SaveBehavior.CLOBBER was specified. Versioned attributes will be discarded.</p> <p>[jvm]\\ fun clobber(items: Iterable&lt;Any&gt;): BatchWriteSet.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/delete/","title":"delete - Tempest","text":"<p>//tempest/app.cash.tempest/BatchWriteSet/Builder/delete</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-batch-write-set/-builder/delete/#delete","title":"delete","text":"<p>[jvm]\\ fun delete(vararg key: Any): BatchWriteSet.Builder</p> <p>fun delete(keys: Iterable&lt;Any&gt;): BatchWriteSet.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/","title":"BeginsWith - Tempest","text":"<p>//tempest/app.cash.tempest/BeginsWith</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/#beginswith","title":"BeginsWith","text":"<p>[jvm]\\ data class BeginsWith&lt;K&gt;(val prefix: K) : KeyCondition&lt;K&gt; </p> <p>Applies equality condition on the hash key and the following condition on the range key</p> <ul> <li>begins_with (a, substr)\u2014 true if the value of attribute a begins with a particular substring.</li> </ul>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/#constructors","title":"Constructors","text":"BeginsWith [jvm]constructor(prefix: K)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/#properties","title":"Properties","text":"Name Summary prefix [jvm]val prefix: K"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/-begins-with/","title":"BeginsWith - Tempest","text":"<p>//tempest/app.cash.tempest/BeginsWith/BeginsWith</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/-begins-with/#beginswith","title":"BeginsWith","text":"<p>[jvm]\\ constructor(prefix: K)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/prefix/","title":"prefix - Tempest","text":"<p>//tempest/app.cash.tempest/BeginsWith/prefix</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-begins-with/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: K</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/","title":"Between - Tempest","text":"<p>//tempest/app.cash.tempest/Between</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/#between","title":"Between","text":"<p>[jvm]\\ data class Between&lt;K&gt;(val startInclusive: K, val endInclusive: K) : KeyCondition&lt;K&gt; </p> <p>Applies equality condition on the hash key and the following condition on the range key</p> <ul> <li>a BETWEEN b AND c \u2014 true if a is greater than or equal to b, and less than or equal to c.</li> </ul>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/#constructors","title":"Constructors","text":"Between [jvm]constructor(startInclusive: K, endInclusive: K)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/#properties","title":"Properties","text":"Name Summary endInclusive [jvm]val endInclusive: K startInclusive [jvm]val startInclusive: K"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/-between/","title":"Between - Tempest","text":"<p>//tempest/app.cash.tempest/Between/Between</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/-between/#between","title":"Between","text":"<p>[jvm]\\ constructor(startInclusive: K, endInclusive: K)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/end-inclusive/","title":"endInclusive - Tempest","text":"<p>//tempest/app.cash.tempest/Between/endInclusive</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>[jvm]\\ val endInclusive: K</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/start-inclusive/","title":"startInclusive - Tempest","text":"<p>//tempest/app.cash.tempest/Between/startInclusive</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-between/start-inclusive/#startinclusive","title":"startInclusive","text":"<p>[jvm]\\ val startInclusive: K</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/","title":"Codec - Tempest","text":"<p>//tempest/app.cash.tempest/Codec</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/#codec","title":"Codec","text":"<p>[jvm]\\ interface Codec&lt;A : Any, D : Any&gt;</p> <p>Converts values between the mutable <code>DynamoDBMapper</code> objects that defines the union of all key and value attributes, and specific Tempest values.</p> <p>It is the caller\u2019s responsibility to check that the <code>DynamoDBMapper</code> instance can be safely converted to the target type. If it cannot be, the behavior of this codec is undefined.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/#functions","title":"Functions","text":"Name Summary toApp [jvm]abstract fun toApp(dbItem: D): A toDb [jvm]abstract fun toDb(appItem: A): D"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/to-app/","title":"toApp - Tempest","text":"<p>//tempest/app.cash.tempest/Codec/toApp</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/to-app/#toapp","title":"toApp","text":"<p>[jvm]\\ abstract fun toApp(dbItem: D): A</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/to-db/","title":"toDb - Tempest","text":"<p>//tempest/app.cash.tempest/Codec/toDb</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-codec/to-db/#todb","title":"toDb","text":"<p>[jvm]\\ abstract fun toDb(appItem: A): D</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/","title":"FilterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/FilterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/#filterexpression","title":"FilterExpression","text":"<p>[jvm]\\ data class FilterExpression@JvmOverloadsconstructor(val expression: String, val attributeValues: Map&lt;String, AttributeValue&gt; = emptyMap())</p> <p>If you need to further refine the Scan results, you can optionally provide a filter expression. A filter expression determines which items within the Scan results should be returned to you. All of the other results are discarded.</p> <p>A filter expression is applied after a Scan finishes but before the results are returned. Therefore, a Scan consumes the same amount of read capacity, regardless of whether a filter expression is present.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/#constructors","title":"Constructors","text":"FilterExpression [jvm]@JvmOverloadsconstructor(expression: String, attributeValues: Map&lt;String, AttributeValue&gt; = emptyMap())"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/#properties","title":"Properties","text":"Name Summary attributeValues [jvm]val attributeValues: Map&lt;String, AttributeValue&gt;Expression attribute values in Amazon DynamoDB are substitutes for the actual values that you want to compare\u2014values that you might not know until runtime. An expression attribute value must begin with a colon (:) and be followed by one or more alphanumeric characters. expression [jvm]val expression: StringThe syntax for a filter expression is identical to that of a condition expression. Filter expressions can use the same comparators, functions, and logical operators as a condition expression. For more information, Condition Expressions."},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/-filter-expression/","title":"FilterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/FilterExpression/FilterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/-filter-expression/#filterexpression","title":"FilterExpression","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(expression: String, attributeValues: Map&lt;String, AttributeValue&gt; = emptyMap())</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/attribute-values/","title":"attributeValues - Tempest","text":"<p>//tempest/app.cash.tempest/FilterExpression/attributeValues</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/attribute-values/#attributevalues","title":"attributeValues","text":"<p>[jvm]\\ val attributeValues: Map&lt;String, AttributeValue&gt;</p> <p>Expression attribute values in Amazon DynamoDB are substitutes for the actual values that you want to compare\u2014values that you might not know until runtime. An expression attribute value must begin with a colon (:) and be followed by one or more alphanumeric characters.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/expression/","title":"expression - Tempest","text":"<p>//tempest/app.cash.tempest/FilterExpression/expression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-filter-expression/expression/#expression","title":"expression","text":"<p>[jvm]\\ val expression: String</p> <p>The syntax for a filter expression is identical to that of a condition expression. Filter expressions can use the same comparators, functions, and logical operators as a condition expression. For more information, Condition Expressions.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-for-index/","title":"ForIndex - Tempest","text":"<p>//tempest/app.cash.tempest/ForIndex</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-for-index/#forindex","title":"ForIndex","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.CLASS])</p> <p>annotation class ForIndex(val name: String = \"\")</p> <p>Maps an key class to a global or local secondary index in a DynamoDB table.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-for-index/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String"},{"location":"1.x/tempest/tempest/app.cash.tempest/-for-index/name/","title":"name - Tempest","text":"<p>//tempest/app.cash.tempest/ForIndex/name</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-for-index/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/","title":"InlineView - Tempest","text":"<p>//tempest/app.cash.tempest/InlineView</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/#inlineview","title":"InlineView","text":"<p>[jvm]\\ interface InlineView&lt;K : Any, I : Any&gt; : View&lt;K, I&gt; , Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open fun delete(item: I)open fun delete(item: I, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: I, ignoreVersionConstraints: Boolean)[jvm]abstract fun delete(item: I, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: K)open fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: K, ignoreVersionConstraints: Boolean)[jvm]abstract fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. load [jvm]open fun load(key: K): I?[jvm]abstract fun load(key: K, consistentReads: DynamoDBMapperConfig.ConsistentReads = ConsistentReads.EVENTUAL): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. save [jvm]open fun save(item: I): Iopen fun save(item: I, saveExpression: DynamoDBSaveExpression): Iopen fun save(item: I, ignoreVersionConstraints: Boolean): I[jvm]abstract fun save(item: I, saveExpression: DynamoDBSaveExpression? = null, ignoreVersionConstraints: Boolean = false): ISaves an item in DynamoDB and returns a new copy with locally updated attributes such as versions and auto-generated timestamps. The return value does not reflect the result of concurrent writes. scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(workerId: WorkerId = WorkerId.SEQUENTIAL, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated."},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/","title":"Factory - Tempest","text":"<p>//tempest/app.cash.tempest/InlineView/Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/#inheritors","title":"Inheritors","text":"LogicalTable"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/#functions","title":"Functions","text":"Name Summary inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/inline-view/","title":"inlineView - Tempest","text":"<p>//tempest/app.cash.tempest/InlineView/Factory/inlineView</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-inline-view/-factory/inline-view/#inlineview","title":"inlineView","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/","title":"ItemSet - Tempest","text":"<p>//tempest/app.cash.tempest/ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/#itemset","title":"ItemSet","text":"<p>[jvm]\\ class ItemSet : Set&lt;Any&gt; </p> <p>A collection of items across tables.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/#constructors","title":"Constructors","text":"ItemSet [jvm]constructor(contents: Iterable&lt;Any&gt;)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/#properties","title":"Properties","text":"Name Summary size [jvm]open override val size: Int"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/#functions","title":"Functions","text":"Name Summary contains [jvm]open operator override fun contains(element: Any): Boolean containsAll [jvm]open override fun containsAll(elements: Collection&lt;Any&gt;): Boolean forEach [jvm]open fun forEach(p0: Consumer&lt;in Any&gt;) getItems [jvm]inline fun &lt;I : Any&gt; getItems(): List&lt;I&gt;fun &lt;I : Any&gt; getItems(itemType: Class&lt;I&gt;): List&lt;I&gt;fun &lt;I : Any&gt; getItems(itemType: KClass&lt;I&gt;): List&lt;I&gt; isEmpty [jvm]open override fun isEmpty(): Boolean iterator [jvm]open operator override fun iterator(): Iterator&lt;Any&gt; parallelStream [jvm]open fun parallelStream(): Stream&lt;Any&gt; spliterator [jvm]open override fun spliterator(): Spliterator&lt;Any&gt; stream [jvm]open fun stream(): Stream&lt;Any&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/-item-set/","title":"ItemSet - Tempest","text":"<p>//tempest/app.cash.tempest/ItemSet/ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/-item-set/#itemset","title":"ItemSet","text":"<p>[jvm]\\ constructor(contents: Iterable&lt;Any&gt;)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/get-items/","title":"getItems - Tempest","text":"<p>//tempest/app.cash.tempest/ItemSet/getItems</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-item-set/get-items/#getitems","title":"getItems","text":"<p>[jvm]\\ fun &lt;I : Any&gt; getItems(itemType: KClass&lt;I&gt;): List&lt;I&gt;</p> <p>fun &lt;I : Any&gt; getItems(itemType: Class&lt;I&gt;): List&lt;I&gt;</p> <p>inline fun &lt;I : Any&gt; getItems(): List&lt;I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-condition/","title":"KeyCondition - Tempest","text":"<p>//tempest/app.cash.tempest/KeyCondition</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-condition/#keycondition","title":"KeyCondition","text":"<p>sealed class KeyCondition&lt;K&gt;</p> <p>Used to query a table or an index.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-condition/#inheritors","title":"Inheritors","text":"BeginsWith Between"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/","title":"KeySet - Tempest","text":"<p>//tempest/app.cash.tempest/KeySet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/#keyset","title":"KeySet","text":"<p>[jvm]\\ class KeySet : Set&lt;Any&gt; </p> <p>A collection of keys or items across tables.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/#constructors","title":"Constructors","text":"KeySet [jvm]constructor(contents: Iterable&lt;Any&gt;)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/#properties","title":"Properties","text":"Name Summary size [jvm]open override val size: Int"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/#functions","title":"Functions","text":"Name Summary contains [jvm]open operator override fun contains(element: Any): Boolean containsAll [jvm]open override fun containsAll(elements: Collection&lt;Any&gt;): Boolean forEach [jvm]open fun forEach(p0: Consumer&lt;in Any&gt;) getKeys [jvm]inline fun &lt;K : Any&gt; getKeys(): List&lt;K&gt;fun &lt;K : Any&gt; getKeys(keyType: Class&lt;K&gt;): List&lt;K&gt;fun &lt;K : Any&gt; getKeys(keyType: KClass&lt;K&gt;): List&lt;K&gt; isEmpty [jvm]open override fun isEmpty(): Boolean iterator [jvm]open operator override fun iterator(): Iterator&lt;Any&gt; parallelStream [jvm]open fun parallelStream(): Stream&lt;Any&gt; spliterator [jvm]open override fun spliterator(): Spliterator&lt;Any&gt; stream [jvm]open fun stream(): Stream&lt;Any&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/-key-set/","title":"KeySet - Tempest","text":"<p>//tempest/app.cash.tempest/KeySet/KeySet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/-key-set/#keyset","title":"KeySet","text":"<p>[jvm]\\ constructor(contents: Iterable&lt;Any&gt;)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/get-keys/","title":"getKeys - Tempest","text":"<p>//tempest/app.cash.tempest/KeySet/getKeys</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-key-set/get-keys/#getkeys","title":"getKeys","text":"<p>[jvm]\\ fun &lt;K : Any&gt; getKeys(keyType: KClass&lt;K&gt;): List&lt;K&gt;</p> <p>fun &lt;K : Any&gt; getKeys(keyType: Class&lt;K&gt;): List&lt;K&gt;</p> <p>inline fun &lt;K : Any&gt; getKeys(): List&lt;K&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/","title":"LogicalDb - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/#logicaldb","title":"LogicalDb","text":"<p>[jvm]\\ interface LogicalDb : LogicalTable.Factory</p> <p>A collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSet[jvm]abstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSetRetrieves multiple items from multiple tables using their primary keys. batchWrite [jvm]@CheckReturnValueopen fun batchWrite(writeSet: BatchWriteSet): BatchWriteResult[jvm]@CheckReturnValueabstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy = DefaultBatchWriteRetryStrategy()): BatchWriteResultSaves and deletes the objects given using one or more calls to the AmazonDynamoDB.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed. logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetTransactionally loads objects specified by transactionLoadRequest by calling AmazonDynamoDB.transactGetItems API.[jvm]open fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)Transactionally writes objects specified by transactionWriteRequest by calling AmazonDynamoDB.transactWriteItems API."},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/batch-load/","title":"batchLoad - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/batchLoad</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/batch-load/#batchload","title":"batchLoad","text":"<p>[jvm]\\ abstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSet</p> <p>Retrieves multiple items from multiple tables using their primary keys.</p> <p>This method performs one or more calls to the AmazonDynamoDB.batchGetItem API.</p> <p>A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. BatchGetItem returns a partial result if the response size limit is exceeded, the table\u2019s provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, this method backs off and retries the <code>UnprocessedKeys</code> in the next API call.</p> <p>[jvm]\\ open fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSet</p> <p>open fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads = EVENTUAL, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy = DefaultBatchLoadRetryStrategy()): ItemSet</p> <p>open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSet</p> <p>open fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSet</p> <p>open fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/batch-write/","title":"batchWrite - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/batchWrite</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/batch-write/#batchwrite","title":"batchWrite","text":"<p>[jvm]\\</p> <p>@CheckReturnValue</p> <p>abstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy = DefaultBatchWriteRetryStrategy()): BatchWriteResult</p> <p>Saves and deletes the objects given using one or more calls to the AmazonDynamoDB.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed.</p> <p>This method does not support versioning annotations and behaves as if DynamoDBMapperConfig.SaveBehavior.CLOBBER was specified.</p> <p>A single call to BatchWriteItem can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.</p> <p>In order to improve performance with these large-scale operations, this does not behave in the same way as individual PutItem and DeleteItem calls would. For example, you cannot specify conditions on individual put and delete requests, and BatchWriteItem does not return deleted items in the response.</p> <p>[jvm]\\</p> <p>@CheckReturnValue</p> <p>open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResult</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/transaction-load/","title":"transactionLoad - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/transactionLoad</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/transaction-load/#transactionload","title":"transactionLoad","text":"<p>[jvm]\\ abstract fun transactionLoad(keys: KeySet): ItemSet</p> <p>Transactionally loads objects specified by transactionLoadRequest by calling AmazonDynamoDB.transactGetItems API.</p> <p>A transaction cannot contain more than 25 unique items. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table.</p> <p>[jvm]\\ open fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet</p> <p>open fun transactionLoad(vararg keys: Any): ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/transaction-write/","title":"transactionWrite - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/transactionWrite</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/transaction-write/#transactionwrite","title":"transactionWrite","text":"<p>[jvm]\\ abstract fun transactionWrite(writeSet: TransactionWriteSet)</p> <p>Transactionally writes objects specified by transactionWriteRequest by calling AmazonDynamoDB.transactWriteItems API.</p> <p>This method supports versioning annotations, but not in conjunction with condition expressions. It throws com.amazonaws.SdkClientException exception if class of any input object is annotated with DynamoDBVersionAttribute or DynamoDBVersioned and a condition expression is also present.</p> <p>A transaction cannot contain more than 25 unique items, including conditions. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table. For example, you cannot both ConditionCheck and Update the same item in one transaction.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/","title":"Companion - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/Companion</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper): DB@JvmStaticfun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig): DBfun &lt;DB : LogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig = DynamoDBMapperConfig.DEFAULT): DB invoke [jvm]inline operator fun &lt;DB : LogicalDb&gt; invoke(dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig = DynamoDBMapperConfig.DEFAULT): DB"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/create/","title":"create - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/Companion/create</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;DB : LogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig = DynamoDBMapperConfig.DEFAULT): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig): DB</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/invoke/","title":"invoke - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalDb/Companion/invoke</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-db/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ inline operator fun &lt;DB : LogicalDb&gt; invoke(dynamoDbMapper: DynamoDBMapper, config: DynamoDBMapperConfig = DynamoDBMapperConfig.DEFAULT): DB</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/","title":"LogicalTable - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalTable</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/#logicaltable","title":"LogicalTable","text":"<p>[jvm]\\ interface LogicalTable&lt;RI : Any&gt; : View&lt;RI, RI&gt; , InlineView.Factory, SecondaryIndex.Factory</p> <p>A collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;type must be a key type or item type of one of the views of this table. delete [jvm]open fun delete(item: RI)open fun delete(item: RI, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: RI, ignoreVersionConstraints: Boolean)[jvm]abstract fun delete(item: RI, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: RI)open fun deleteKey(key: RI, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: RI, ignoreVersionConstraints: Boolean)[jvm]abstract fun deleteKey(key: RI, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: RI): RI?[jvm]abstract fun load(key: RI, consistentReads: DynamoDBMapperConfig.ConsistentReads = ConsistentReads.EVENTUAL): RI?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. save [jvm]open fun save(item: RI): RIopen fun save(item: RI, saveExpression: DynamoDBSaveExpression): RIopen fun save(item: RI, ignoreVersionConstraints: Boolean): RI[jvm]abstract fun save(item: RI, saveExpression: DynamoDBSaveExpression? = null, ignoreVersionConstraints: Boolean = false): RISaves an item in DynamoDB and returns a new copy with locally updated attributes such as versions and auto-generated timestamps. The return value does not reflect the result of concurrent writes. secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/codec/","title":"codec - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalTable/codec</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/codec/#codec","title":"codec","text":"<p>[jvm]\\ abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;</p> <p>type must be a key type or item type of one of the views of this table.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/","title":"Factory - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalTable/Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/#inheritors","title":"Inheritors","text":"LogicalDb"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/#functions","title":"Functions","text":"Name Summary logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/logical-table/","title":"logicalTable - Tempest","text":"<p>//tempest/app.cash.tempest/LogicalTable/Factory/logicalTable</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-logical-table/-factory/logical-table/#logicaltable","title":"logicalTable","text":"<p>[jvm]\\ abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/","title":"Offset - Tempest","text":"<p>//tempest/app.cash.tempest/Offset</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/#offset","title":"Offset","text":"<p>[jvm]\\ data class Offset&lt;K&gt;(val key: K)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/#constructors","title":"Constructors","text":"Offset [jvm]constructor(key: K)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/#properties","title":"Properties","text":"Name Summary key [jvm]val key: K"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/-offset/","title":"Offset - Tempest","text":"<p>//tempest/app.cash.tempest/Offset/Offset</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/-offset/#offset","title":"Offset","text":"<p>[jvm]\\ constructor(key: K)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/key/","title":"key - Tempest","text":"<p>//tempest/app.cash.tempest/Offset/key</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-offset/key/#key","title":"key","text":"<p>[jvm]\\ val key: K</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/","title":"Page - Tempest","text":"<p>//tempest/app.cash.tempest/Page</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/#page","title":"Page","text":"<p>[jvm]\\ data class Page&lt;K, T&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/#properties","title":"Properties","text":"Name Summary consumedCapacity [jvm]val consumedCapacity: ConsumedCapacity?The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. This is only returned if the ReturnConsumedCapacity parameter was specified. contents [jvm]val contents: List&lt;T&gt; hasMorePages [jvm]val hasMorePages: Boolean offset [jvm]val offset: Offset&lt;K&gt;? scannedCount [jvm]val scannedCount: IntThe number of items evaluated, before any filter is applied."},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/consumed-capacity/","title":"consumedCapacity - Tempest","text":"<p>//tempest/app.cash.tempest/Page/consumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/consumed-capacity/#consumedcapacity","title":"consumedCapacity","text":"<p>[jvm]\\ val consumedCapacity: ConsumedCapacity?</p> <p>The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. This is only returned if the ReturnConsumedCapacity parameter was specified.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/contents/","title":"contents - Tempest","text":"<p>//tempest/app.cash.tempest/Page/contents</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/contents/#contents","title":"contents","text":"<p>[jvm]\\ val contents: List&lt;T&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/has-more-pages/","title":"hasMorePages - Tempest","text":"<p>//tempest/app.cash.tempest/Page/hasMorePages</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/has-more-pages/#hasmorepages","title":"hasMorePages","text":"<p>[jvm]\\ val hasMorePages: Boolean</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/offset/","title":"offset - Tempest","text":"<p>//tempest/app.cash.tempest/Page/offset</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/offset/#offset","title":"offset","text":"<p>[jvm]\\ val offset: Offset&lt;K&gt;?</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/scanned-count/","title":"scannedCount - Tempest","text":"<p>//tempest/app.cash.tempest/Page/scannedCount</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-page/scanned-count/#scannedcount","title":"scannedCount","text":"<p>[jvm]\\ val scannedCount: Int</p> <p>The number of items evaluated, before any filter is applied.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/","title":"QueryConfig - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/#queryconfig","title":"QueryConfig","text":"<p>[jvm]\\ data class QueryConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/#properties","title":"Properties","text":"Name Summary asc [jvm]val asc: Boolean consistentRead [jvm]val consistentRead: Boolean filterExpression [jvm]val filterExpression: FilterExpression? pageSize [jvm]val pageSize: Int returnConsumedCapacity [jvm]val returnConsumedCapacity: ReturnConsumedCapacity"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/asc/","title":"asc - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/asc</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/asc/#asc","title":"asc","text":"<p>[jvm]\\ val asc: Boolean</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/consistentRead</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ val consistentRead: Boolean</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/filterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ val filterExpression: FilterExpression?</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/page-size/","title":"pageSize - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/pageSize</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ val pageSize: Int</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/returnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ val returnConsumedCapacity: ReturnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/#functions","title":"Functions","text":"Name Summary asc [jvm]fun asc(asc: Boolean): QueryConfig.Builder build [jvm]fun build(): QueryConfig consistentRead [jvm]fun consistentRead(consistentRead: Boolean): QueryConfig.Builder filterExpression [jvm]fun filterExpression(filterExpression: FilterExpression): QueryConfig.Builder pageSize [jvm]fun pageSize(pageSize: Int): QueryConfig.Builder returnConsumedCapacity [jvm]fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): QueryConfig.Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/asc/","title":"asc - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/asc</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/asc/#asc","title":"asc","text":"<p>[jvm]\\ fun asc(asc: Boolean): QueryConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/build/","title":"build - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/build</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): QueryConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/consistentRead</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ fun consistentRead(consistentRead: Boolean): QueryConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/filterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ fun filterExpression(filterExpression: FilterExpression): QueryConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/page-size/","title":"pageSize - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/pageSize</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ fun pageSize(pageSize: Int): QueryConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest/app.cash.tempest/QueryConfig/Builder/returnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-query-config/-builder/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): QueryConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/","title":"Queryable - Tempest","text":"<p>//tempest/app.cash.tempest/Queryable</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/#queryable","title":"Queryable","text":"<p>interface Queryable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/#inheritors","title":"Inheritors","text":"InlineView SecondaryIndex"},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/#functions","title":"Functions","text":"Name Summary query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated."},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/query/","title":"query - Tempest","text":"<p>//tempest/app.cash.tempest/Queryable/query</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-queryable/query/#query","title":"query","text":"<p>[jvm]\\ abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;</p> <p>Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p> <p>[jvm]\\ open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/","title":"ScanConfig - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/#scanconfig","title":"ScanConfig","text":"<p>[jvm]\\ data class ScanConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/#properties","title":"Properties","text":"Name Summary consistentRead [jvm]val consistentRead: Boolean filterExpression [jvm]val filterExpression: FilterExpression? pageSize [jvm]val pageSize: Int returnConsumedCapacity [jvm]val returnConsumedCapacity: ReturnConsumedCapacity workerId [jvm]val workerId: WorkerId"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/consistentRead</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ val consistentRead: Boolean</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/filterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ val filterExpression: FilterExpression?</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/page-size/","title":"pageSize - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/pageSize</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ val pageSize: Int</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/returnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ val returnConsumedCapacity: ReturnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/worker-id/","title":"workerId - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/workerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/worker-id/#workerid","title":"workerId","text":"<p>[jvm]\\ val workerId: WorkerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/#functions","title":"Functions","text":"Name Summary build [jvm]fun build(): ScanConfig consistentRead [jvm]fun consistentRead(consistentRead: Boolean): ScanConfig.Builder filterExpression [jvm]fun filterExpression(filterExpression: FilterExpression): ScanConfig.Builder pageSize [jvm]fun pageSize(pageSize: Int): ScanConfig.Builder returnConsumedCapacity [jvm]fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): ScanConfig.Builder workerId [jvm]fun workerId(workerId: WorkerId): ScanConfig.Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/build/","title":"build - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/build</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): ScanConfig</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/consistentRead</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ fun consistentRead(consistentRead: Boolean): ScanConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/filterExpression</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ fun filterExpression(filterExpression: FilterExpression): ScanConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/page-size/","title":"pageSize - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/pageSize</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ fun pageSize(pageSize: Int): ScanConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/returnConsumedCapacity</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): ScanConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/worker-id/","title":"workerId - Tempest","text":"<p>//tempest/app.cash.tempest/ScanConfig/Builder/workerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scan-config/-builder/worker-id/#workerid","title":"workerId","text":"<p>[jvm]\\ fun workerId(workerId: WorkerId): ScanConfig.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/","title":"Scannable - Tempest","text":"<p>//tempest/app.cash.tempest/Scannable</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/#scannable","title":"Scannable","text":"<p>interface Scannable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/#inheritors","title":"Inheritors","text":"InlineView SecondaryIndex"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/#functions","title":"Functions","text":"Name Summary scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(workerId: WorkerId = WorkerId.SEQUENTIAL, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated."},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/scan/","title":"scan - Tempest","text":"<p>//tempest/app.cash.tempest/Scannable/scan</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-scannable/scan/#scan","title":"scan","text":"<p>[jvm]\\ abstract fun scan(workerId: WorkerId = WorkerId.SEQUENTIAL, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;</p> <p>Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p> <p>[jvm]\\ open fun scan(): Page&lt;K, I&gt;</p> <p>open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p> <p>open fun scan(config: ScanConfig): Page&lt;K, I&gt;</p> <p>open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/","title":"SecondaryIndex - Tempest","text":"<p>//tempest/app.cash.tempest/SecondaryIndex</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/#secondaryindex","title":"SecondaryIndex","text":"<p>[jvm]\\ interface SecondaryIndex&lt;K : Any, I : Any&gt; : Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/#functions","title":"Functions","text":"Name Summary query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(workerId: WorkerId = WorkerId.SEQUENTIAL, pageSize: Int = 100, consistentRead: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = NONE, filterExpression: FilterExpression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated."},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/","title":"Factory - Tempest","text":"<p>//tempest/app.cash.tempest/SecondaryIndex/Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/#inheritors","title":"Inheritors","text":"LogicalTable"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/#functions","title":"Functions","text":"Name Summary secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/secondary-index/","title":"secondaryIndex - Tempest","text":"<p>//tempest/app.cash.tempest/SecondaryIndex/Factory/secondaryIndex</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-secondary-index/-factory/secondary-index/#secondaryindex","title":"secondaryIndex","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/","title":"TransactionWriteSet - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/#transactionwriteset","title":"TransactionWriteSet","text":"<p>[jvm]\\ data class TransactionWriteSet(val itemsToSave: ItemSet, val keysToDelete: KeySet, val keysToCheck: KeySet, val writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;, val idempotencyToken: String?)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/#constructors","title":"Constructors","text":"TransactionWriteSet [jvm]constructor(itemsToSave: ItemSet, keysToDelete: KeySet, keysToCheck: KeySet, writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;, idempotencyToken: String?)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/#properties","title":"Properties","text":"Name Summary idempotencyToken [jvm]val idempotencyToken: String? itemsToSave [jvm]val itemsToSave: ItemSet keysToCheck [jvm]val keysToCheck: KeySet keysToDelete [jvm]val keysToDelete: KeySet size [jvm]val size: Int writeExpressions [jvm]val writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-transaction-write-set/","title":"TransactionWriteSet - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/TransactionWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-transaction-write-set/#transactionwriteset","title":"TransactionWriteSet","text":"<p>[jvm]\\ constructor(itemsToSave: ItemSet, keysToDelete: KeySet, keysToCheck: KeySet, writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;, idempotencyToken: String?)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/idempotency-token/","title":"idempotencyToken - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/idempotencyToken</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/idempotency-token/#idempotencytoken","title":"idempotencyToken","text":"<p>[jvm]\\ val idempotencyToken: String?</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/items-to-save/","title":"itemsToSave - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/itemsToSave</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/items-to-save/#itemstosave","title":"itemsToSave","text":"<p>[jvm]\\ val itemsToSave: ItemSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/keys-to-check/","title":"keysToCheck - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/keysToCheck</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/keys-to-check/#keystocheck","title":"keysToCheck","text":"<p>[jvm]\\ val keysToCheck: KeySet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/keys-to-delete/","title":"keysToDelete - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/keysToDelete</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/keys-to-delete/#keystodelete","title":"keysToDelete","text":"<p>[jvm]\\ val keysToDelete: KeySet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/size/","title":"size - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/size</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/size/#size","title":"size","text":"<p>[jvm]\\ val size: Int</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/write-expressions/","title":"writeExpressions - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/writeExpressions</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/write-expressions/#writeexpressions","title":"writeExpressions","text":"<p>[jvm]\\ val writeExpressions: Map&lt;Any, DynamoDBTransactionWriteExpression&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/#properties","title":"Properties","text":"Name Summary size [jvm]val size: Int"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/#functions","title":"Functions","text":"Name Summary addAll [jvm]fun addAll(builder: TransactionWriteSet.Builder) build [jvm]fun build(): TransactionWriteSet checkCondition [jvm]@JvmOverloadsfun checkCondition(key: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.Builder delete [jvm]@JvmOverloadsfun delete(key: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.Builder idempotencyToken [jvm]fun idempotencyToken(idempotencyToken: String): TransactionWriteSet.Builder save [jvm]@JvmOverloadsfun save(item: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.BuilderThis adds a put operation to clear and replace all attributes, including unmodeled ones. Partial update is not supported."},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/add-all/","title":"addAll - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/addAll</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/add-all/#addall","title":"addAll","text":"<p>[jvm]\\ fun addAll(builder: TransactionWriteSet.Builder)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/build/","title":"build - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/build</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TransactionWriteSet</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/check-condition/","title":"checkCondition - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/checkCondition</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/check-condition/#checkcondition","title":"checkCondition","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun checkCondition(key: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/delete/","title":"delete - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/delete</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/delete/#delete","title":"delete","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun delete(key: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/idempotency-token/","title":"idempotencyToken - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/idempotencyToken</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/idempotency-token/#idempotencytoken","title":"idempotencyToken","text":"<p>[jvm]\\ fun idempotencyToken(idempotencyToken: String): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/save/","title":"save - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/save</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/save/#save","title":"save","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun save(item: Any, expression: DynamoDBTransactionWriteExpression? = null): TransactionWriteSet.Builder</p> <p>This adds a put operation to clear and replace all attributes, including unmodeled ones. Partial update is not supported.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/size/","title":"size - Tempest","text":"<p>//tempest/app.cash.tempest/TransactionWriteSet/Builder/size</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-transaction-write-set/-builder/size/#size","title":"size","text":"<p>[jvm]\\ val size: Int</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/","title":"View - Tempest","text":"<p>//tempest/app.cash.tempest/View</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/#view","title":"View","text":"<p>interface View&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/#inheritors","title":"Inheritors","text":"LogicalTable InlineView"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open fun delete(item: I)open fun delete(item: I, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: I, ignoreVersionConstraints: Boolean)[jvm]abstract fun delete(item: I, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: K)open fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: K, ignoreVersionConstraints: Boolean)[jvm]abstract fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. load [jvm]open fun load(key: K): I?[jvm]abstract fun load(key: K, consistentReads: DynamoDBMapperConfig.ConsistentReads = ConsistentReads.EVENTUAL): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. save [jvm]open fun save(item: I): Iopen fun save(item: I, saveExpression: DynamoDBSaveExpression): Iopen fun save(item: I, ignoreVersionConstraints: Boolean): I[jvm]abstract fun save(item: I, saveExpression: DynamoDBSaveExpression? = null, ignoreVersionConstraints: Boolean = false): ISaves an item in DynamoDB and returns a new copy with locally updated attributes such as versions and auto-generated timestamps. The return value does not reflect the result of concurrent writes."},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/delete-key/","title":"deleteKey - Tempest","text":"<p>//tempest/app.cash.tempest/View/deleteKey</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/delete-key/#deletekey","title":"deleteKey","text":"<p>[jvm]\\ abstract fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)</p> <p>Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>If the item to be deleted has versioned attributes, load the item and use delete instead or use ignoreVersionConstraints to discard them.</p> <p>[jvm]\\ open fun deleteKey(key: K)</p> <p>open fun deleteKey(key: K, deleteExpression: DynamoDBDeleteExpression)</p> <p>open fun deleteKey(key: K, ignoreVersionConstraints: Boolean)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/delete/","title":"delete - Tempest","text":"<p>//tempest/app.cash.tempest/View/delete</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/delete/#delete","title":"delete","text":"<p>[jvm]\\ abstract fun delete(item: I, deleteExpression: DynamoDBDeleteExpression? = null, ignoreVersionConstraints: Boolean = false)</p> <p>Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>If ignoreVersionConstraints is true, version attributes will not be considered when deleting the object.</p> <p>[jvm]\\ open fun delete(item: I)</p> <p>open fun delete(item: I, deleteExpression: DynamoDBDeleteExpression)</p> <p>open fun delete(item: I, ignoreVersionConstraints: Boolean)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/load/","title":"load - Tempest","text":"<p>//tempest/app.cash.tempest/View/load</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/load/#load","title":"load","text":"<p>[jvm]\\ abstract fun load(key: K, consistentReads: DynamoDBMapperConfig.ConsistentReads = ConsistentReads.EVENTUAL): I?</p> <p>Returns an item whose keys match those of the prototype key object given, or null if no such item exists.</p> <p>[jvm]\\ open fun load(key: K): I?</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/save/","title":"save - Tempest","text":"<p>//tempest/app.cash.tempest/View/save</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-view/save/#save","title":"save","text":"<p>[jvm]\\ abstract fun save(item: I, saveExpression: DynamoDBSaveExpression? = null, ignoreVersionConstraints: Boolean = false): I</p> <p>Saves an item in DynamoDB and returns a new copy with locally updated attributes such as versions and auto-generated timestamps. The return value does not reflect the result of concurrent writes.</p> <p>This method uses DynamoDBMapperConfig.SaveBehavior.PUT to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES, is not supported yet.</p> <p>Any options specified in the saveExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>If ignoreVersionConstraints is true, version attributes will be discarded.</p> <p>[jvm]\\ open fun save(item: I): I</p> <p>open fun save(item: I, ignoreVersionConstraints: Boolean): I</p> <p>open fun save(item: I, saveExpression: DynamoDBSaveExpression): I</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/","title":"WorkerId - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/#workerid","title":"WorkerId","text":"<p>[jvm]\\ data class WorkerId(val segment: Int = 0, val totalSegments: Int = 1)</p> <p>By default, the Scan operation processes data sequentially. Amazon DynamoDB returns data to the application in 1 MB increments, and an application performs additional Scan operations to retrieve the next 1 MB of data.</p> <p>The larger the table or index being scanned, the more time the Scan takes to complete. In addition, a sequential Scan might not always be able to fully use the provisioned read throughput capacity: Even though DynamoDB distributes a large table\u2019s data across multiple physical partitions, a Scan operation can only read one partition at a time. For this reason, the throughput of a Scan is constrained by the maximum throughput of a single partition.</p> <p>To address these issues, the Scan operation can logically divide a table or secondary index into multiple segments, with multiple application workers scanning the segments in parallel. Each worker can be a thread (in programming languages that support multithreading) or an operating system process. To perform a parallel scan, each worker issues its own Scan request with an unique WorkerId.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/#constructors","title":"Constructors","text":"WorkerId [jvm]constructor(segment: Int = 0, totalSegments: Int = 1)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/#properties","title":"Properties","text":"Name Summary segment [jvm]val segment: Int = 0A segment to be scanned by a particular worker. Each worker should use a different value for Segment. totalSegments [jvm]val totalSegments: Int = 1The total number of segments for the parallel scan. This value must be the same as the number of workers that your application will use."},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-worker-id/","title":"WorkerId - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId/WorkerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-worker-id/#workerid","title":"WorkerId","text":"<p>[jvm]\\ constructor(segment: Int = 0, totalSegments: Int = 1)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/segment/","title":"segment - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId/segment</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/segment/#segment","title":"segment","text":"<p>[jvm]\\ val segment: Int = 0</p> <p>A segment to be scanned by a particular worker. Each worker should use a different value for Segment.</p> <p>Segments are zero-based, so the first number is always 0.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/total-segments/","title":"totalSegments - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId/totalSegments</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/total-segments/#totalsegments","title":"totalSegments","text":"<p>[jvm]\\ val totalSegments: Int = 1</p> <p>The total number of segments for the parallel scan. This value must be the same as the number of workers that your application will use.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-companion/","title":"Companion - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId/Companion</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-companion/#properties","title":"Properties","text":"Name Summary SEQUENTIAL [jvm]@JvmFieldval SEQUENTIAL: WorkerId"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-companion/-s-e-q-u-e-n-t-i-a-l/","title":"SEQUENTIAL - Tempest","text":"<p>//tempest/app.cash.tempest/WorkerId/Companion/SEQUENTIAL</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-worker-id/-companion/-s-e-q-u-e-n-t-i-a-l/#sequential","title":"SEQUENTIAL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val SEQUENTIAL: WorkerId</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/","title":"WritingPager - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/#writingpager","title":"WritingPager","text":"<p>[jvm]\\ class WritingPager&lt;T&gt;@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)</p> <p>A control flow abstraction for paging transactional writes.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/#constructors","title":"Constructors","text":"WritingPager [jvm]@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/#types","title":"Types","text":"Name Summary Handler [jvm]interface Handler&lt;T&gt;"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/#properties","title":"Properties","text":"Name Summary remainingUpdates [jvm]val remainingUpdates: List&lt;T&gt;A snapshot of the elements yet to be updated. updatedCount [jvm]var updatedCount: IntThe number of updates successfully applied."},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/#functions","title":"Functions","text":"Name Summary execute [jvm]fun execute()"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-writing-pager/","title":"WritingPager - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/WritingPager</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-writing-pager/#writingpager","title":"WritingPager","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/execute/","title":"execute - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/execute</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/execute/#execute","title":"execute","text":"<p>[jvm]\\ fun execute()</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/remaining-updates/","title":"remainingUpdates - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/remainingUpdates</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/remaining-updates/#remainingupdates","title":"remainingUpdates","text":"<p>[jvm]\\ val remainingUpdates: List&lt;T&gt;</p> <p>A snapshot of the elements yet to be updated.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/updated-count/","title":"updatedCount - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/updatedCount</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/updated-count/#updatedcount","title":"updatedCount","text":"<p>[jvm]\\ var updatedCount: Int</p> <p>The number of updates successfully applied.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/","title":"Handler - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/Handler</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/#handler","title":"Handler","text":"<p>[jvm]\\ interface Handler&lt;T&gt;</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/#functions","title":"Functions","text":"Name Summary beforePage [jvm]abstract fun beforePage(remainingUpdates: List&lt;@JvmSuppressWildcardsT&gt;, maxTransactionItems: Int): IntInvoked before each page with the full set of updates yet be processed. eachPage [jvm]abstract fun eachPage(proceed: () -&gt; Unit)Intercept each page\u2019s processing. Use this to decorate processing with metrics or retries. finishPage [jvm]abstract fun finishPage(builder: TransactionWriteSet.Builder)Invoked after a page of items has been computed. item [jvm]abstract fun item(builder: TransactionWriteSet.Builder, item: T)Invoked to update each item."},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/before-page/","title":"beforePage - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/Handler/beforePage</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/before-page/#beforepage","title":"beforePage","text":"<p>[jvm]\\ abstract fun beforePage(remainingUpdates: List&lt;@JvmSuppressWildcardsT&gt;, maxTransactionItems: Int): Int</p> <p>Invoked before each page with the full set of updates yet be processed.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/before-page/#return","title":"Return","text":"<p>the number of updates that fits in the current page.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/before-page/#parameters","title":"Parameters","text":"<p>jvm</p> remainingUpdates all remaining updates. This may be more than a single page of     entities."},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/each-page/","title":"eachPage - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/Handler/eachPage</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/each-page/#eachpage","title":"eachPage","text":"<p>[jvm]\\ abstract fun eachPage(proceed: () -&gt; Unit)</p> <p>Intercept each page\u2019s processing. Use this to decorate processing with metrics or retries.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/finish-page/","title":"finishPage - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/Handler/finishPage</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/finish-page/#finishpage","title":"finishPage","text":"<p>[jvm]\\ abstract fun finishPage(builder: TransactionWriteSet.Builder)</p> <p>Invoked after a page of items has been computed.</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/item/","title":"item - Tempest","text":"<p>//tempest/app.cash.tempest/WritingPager/Handler/item</p>"},{"location":"1.x/tempest/tempest/app.cash.tempest/-writing-pager/-handler/item/#item","title":"item","text":"<p>[jvm]\\ abstract fun item(builder: TransactionWriteSet.Builder, item: T)</p> <p>Invoked to update each item.</p>"},{"location":"1.x/tempest-docker/","title":"tempest-docker - Tempest","text":"<p>//tempest-docker</p>"},{"location":"1.x/tempest-docker/#tempest-docker","title":"tempest-docker","text":""},{"location":"1.x/tempest-docker/#packages","title":"Packages","text":"Name app.cash.tempest.docker"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/","title":"Package-level declarations - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/#types","title":"Types","text":"Name Summary DockerCredential [jvm]data class DockerCredential(@Json(name = \"Username\")val username: String?, @Json(name = \"Secret\")val password: String?) DockerCredentials [jvm]object DockerCredentialsA helper class for fetching docker credentials, necessary when pulling docker images."},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/#functions","title":"Functions","text":"Name Summary withLocalDockerCredentials [jvm]fun DefaultDockerClientConfig.Builder.withLocalDockerCredentials(registryUrl: String = DEFAULT_DOCKER_REGISTRY_URL): DefaultDockerClientConfig.Builder"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/with-local-docker-credentials/","title":"withLocalDockerCredentials - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/withLocalDockerCredentials</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/with-local-docker-credentials/#withlocaldockercredentials","title":"withLocalDockerCredentials","text":"<p>[jvm]\\ fun DefaultDockerClientConfig.Builder.withLocalDockerCredentials(registryUrl: String = DEFAULT_DOCKER_REGISTRY_URL): DefaultDockerClientConfig.Builder</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/","title":"DockerCredential - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredential</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/#dockercredential","title":"DockerCredential","text":"<p>[jvm]\\ data class DockerCredential(@Json(name = \"Username\")val username: String?, @Json(name = \"Secret\")val password: String?)</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/#constructors","title":"Constructors","text":"DockerCredential [jvm]constructor(@Json(name = \"Username\")username: String?, @Json(name = \"Secret\")password: String?)"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/#properties","title":"Properties","text":"Name Summary password [jvm]val password: String? username [jvm]val username: String?"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/-docker-credential/","title":"DockerCredential - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredential/DockerCredential</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/-docker-credential/#dockercredential","title":"DockerCredential","text":"<p>[jvm]\\ constructor(@Json(name = \"Username\")username: String?, @Json(name = \"Secret\")password: String?)</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/password/","title":"password - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredential/password</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/password/#password","title":"password","text":"<p>[jvm]\\ val password: String?</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/username/","title":"username - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredential/username</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credential/username/#username","title":"username","text":"<p>[jvm]\\ val username: String?</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/","title":"DockerCredentials - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredentials</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/#dockercredentials","title":"DockerCredentials","text":"<p>[jvm]\\ object DockerCredentials</p> <p>A helper class for fetching docker credentials, necessary when pulling docker images.</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/#properties","title":"Properties","text":"Name Summary DEFAULT_DOCKER_REGISTRY_URL [jvm]const val DEFAULT_DOCKER_REGISTRY_URL: String"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/#functions","title":"Functions","text":"Name Summary getDockerCredentials [jvm]fun getDockerCredentials(registryUrl: String?, fs: FileSystem = FileSystem.SYSTEM): DockerCredential?If Docker is configured to use a credential store (<code>credsStore</code>), attempts to fetch a docker registry username and password from the available credential store."},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/-d-e-f-a-u-l-t_-d-o-c-k-e-r_-r-e-g-i-s-t-r-y_-u-r-l/","title":"DEFAULT_DOCKER_REGISTRY_URL - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredentials/DEFAULT_DOCKER_REGISTRY_URL</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/-d-e-f-a-u-l-t_-d-o-c-k-e-r_-r-e-g-i-s-t-r-y_-u-r-l/#default_docker_registry_url","title":"DEFAULT_DOCKER_REGISTRY_URL","text":"<p>[jvm]\\ const val DEFAULT_DOCKER_REGISTRY_URL: String</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/get-docker-credentials/","title":"getDockerCredentials - Tempest","text":"<p>//tempest-docker/app.cash.tempest.docker/DockerCredentials/getDockerCredentials</p>"},{"location":"1.x/tempest-docker/tempest-docker/app.cash.tempest.docker/-docker-credentials/get-docker-credentials/#getdockercredentials","title":"getDockerCredentials","text":"<p>[jvm]\\ fun getDockerCredentials(registryUrl: String?, fs: FileSystem = FileSystem.SYSTEM): DockerCredential?</p> <p>If Docker is configured to use a credential store (<code>credsStore</code>), attempts to fetch a docker registry username and password from the available credential store.</p> <p>Loads $HOME/.docker/config.json, determines whether a <code>credsStore</code> is defined.</p> <p>If <code>credsStore</code> is defined, uses it to fetch a Docker registry username and password.</p> <p>If no <code>credsStore</code> is defined, returns null. This SHOULD handle the case where Docker Desktop is not running, e.g. in CI. If no registry is defined, defaults to https://index.docker.io/v1/.</p>"},{"location":"1.x/tempest-internal/","title":"tempest-internal - Tempest","text":"<p>//tempest-internal</p>"},{"location":"1.x/tempest-internal/#tempest-internal","title":"tempest-internal","text":""},{"location":"1.x/tempest-internal/#packages","title":"Packages","text":"Name app.cash.tempest.internal"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/","title":"Package-level declarations - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/#types","title":"Types","text":"Name Summary AttributeAnnotation [jvm]interface AttributeAnnotation&lt;T : Annotation&gt; ClassFactory [jvm]abstract class ClassFactory&lt;T&gt;Magic that creates instances of arbitrary concrete classes. Derived from Gson\u2019s UnsafeAllocator and ConstructorConstructor classes. ClassMember [jvm]data class ClassMember(val annotations: List&lt;Annotation&gt;, val returnType: KType, val javaMethod: Method) Codec [jvm]interface Codec&lt;A : Any, D : Any&gt;Converts values between the mutable <code>DynamoDBMapper</code> objects that defines the union of all key and value attributes, and specific Tempest values. ForIndexAnnotation [jvm]interface ForIndexAnnotation&lt;T : Annotation&gt; GetterMethodHandler [jvm]class GetterMethodHandler(value: Any?) : MethodHandler ItemType [jvm]data class ItemType(val codec: Codec&lt;Any, Any&gt;, val type: KClass&lt;&gt;, val rawItemType: KClass&lt;&gt;, val attributes: Map&lt;String, ItemType.Attribute&gt;, val primaryIndex: ItemType.PrimaryIndex, val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;) : LogicalType KeyType [jvm]data class KeyType(val codec: Codec&lt;Any, Any&gt;, val type: KClass&lt;&gt;, val itemType: KClass&lt;&gt;, val attributeNames: Set&lt;String&gt;, val hashKeyName: String, val rangeKeyName: String?, val secondaryIndexName: String?) : LogicalType LogicalType [jvm]sealed class LogicalType MapAttributeValue [jvm]interface MapAttributeValue&lt;T : Any, DB : Any&gt; MethodHandler [jvm]interface MethodHandler ProxyFactory [jvm]object ProxyFactory RawItemType [jvm]data class RawItemType(val type: KClass&lt;Any&gt;, val tableName: String, val hashKeyName: String, val rangeKeyName: String?, val propertyNames: List&lt;String&gt;, val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;) : LogicalType Schema [jvm]class Schema StringAttributeValue [jvm]interface StringAttributeValue&lt;T : Any&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/#properties","title":"Properties","text":"Name Summary declaredMembers [jvm]val KClass&lt;*&gt;.declaredMembers: List&lt;ClassMember&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/declared-members/","title":"declaredMembers - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/declaredMembers</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/declared-members/#declaredmembers","title":"declaredMembers","text":"<p>[jvm]\\ val KClass&lt;*&gt;.declaredMembers: List&lt;ClassMember&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/","title":"AttributeAnnotation - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/#attributeannotation","title":"AttributeAnnotation","text":"<p>[jvm]\\ interface AttributeAnnotation&lt;T : Annotation&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/#properties","title":"Properties","text":"Name Summary type [jvm]abstract val type: KClass&lt;T&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/#functions","title":"Functions","text":"Name Summary allowEmpty [jvm]abstract fun allowEmpty(annotation: T): Boolean name [jvm]abstract fun name(annotation: T): String names [jvm]abstract fun names(annotation: T): Array&lt;String&gt; prefix [jvm]abstract fun prefix(annotation: T): String"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/allow-empty/","title":"allowEmpty - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation/allowEmpty</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/allow-empty/#allowempty","title":"allowEmpty","text":"<p>[jvm]\\ abstract fun allowEmpty(annotation: T): Boolean</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/name/","title":"name - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation/name</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/name/#name","title":"name","text":"<p>[jvm]\\ abstract fun name(annotation: T): String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/names/","title":"names - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation/names</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/names/#names","title":"names","text":"<p>[jvm]\\ abstract fun names(annotation: T): Array&lt;String&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/prefix/","title":"prefix - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation/prefix</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ abstract fun prefix(annotation: T): String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/type/","title":"type - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/AttributeAnnotation/type</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-attribute-annotation/type/#type","title":"type","text":"<p>[jvm]\\ abstract val type: KClass&lt;T&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/","title":"ClassFactory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassFactory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/#classfactory","title":"ClassFactory","text":"<p>[jvm]\\ abstract class ClassFactory&lt;T&gt;</p> <p>Magic that creates instances of arbitrary concrete classes. Derived from Gson\u2019s UnsafeAllocator and ConstructorConstructor classes.</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/#author","title":"Author","text":"<p>Joel Leitch</p> <p>Jesse Wilson</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/#constructors","title":"Constructors","text":"ClassFactory [jvm]constructor()"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/#functions","title":"Functions","text":"Name Summary newInstance [jvm]abstract fun newInstance(): T"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-class-factory/","title":"ClassFactory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassFactory/ClassFactory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-class-factory/#classfactory","title":"ClassFactory","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/new-instance/","title":"newInstance - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassFactory/newInstance</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/new-instance/#newinstance","title":"newInstance","text":"<p>[jvm]\\ abstract fun newInstance(): T</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-companion/","title":"Companion - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassFactory/Companion</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun &lt;T&gt; create(rawType: Class&lt;*&gt;): ClassFactory&lt;T&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-companion/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassFactory/Companion/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-factory/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;T&gt; create(rawType: Class&lt;*&gt;): ClassFactory&lt;T&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/","title":"ClassMember - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassMember</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/#classmember","title":"ClassMember","text":"<p>[jvm]\\ data class ClassMember(val annotations: List&lt;Annotation&gt;, val returnType: KType, val javaMethod: Method)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/#constructors","title":"Constructors","text":"ClassMember [jvm]constructor(annotations: List&lt;Annotation&gt;, returnType: KType, javaMethod: Method)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/#properties","title":"Properties","text":"Name Summary annotations [jvm]val annotations: List&lt;Annotation&gt; javaMethod [jvm]val javaMethod: Method returnType [jvm]val returnType: KType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/-class-member/","title":"ClassMember - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassMember/ClassMember</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/-class-member/#classmember","title":"ClassMember","text":"<p>[jvm]\\ constructor(annotations: List&lt;Annotation&gt;, returnType: KType, javaMethod: Method)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/annotations/","title":"annotations - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassMember/annotations</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/annotations/#annotations","title":"annotations","text":"<p>[jvm]\\ val annotations: List&lt;Annotation&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/java-method/","title":"javaMethod - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassMember/javaMethod</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/java-method/#javamethod","title":"javaMethod","text":"<p>[jvm]\\ val javaMethod: Method</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/return-type/","title":"returnType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ClassMember/returnType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-class-member/return-type/#returntype","title":"returnType","text":"<p>[jvm]\\ val returnType: KType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/","title":"Codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/#codec","title":"Codec","text":"<p>[jvm]\\ interface Codec&lt;A : Any, D : Any&gt;</p> <p>Converts values between the mutable <code>DynamoDBMapper</code> objects that defines the union of all key and value attributes, and specific Tempest values.</p> <p>It is the caller\u2019s responsibility to check that the <code>DynamoDBMapper</code> instance can be safely converted to the target type. If it cannot be, the behavior of this codec is undefined.</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/#functions","title":"Functions","text":"Name Summary toApp [jvm]abstract fun toApp(dbItem: D): A toDb [jvm]abstract fun toDb(appItem: A): D"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/to-app/","title":"toApp - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Codec/toApp</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/to-app/#toapp","title":"toApp","text":"<p>[jvm]\\ abstract fun toApp(dbItem: D): A</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/to-db/","title":"toDb - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Codec/toDb</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-codec/to-db/#todb","title":"toDb","text":"<p>[jvm]\\ abstract fun toDb(appItem: A): D</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/","title":"ForIndexAnnotation - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ForIndexAnnotation</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/#forindexannotation","title":"ForIndexAnnotation","text":"<p>[jvm]\\ interface ForIndexAnnotation&lt;T : Annotation&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/#properties","title":"Properties","text":"Name Summary type [jvm]abstract val type: KClass&lt;T&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/#functions","title":"Functions","text":"Name Summary name [jvm]abstract fun name(annotation: T): String"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/name/","title":"name - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ForIndexAnnotation/name</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/name/#name","title":"name","text":"<p>[jvm]\\ abstract fun name(annotation: T): String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/type/","title":"type - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ForIndexAnnotation/type</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-for-index-annotation/type/#type","title":"type","text":"<p>[jvm]\\ abstract val type: KClass&lt;T&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/","title":"GetterMethodHandler - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/GetterMethodHandler</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/#gettermethodhandler","title":"GetterMethodHandler","text":"<p>[jvm]\\ class GetterMethodHandler(value: Any?) : MethodHandler</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/#constructors","title":"Constructors","text":"GetterMethodHandler [jvm]constructor(value: Any?)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/#functions","title":"Functions","text":"Name Summary invoke [jvm]open override fun invoke(args: Array&lt;out Any&gt;): Any?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/-getter-method-handler/","title":"GetterMethodHandler - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/GetterMethodHandler/GetterMethodHandler</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/-getter-method-handler/#gettermethodhandler","title":"GetterMethodHandler","text":"<p>[jvm]\\ constructor(value: Any?)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/invoke/","title":"invoke - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/GetterMethodHandler/invoke</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-getter-method-handler/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ open override fun invoke(args: Array&lt;out Any&gt;): Any?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/","title":"ItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/#itemtype","title":"ItemType","text":"<p>[jvm]\\ data class ItemType(val codec: Codec&lt;Any, Any&gt;, val type: KClass&lt;&gt;, val rawItemType: KClass&lt;&gt;, val attributes: Map&lt;String, ItemType.Attribute&gt;, val primaryIndex: ItemType.PrimaryIndex, val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;) : LogicalType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/#constructors","title":"Constructors","text":"ItemType [jvm]constructor(codec: Codec&lt;Any, Any&gt;, type: KClass&lt;&gt;, rawItemType: KClass&lt;&gt;, attributes: Map&lt;String, ItemType.Attribute&gt;, primaryIndex: ItemType.PrimaryIndex, secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/#types","title":"Types","text":"Name Summary Attribute [jvm]data class Attribute(val propertyName: String, val names: Set&lt;String&gt;, val prefix: String, val returnType: KType, val allowEmpty: Boolean) Factory [jvm]class Factory Index [jvm]interface Index PrimaryIndex [jvm]data class PrimaryIndex(val hashKeyName: String, val rangeKeyName: String?) : ItemType.Index SecondaryIndex [jvm]data class SecondaryIndex(val name: String, val hashKeyName: String, val rangeKeyName: String?) : ItemType.Index"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/#properties","title":"Properties","text":"Name Summary attributeNames [jvm]val attributeNames: Set&lt;String&gt; attributes [jvm]val attributes: Map&lt;String, ItemType.Attribute&gt; codec [jvm]open override val codec: Codec&lt;Any, Any&gt; primaryIndex [jvm]val primaryIndex: ItemType.PrimaryIndex rawItemType [jvm]val rawItemType: KClass&lt;*&gt; secondaryIndexes [jvm]val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt; type [jvm]val type: KClass&lt;*&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/#functions","title":"Functions","text":"Name Summary keyAttributes [jvm]fun keyAttributes(index: ItemType.Index): Set&lt;ItemType.Attribute&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-item-type/","title":"ItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/ItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-item-type/#itemtype","title":"ItemType","text":"<p>[jvm]\\ constructor(codec: Codec&lt;Any, Any&gt;, type: KClass&lt;&gt;, rawItemType: KClass&lt;&gt;, attributes: Map&lt;String, ItemType.Attribute&gt;, primaryIndex: ItemType.PrimaryIndex, secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/attribute-names/","title":"attributeNames - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/attributeNames</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/attribute-names/#attributenames","title":"attributeNames","text":"<p>[jvm]\\ val attributeNames: Set&lt;String&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/attributes/","title":"attributes - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/attributes</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/attributes/#attributes","title":"attributes","text":"<p>[jvm]\\ val attributes: Map&lt;String, ItemType.Attribute&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/codec/","title":"codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/codec/#codec","title":"codec","text":"<p>[jvm]\\ open override val codec: Codec&lt;Any, Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/key-attributes/","title":"keyAttributes - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/keyAttributes</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/key-attributes/#keyattributes","title":"keyAttributes","text":"<p>[jvm]\\ fun keyAttributes(index: ItemType.Index): Set&lt;ItemType.Attribute&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/primary-index/","title":"primaryIndex - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/primaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/primary-index/#primaryindex","title":"primaryIndex","text":"<p>[jvm]\\ val primaryIndex: ItemType.PrimaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/raw-item-type/","title":"rawItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/rawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/raw-item-type/#rawitemtype","title":"rawItemType","text":"<p>[jvm]\\ val rawItemType: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/secondary-indexes/","title":"secondaryIndexes - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/secondaryIndexes</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/secondary-indexes/#secondaryindexes","title":"secondaryIndexes","text":"<p>[jvm]\\ val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/type/","title":"type - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/type</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/type/#type","title":"type","text":"<p>[jvm]\\ val type: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/","title":"Attribute - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/#attribute","title":"Attribute","text":"<p>[jvm]\\ data class Attribute(val propertyName: String, val names: Set&lt;String&gt;, val prefix: String, val returnType: KType, val allowEmpty: Boolean)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/#constructors","title":"Constructors","text":"Attribute [jvm]constructor(propertyName: String, names: Set&lt;String&gt;, prefix: String, returnType: KType, allowEmpty: Boolean)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/#properties","title":"Properties","text":"Name Summary allowEmpty [jvm]val allowEmpty: Boolean names [jvm]val names: Set&lt;String&gt; prefix [jvm]val prefix: String propertyName [jvm]val propertyName: String returnType [jvm]val returnType: KType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/-attribute/","title":"Attribute - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/Attribute</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/-attribute/#attribute","title":"Attribute","text":"<p>[jvm]\\ constructor(propertyName: String, names: Set&lt;String&gt;, prefix: String, returnType: KType, allowEmpty: Boolean)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/allow-empty/","title":"allowEmpty - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/allowEmpty</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/allow-empty/#allowempty","title":"allowEmpty","text":"<p>[jvm]\\ val allowEmpty: Boolean</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/names/","title":"names - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/names</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/names/#names","title":"names","text":"<p>[jvm]\\ val names: Set&lt;String&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/prefix/","title":"prefix - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/prefix</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/property-name/","title":"propertyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/propertyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/property-name/#propertyname","title":"propertyName","text":"<p>[jvm]\\ val propertyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/return-type/","title":"returnType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Attribute/returnType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-attribute/return-type/#returntype","title":"returnType","text":"<p>[jvm]\\ val returnType: KType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-factory/","title":"Factory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ class Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(itemType: KClass&lt;*&gt;, rawItemType: RawItemType): ItemType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-factory/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Factory/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-factory/create/#create","title":"create","text":"<p>[jvm]\\ fun create(itemType: KClass&lt;*&gt;, rawItemType: RawItemType): ItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/","title":"Index - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Index</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/#index","title":"Index","text":"<p>interface Index</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/#inheritors","title":"Inheritors","text":"PrimaryIndex SecondaryIndex"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/#properties","title":"Properties","text":"Name Summary hashKeyName [jvm]abstract val hashKeyName: String rangeKeyName [jvm]abstract val rangeKeyName: String?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/hash-key-name/","title":"hashKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Index/hashKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/hash-key-name/#hashkeyname","title":"hashKeyName","text":"<p>[jvm]\\ abstract val hashKeyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/range-key-name/","title":"rangeKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/Index/rangeKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-index/range-key-name/#rangekeyname","title":"rangeKeyName","text":"<p>[jvm]\\ abstract val rangeKeyName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/","title":"PrimaryIndex - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/PrimaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/#primaryindex","title":"PrimaryIndex","text":"<p>[jvm]\\ data class PrimaryIndex(val hashKeyName: String, val rangeKeyName: String?) : ItemType.Index</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/#constructors","title":"Constructors","text":"PrimaryIndex [jvm]constructor(hashKeyName: String, rangeKeyName: String?)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/#properties","title":"Properties","text":"Name Summary hashKeyName [jvm]open override val hashKeyName: String rangeKeyName [jvm]open override val rangeKeyName: String?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/-primary-index/","title":"PrimaryIndex - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/PrimaryIndex/PrimaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/-primary-index/#primaryindex","title":"PrimaryIndex","text":"<p>[jvm]\\ constructor(hashKeyName: String, rangeKeyName: String?)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/hash-key-name/","title":"hashKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/PrimaryIndex/hashKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/hash-key-name/#hashkeyname","title":"hashKeyName","text":"<p>[jvm]\\ open override val hashKeyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/range-key-name/","title":"rangeKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/PrimaryIndex/rangeKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-primary-index/range-key-name/#rangekeyname","title":"rangeKeyName","text":"<p>[jvm]\\ open override val rangeKeyName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/","title":"SecondaryIndex - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/SecondaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/#secondaryindex","title":"SecondaryIndex","text":"<p>[jvm]\\ data class SecondaryIndex(val name: String, val hashKeyName: String, val rangeKeyName: String?) : ItemType.Index</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/#constructors","title":"Constructors","text":"SecondaryIndex [jvm]constructor(name: String, hashKeyName: String, rangeKeyName: String?)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/#properties","title":"Properties","text":"Name Summary hashKeyName [jvm]open override val hashKeyName: String name [jvm]val name: String rangeKeyName [jvm]open override val rangeKeyName: String?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/-secondary-index/","title":"SecondaryIndex - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/SecondaryIndex/SecondaryIndex</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/-secondary-index/#secondaryindex","title":"SecondaryIndex","text":"<p>[jvm]\\ constructor(name: String, hashKeyName: String, rangeKeyName: String?)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/hash-key-name/","title":"hashKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/SecondaryIndex/hashKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/hash-key-name/#hashkeyname","title":"hashKeyName","text":"<p>[jvm]\\ open override val hashKeyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/name/","title":"name - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/SecondaryIndex/name</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/range-key-name/","title":"rangeKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ItemType/SecondaryIndex/rangeKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-item-type/-secondary-index/range-key-name/#rangekeyname","title":"rangeKeyName","text":"<p>[jvm]\\ open override val rangeKeyName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/","title":"KeyType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/#keytype","title":"KeyType","text":"<p>[jvm]\\ data class KeyType(val codec: Codec&lt;Any, Any&gt;, val type: KClass&lt;&gt;, val itemType: KClass&lt;&gt;, val attributeNames: Set&lt;String&gt;, val hashKeyName: String, val rangeKeyName: String?, val secondaryIndexName: String?) : LogicalType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/#constructors","title":"Constructors","text":"KeyType [jvm]constructor(codec: Codec&lt;Any, Any&gt;, type: KClass&lt;&gt;, itemType: KClass&lt;&gt;, attributeNames: Set&lt;String&gt;, hashKeyName: String, rangeKeyName: String?, secondaryIndexName: String?)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/#types","title":"Types","text":"Name Summary Factory [jvm]class Factory"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/#properties","title":"Properties","text":"Name Summary attributeNames [jvm]val attributeNames: Set&lt;String&gt; codec [jvm]open override val codec: Codec&lt;Any, Any&gt; hashKeyName [jvm]val hashKeyName: String itemType [jvm]val itemType: KClass&lt;*&gt; rangeKeyName [jvm]val rangeKeyName: String? secondaryIndexName [jvm]val secondaryIndexName: String? type [jvm]val type: KClass&lt;*&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-key-type/","title":"KeyType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/KeyType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-key-type/#keytype","title":"KeyType","text":"<p>[jvm]\\ constructor(codec: Codec&lt;Any, Any&gt;, type: KClass&lt;&gt;, itemType: KClass&lt;&gt;, attributeNames: Set&lt;String&gt;, hashKeyName: String, rangeKeyName: String?, secondaryIndexName: String?)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/attribute-names/","title":"attributeNames - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/attributeNames</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/attribute-names/#attributenames","title":"attributeNames","text":"<p>[jvm]\\ val attributeNames: Set&lt;String&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/codec/","title":"codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/codec/#codec","title":"codec","text":"<p>[jvm]\\ open override val codec: Codec&lt;Any, Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/hash-key-name/","title":"hashKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/hashKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/hash-key-name/#hashkeyname","title":"hashKeyName","text":"<p>[jvm]\\ val hashKeyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/item-type/","title":"itemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/itemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/item-type/#itemtype","title":"itemType","text":"<p>[jvm]\\ val itemType: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/range-key-name/","title":"rangeKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/rangeKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/range-key-name/#rangekeyname","title":"rangeKeyName","text":"<p>[jvm]\\ val rangeKeyName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/secondary-index-name/","title":"secondaryIndexName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/secondaryIndexName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/secondary-index-name/#secondaryindexname","title":"secondaryIndexName","text":"<p>[jvm]\\ val secondaryIndexName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/type/","title":"type - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/type</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/type/#type","title":"type","text":"<p>[jvm]\\ val type: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-factory/","title":"Factory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ class Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(keyType: KClass&lt;*&gt;, itemType: ItemType, rawItemType: RawItemType): KeyType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-factory/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/KeyType/Factory/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-key-type/-factory/create/#create","title":"create","text":"<p>[jvm]\\ fun create(keyType: KClass&lt;*&gt;, itemType: ItemType, rawItemType: RawItemType): KeyType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/","title":"LogicalType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/LogicalType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/#logicaltype","title":"LogicalType","text":"<p>sealed class LogicalType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/#inheritors","title":"Inheritors","text":"KeyType ItemType RawItemType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/#properties","title":"Properties","text":"Name Summary codec [jvm]abstract val codec: Codec&lt;Any, Any&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/codec/","title":"codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/LogicalType/codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-logical-type/codec/#codec","title":"codec","text":"<p>[jvm]\\ abstract val codec: Codec&lt;Any, Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/","title":"MapAttributeValue - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MapAttributeValue</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/#mapattributevalue","title":"MapAttributeValue","text":"<p>[jvm]\\ interface MapAttributeValue&lt;T : Any, DB : Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/#functions","title":"Functions","text":"Name Summary toAttributeValues [jvm]abstract fun toAttributeValues(dbItem: DB): Map&lt;String, T&gt; toDb [jvm]abstract fun toDb(attributeValues: Map&lt;String, T&gt;): DB"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/to-attribute-values/","title":"toAttributeValues - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MapAttributeValue/toAttributeValues</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/to-attribute-values/#toattributevalues","title":"toAttributeValues","text":"<p>[jvm]\\ abstract fun toAttributeValues(dbItem: DB): Map&lt;String, T&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/to-db/","title":"toDb - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MapAttributeValue/toDb</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/to-db/#todb","title":"toDb","text":"<p>[jvm]\\ abstract fun toDb(attributeValues: Map&lt;String, T&gt;): DB</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/-factory/","title":"Factory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MapAttributeValue/Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ interface Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]abstract fun &lt;T : Any, DB : Any&gt; create(type: KClass&lt;DB&gt;): MapAttributeValue&lt;T, DB&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/-factory/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MapAttributeValue/Factory/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-map-attribute-value/-factory/create/#create","title":"create","text":"<p>[jvm]\\ abstract fun &lt;T : Any, DB : Any&gt; create(type: KClass&lt;DB&gt;): MapAttributeValue&lt;T, DB&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/","title":"MethodHandler - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MethodHandler</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/#methodhandler","title":"MethodHandler","text":"<p>interface MethodHandler</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/#inheritors","title":"Inheritors","text":"GetterMethodHandler"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/#functions","title":"Functions","text":"Name Summary invoke [jvm]abstract fun invoke(args: Array&lt;out Any&gt;): Any?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/invoke/","title":"invoke - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/MethodHandler/invoke</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-method-handler/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ abstract fun invoke(args: Array&lt;out Any&gt;): Any?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-proxy-factory/","title":"ProxyFactory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ProxyFactory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-proxy-factory/#proxyfactory","title":"ProxyFactory","text":"<p>[jvm]\\ object ProxyFactory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-proxy-factory/#functions","title":"Functions","text":"Name Summary create [jvm]fun &lt;T : Any&gt; create(type: KClass&lt;T&gt;, methodHandlers: Map&lt;Method, MethodHandler&gt;, instance: Any): T"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-proxy-factory/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/ProxyFactory/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-proxy-factory/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;T : Any&gt; create(type: KClass&lt;T&gt;, methodHandlers: Map&lt;Method, MethodHandler&gt;, instance: Any): T</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/","title":"RawItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/#rawitemtype","title":"RawItemType","text":"<p>[jvm]\\ data class RawItemType(val type: KClass&lt;Any&gt;, val tableName: String, val hashKeyName: String, val rangeKeyName: String?, val propertyNames: List&lt;String&gt;, val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;) : LogicalType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/#constructors","title":"Constructors","text":"RawItemType [jvm]constructor(type: KClass&lt;Any&gt;, tableName: String, hashKeyName: String, rangeKeyName: String?, propertyNames: List&lt;String&gt;, secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;)"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/#properties","title":"Properties","text":"Name Summary codec [jvm]open override val codec: Codec&lt;Any, Any&gt; hashKeyName [jvm]val hashKeyName: String propertyNames [jvm]val propertyNames: List&lt;String&gt; rangeKeyName [jvm]val rangeKeyName: String? secondaryIndexes [jvm]val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt; tableName [jvm]val tableName: String type [jvm]val type: KClass&lt;Any&gt;"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-raw-item-type/","title":"RawItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/RawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-raw-item-type/#rawitemtype","title":"RawItemType","text":"<p>[jvm]\\ constructor(type: KClass&lt;Any&gt;, tableName: String, hashKeyName: String, rangeKeyName: String?, propertyNames: List&lt;String&gt;, secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;)</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/codec/","title":"codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/codec/#codec","title":"codec","text":"<p>[jvm]\\ open override val codec: Codec&lt;Any, Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/hash-key-name/","title":"hashKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/hashKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/hash-key-name/#hashkeyname","title":"hashKeyName","text":"<p>[jvm]\\ val hashKeyName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/property-names/","title":"propertyNames - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/propertyNames</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/property-names/#propertynames","title":"propertyNames","text":"<p>[jvm]\\ val propertyNames: List&lt;String&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/range-key-name/","title":"rangeKeyName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/rangeKeyName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/range-key-name/#rangekeyname","title":"rangeKeyName","text":"<p>[jvm]\\ val rangeKeyName: String?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/secondary-indexes/","title":"secondaryIndexes - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/secondaryIndexes</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/secondary-indexes/#secondaryindexes","title":"secondaryIndexes","text":"<p>[jvm]\\ val secondaryIndexes: Map&lt;String, ItemType.SecondaryIndex&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/table-name/","title":"tableName - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/tableName</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/table-name/#tablename","title":"tableName","text":"<p>[jvm]\\ val tableName: String</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/type/","title":"type - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/type</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/type/#type","title":"type","text":"<p>[jvm]\\ val type: KClass&lt;Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-factory/","title":"Factory - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ interface Factory</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]abstract fun create(tableName: String, rawItemType: KClass&lt;*&gt;): RawItemType"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-factory/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/RawItemType/Factory/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-raw-item-type/-factory/create/#create","title":"create","text":"<p>[jvm]\\ abstract fun create(tableName: String, rawItemType: KClass&lt;*&gt;): RawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/","title":"Schema - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/#schema","title":"Schema","text":"<p>[jvm]\\ class Schema</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/#functions","title":"Functions","text":"Name Summary addItem [jvm]fun addItem(itemType: KClass&lt;&gt;, rawItemType: KClass&lt;&gt;): ItemType addKey [jvm]fun addKey(keyType: KClass&lt;&gt;, itemType: KClass&lt;&gt;): KeyType addRawItem [jvm]fun addRawItem(tableName: String, rawItemType: KClass&lt;*&gt;): RawItemType codec [jvm]fun &lt;T : Any, RI : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt; getItem [jvm]fun getItem(type: KClass&lt;*&gt;): ItemType? getKey [jvm]fun getKey(type: KClass&lt;*&gt;): KeyType? getRawItem [jvm]fun getRawItem(type: KClass&lt;*&gt;): RawItemType? resolveEnclosingItemType [jvm]fun resolveEnclosingItemType(type: KClass&lt;*&gt;): ItemType? resolveEnclosingRawItemType [jvm]fun resolveEnclosingRawItemType(type: KClass&lt;*&gt;): RawItemType?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-item/","title":"addItem - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/addItem</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-item/#additem","title":"addItem","text":"<p>[jvm]\\ fun addItem(itemType: KClass&lt;&gt;, rawItemType: KClass&lt;&gt;): ItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-key/","title":"addKey - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/addKey</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-key/#addkey","title":"addKey","text":"<p>[jvm]\\ fun addKey(keyType: KClass&lt;&gt;, itemType: KClass&lt;&gt;): KeyType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-raw-item/","title":"addRawItem - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/addRawItem</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/add-raw-item/#addrawitem","title":"addRawItem","text":"<p>[jvm]\\ fun addRawItem(tableName: String, rawItemType: KClass&lt;*&gt;): RawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/codec/","title":"codec - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/codec</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/codec/#codec","title":"codec","text":"<p>[jvm]\\ fun &lt;T : Any, RI : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-item/","title":"getItem - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/getItem</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-item/#getitem","title":"getItem","text":"<p>[jvm]\\ fun getItem(type: KClass&lt;*&gt;): ItemType?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-key/","title":"getKey - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/getKey</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-key/#getkey","title":"getKey","text":"<p>[jvm]\\ fun getKey(type: KClass&lt;*&gt;): KeyType?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-raw-item/","title":"getRawItem - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/getRawItem</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/get-raw-item/#getrawitem","title":"getRawItem","text":"<p>[jvm]\\ fun getRawItem(type: KClass&lt;*&gt;): RawItemType?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/resolve-enclosing-item-type/","title":"resolveEnclosingItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/resolveEnclosingItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/resolve-enclosing-item-type/#resolveenclosingitemtype","title":"resolveEnclosingItemType","text":"<p>[jvm]\\ fun resolveEnclosingItemType(type: KClass&lt;*&gt;): ItemType?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/resolve-enclosing-raw-item-type/","title":"resolveEnclosingRawItemType - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/resolveEnclosingRawItemType</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/resolve-enclosing-raw-item-type/#resolveenclosingrawitemtype","title":"resolveEnclosingRawItemType","text":"<p>[jvm]\\ fun resolveEnclosingRawItemType(type: KClass&lt;*&gt;): RawItemType?</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/-companion/","title":"Companion - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/Companion</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(stringAttributeValue: StringAttributeValue&lt;&gt;, mapAttributeValueFactory: MapAttributeValue.Factory, forIndexAnnotation: ForIndexAnnotation&lt;&gt;, attributeAnnotation: AttributeAnnotation&lt;*&gt;, rawItemTypeFactory: RawItemType.Factory): Schema"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/-companion/create/","title":"create - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/Schema/Companion/create</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-schema/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun create(stringAttributeValue: StringAttributeValue&lt;&gt;, mapAttributeValueFactory: MapAttributeValue.Factory, forIndexAnnotation: ForIndexAnnotation&lt;&gt;, attributeAnnotation: AttributeAnnotation&lt;*&gt;, rawItemTypeFactory: RawItemType.Factory): Schema</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/","title":"StringAttributeValue - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/StringAttributeValue</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/#stringattributevalue","title":"StringAttributeValue","text":"<p>[jvm]\\ interface StringAttributeValue&lt;T : Any&gt;</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/#functions","title":"Functions","text":"Name Summary toAttributeValue [jvm]abstract fun toAttributeValue(s: String): T toString [jvm]abstract fun toString(attributeValue: T): String?"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/to-attribute-value/","title":"toAttributeValue - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/StringAttributeValue/toAttributeValue</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/to-attribute-value/#toattributevalue","title":"toAttributeValue","text":"<p>[jvm]\\ abstract fun toAttributeValue(s: String): T</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/to-string/","title":"toString - Tempest","text":"<p>//tempest-internal/app.cash.tempest.internal/StringAttributeValue/toString</p>"},{"location":"1.x/tempest-internal/tempest-internal/app.cash.tempest.internal/-string-attribute-value/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ abstract fun toString(attributeValue: T): String?</p>"},{"location":"1.x/tempest-testing/","title":"tempest-testing - Tempest","text":"<p>//tempest-testing</p>"},{"location":"1.x/tempest-testing/#tempest-testing","title":"tempest-testing","text":""},{"location":"1.x/tempest-testing/#packages","title":"Packages","text":"Name app.cash.tempest.testing"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/#types","title":"Types","text":"Name Summary TestDynamoDbClient [jvm]interface TestDynamoDbClient : Service TestDynamoDbServer [jvm]interface TestDynamoDbServer : ServiceA DynamoDB test server running in-process or in a local Docker container. TestTable [jvm]data class TestTableUse this with TestDynamoDbClient to configure your DynamoDB tables for each test execution."},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/#functions","title":"Functions","text":"Name Summary logicalDb [jvm]inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(): DBinline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(mapperConfig: DynamoDBMapperConfig): DB"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/logical-db/","title":"logicalDb - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/logicalDb</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/logical-db/#logicaldb","title":"logicalDb","text":"<p>[jvm]\\ inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(): DB</p> <p>inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(mapperConfig: DynamoDBMapperConfig): DB</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/","title":"TestDynamoDbClient - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/#testdynamodbclient","title":"TestDynamoDbClient","text":"<p>[jvm]\\ interface TestDynamoDbClient : Service</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/#properties","title":"Properties","text":"Name Summary dynamoDb [jvm]abstract val dynamoDb: AmazonDynamoDBA DynamoDB instance that is usable while this service is running. dynamoDbStreams [jvm]abstract val dynamoDbStreams: AmazonDynamoDBStreamsA DynamoDB streams instance that is usable while this service is running. tables [jvm]abstract val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/#functions","title":"Functions","text":"Name Summary addListener [jvm]abstract fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]abstract fun awaitRunning()open fun awaitRunning(p0: Duration)abstract fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]abstract fun awaitTerminated()open fun awaitTerminated(p0: Duration)abstract fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]abstract fun failureCause(): Throwable isRunning [jvm]abstract fun isRunning(): Boolean logicalDb [jvm]open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB logicalDb [jvm]inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(): DBinline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(mapperConfig: DynamoDBMapperConfig): DB reset [jvm]abstract fun reset()Cleans up tables in between test runs. startAsync [jvm]@CanIgnoreReturnValueabstract fun startAsync(): Service state [jvm]abstract fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueabstract fun stopAsync(): Service"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/dynamo-db-streams/","title":"dynamoDbStreams - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient/dynamoDbStreams</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/dynamo-db-streams/#dynamodbstreams","title":"dynamoDbStreams","text":"<p>[jvm]\\ abstract val dynamoDbStreams: AmazonDynamoDBStreams</p> <p>A DynamoDB streams instance that is usable while this service is running.</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/dynamo-db/","title":"dynamoDb - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient/dynamoDb</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/dynamo-db/#dynamodb","title":"dynamoDb","text":"<p>[jvm]\\ abstract val dynamoDb: AmazonDynamoDB</p> <p>A DynamoDB instance that is usable while this service is running.</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/logical-db/","title":"logicalDb - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient/logicalDb</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/logical-db/#logicaldb","title":"logicalDb","text":"<p>[jvm]\\ open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/reset/","title":"reset - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient/reset</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/reset/#reset","title":"reset","text":"<p>[jvm]\\ abstract fun reset()</p> <p>Cleans up tables in between test runs.</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/tables/","title":"tables - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbClient/tables</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-client/tables/#tables","title":"tables","text":"<p>[jvm]\\ abstract val tables: List&lt;TestTable&gt;</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/","title":"TestDynamoDbServer - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbServer</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/#testdynamodbserver","title":"TestDynamoDbServer","text":"<p>[jvm]\\ interface TestDynamoDbServer : Service</p> <p>A DynamoDB test server running in-process or in a local Docker container.</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory&lt;T : TestDynamoDbServer&gt;"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]abstract val id: String port [jvm]abstract val port: Int"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]abstract fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]abstract fun awaitRunning()open fun awaitRunning(p0: Duration)abstract fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]abstract fun awaitTerminated()open fun awaitTerminated(p0: Duration)abstract fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]abstract fun failureCause(): Throwable isRunning [jvm]abstract fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueabstract fun startAsync(): Service state [jvm]abstract fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueabstract fun stopAsync(): Service"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbServer/id</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ abstract val id: String</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbServer/port</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ abstract val port: Int</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbServer/Factory</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ interface Factory&lt;T : TestDynamoDbServer&gt;</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open fun create(port: Int): Tabstract fun create(port: Int, onBeforeStartup: () -&gt; Unit): T"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open fun create(port: Int): T</p> <p>abstract fun create(port: Int, onBeforeStartup: () -&gt; Unit): T</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/","title":"TestTable - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestTable</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/#testtable","title":"TestTable","text":"<p>[jvm]\\ data class TestTable</p> <p>Use this with TestDynamoDbClient to configure your DynamoDB tables for each test execution.</p> <p>Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by <code>ProjectionType.ALL</code>.</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/#properties","title":"Properties","text":"Name Summary configureTable [jvm]val configureTable: (CreateTableRequest) -&gt; CreateTableRequest tableClass [jvm]val tableClass: KClass&lt;*&gt;"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/configure-table/","title":"configureTable - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestTable/configureTable</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/configure-table/#configuretable","title":"configureTable","text":"<p>[jvm]\\ val configureTable: (CreateTableRequest) -&gt; CreateTableRequest</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/table-class/","title":"tableClass - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestTable/tableClass</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/table-class/#tableclass","title":"tableClass","text":"<p>[jvm]\\ val tableClass: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/-companion/","title":"Companion - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestTable/Companion</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]inline fun &lt;T&gt; create(noinline configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTable@JvmStatic@JvmOverloadsfun create(tableClass: Class&lt;&gt;, configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTablefun create(tableClass: KClass&lt;&gt;, configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTable"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/-companion/create/","title":"create - Tempest","text":"<p>//tempest-testing/app.cash.tempest.testing/TestTable/Companion/create</p>"},{"location":"1.x/tempest-testing/tempest-testing/app.cash.tempest.testing/-test-table/-companion/create/#create","title":"create","text":"<p>[jvm]\\ inline fun &lt;T&gt; create(noinline configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTable</p> <p>fun create(tableClass: KClass&lt;*&gt;, configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTable</p> <p>@JvmStatic</p> <p>@JvmOverloads</p> <p>fun create(tableClass: Class&lt;*&gt;, configureTable: (CreateTableRequest) -&gt; CreateTableRequest = { it }): TestTable</p>"},{"location":"1.x/tempest-testing-docker/","title":"tempest-testing-docker - Tempest","text":"<p>//tempest-testing-docker</p>"},{"location":"1.x/tempest-testing-docker/#tempest-testing-docker","title":"tempest-testing-docker","text":""},{"location":"1.x/tempest-testing-docker/#packages","title":"Packages","text":"Name app.cash.tempest.testing"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/#types","title":"Types","text":"Name Summary Composer [jvm]class Composer(name: String, containers: Container)Composer composes many Containers together to use in a unit test. Container [jvm]data class Container(val createCmd: CreateContainerCmd.() -&gt; Unit, val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)A Container creates a Docker container for testing. DockerDynamoDbServer [jvm]class DockerDynamoDbServer : AbstractIdleService, TestDynamoDbServer"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/","title":"Composer - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Composer</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/#composer","title":"Composer","text":"<p>[jvm]\\ class Composer(name: String, containers: Container)</p> <p>Composer composes many Containers together to use in a unit test.</p> <p>The Containers are networked using a dedicated Docker network. Tests need to expose ports in order for the test to communicate with the containers over 127.0.0.1.</p> <p>The following example composes Kafka and Zookeeper containers for testing. Kafka is exposed to the jUnit test via 127.0.0.1:9102. In this example, Zookeeper is not exposed to the test.</p> <pre><code>    val zkContainer = Container {\n        withImage(\"confluentinc/cp-zookeeper\")\n        withName(\"zookeeper\")\n        withEnv(\"ZOOKEEPER_CLIENT_PORT=2181\")\n    }\n    val kafka = Container {\n        withImage(\"confluentinc/cp-kafka\")\n        withName(\"kafka\")\n        withExposedPorts(ExposedPort.tcp(port))\n        withPortBindings(Ports().apply {\n          bind(ExposedPort.tcp(9102), Ports.Binding.bindPort(9102))\n        })\n        withEnv(\n          \"KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\",\n          \"KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9102\")\n        }\n    val composer = Composer(\"e-kafka\", zkContainer, kafka)\n    composer.start()\n</code></pre>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/#constructors","title":"Constructors","text":"Composer [jvm]constructor(name: String, vararg containers: Container)"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/#properties","title":"Properties","text":"Name Summary running [jvm]val running: AtomicBoolean"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/#functions","title":"Functions","text":"Name Summary start [jvm]fun start() stop [jvm]fun stop()"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/-composer/","title":"Composer - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Composer/Composer</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/-composer/#composer","title":"Composer","text":"<p>[jvm]\\ constructor(name: String, vararg containers: Container)</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/running/","title":"running - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Composer/running</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/running/#running","title":"running","text":"<p>[jvm]\\ val running: AtomicBoolean</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/start/","title":"start - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Composer/start</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/start/#start","title":"start","text":"<p>[jvm]\\ fun start()</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/stop/","title":"stop - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Composer/stop</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-composer/stop/#stop","title":"stop","text":"<p>[jvm]\\ fun stop()</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/","title":"Container - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Container</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/#container","title":"Container","text":"<p>[jvm]\\ data class Container(val createCmd: CreateContainerCmd.() -&gt; Unit, val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)</p> <p>A Container creates a Docker container for testing.</p> <p>Tests provide a lambda to build a CreateContainerCmd. The createCmd lambda must set CreateContainerCmd.withName and CreateContainerCmd.withImage. All other fields are optional. The Composer takes care of setting up the network.</p> <p>There may be a need to configure your container between the creation and start steps. beforeStartHook provides you with an id to your container allowing you to manipulate as necessary before the command/entrypoint is invoked.</p> <p>See Composer for an example.</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/#constructors","title":"Constructors","text":"Container [jvm]constructor(createCmd: CreateContainerCmd.() -&gt; Unit)constructor(createCmd: CreateContainerCmd.() -&gt; Unit, beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/#properties","title":"Properties","text":"Name Summary beforeStartHook [jvm]val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit createCmd [jvm]val createCmd: CreateContainerCmd.() -&gt; Unit"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/-container/","title":"Container - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Container/Container</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/-container/#container","title":"Container","text":"<p>[jvm]\\ constructor(createCmd: CreateContainerCmd.() -&gt; Unit)</p> <p>constructor(createCmd: CreateContainerCmd.() -&gt; Unit, beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/before-start-hook/","title":"beforeStartHook - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Container/beforeStartHook</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/before-start-hook/#beforestarthook","title":"beforeStartHook","text":"<p>[jvm]\\ val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/create-cmd/","title":"createCmd - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/Container/createCmd</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-container/create-cmd/#createcmd","title":"createCmd","text":"<p>[jvm]\\ val createCmd: CreateContainerCmd.() -&gt; Unit</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/","title":"DockerDynamoDbServer - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/DockerDynamoDbServer</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/#dockerdynamodbserver","title":"DockerDynamoDbServer","text":"<p>[jvm]\\ class DockerDynamoDbServer : AbstractIdleService, TestDynamoDbServer</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]object Factory : TestDynamoDbServer.Factory&lt;DockerDynamoDbServer&gt;"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]open override val id: String port [jvm]open override val port: Int"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(listener: Service.Listener, executor: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(timeout: Duration)override fun awaitRunning(timeout: Long, unit: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(timeout: Duration)override fun awaitTerminated(timeout: Long, unit: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/DockerDynamoDbServer/id</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ open override val id: String</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/DockerDynamoDbServer/port</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ open override val port: Int</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/DockerDynamoDbServer/Factory</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ object Factory : TestDynamoDbServer.Factory&lt;DockerDynamoDbServer&gt;</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): DockerDynamoDbServeropen fun create(port: Int): DockerDynamoDbServer"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest-testing-docker/app.cash.tempest.testing/DockerDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest-testing-docker/tempest-testing-docker/app.cash.tempest.testing/-docker-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): DockerDynamoDbServer</p>"},{"location":"1.x/tempest-testing-internal/","title":"tempest-testing-internal - Tempest","text":"<p>//tempest-testing-internal</p>"},{"location":"1.x/tempest-testing-internal/#tempest-testing-internal","title":"tempest-testing-internal","text":""},{"location":"1.x/tempest-testing-internal/#packages","title":"Packages","text":"Name app.cash.tempest.testing.internal"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/#types","title":"Types","text":"Name Summary DefaultTestDynamoDbClient [jvm]class DefaultTestDynamoDbClient(val tables: List&lt;TestTable&gt;, port: Int) : AbstractIdleService, TestDynamoDbClient Tag [jvm]typealias Tag = Pair&lt;String, Any?&gt; TestDynamoDbService [jvm]class TestDynamoDbService : AbstractIdleServiceThis Guava service spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/#functions","title":"Functions","text":"Name Summary allocateRandomPort [jvm]fun allocateRandomPort(): ServerSocket buildDynamoDb [jvm]fun buildDynamoDb(host: String, port: Int): AmazonDynamoDB buildDynamoDbStreams [jvm]fun buildDynamoDbStreams(host: String, port: Int): AmazonDynamoDBStreams createTable [jvm]fun AmazonDynamoDB.createTable(table: TestTable) debug [jvm]fun KLogger.debug(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.debug(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) error [jvm]fun KLogger.error(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.error(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) getLogger [jvm]inline fun &lt;T&gt; getLogger(): KLogger hostName [jvm]fun hostName(port: Int): String info [jvm]fun KLogger.info(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.info(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) isServerListening [jvm]fun isServerListening(host: String, port: Int): Boolean log [jvm]fun KLogger.log(level: Level, vararg tags: Tag, message: () -&gt; Any?)fun KLogger.log(level: Level, th: Throwable, vararg tags: Tag, message: () -&gt; Any?) pickRandomPort [jvm]fun pickRandomPort(): Int warn [jvm]fun KLogger.warn(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.warn(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/allocate-random-port/","title":"allocateRandomPort - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/allocateRandomPort</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/allocate-random-port/#allocaterandomport","title":"allocateRandomPort","text":"<p>[jvm]\\ fun allocateRandomPort(): ServerSocket</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/build-dynamo-db-streams/","title":"buildDynamoDbStreams - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/buildDynamoDbStreams</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/build-dynamo-db-streams/#builddynamodbstreams","title":"buildDynamoDbStreams","text":"<p>[jvm]\\ fun buildDynamoDbStreams(host: String, port: Int): AmazonDynamoDBStreams</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/build-dynamo-db/","title":"buildDynamoDb - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/buildDynamoDb</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/build-dynamo-db/#builddynamodb","title":"buildDynamoDb","text":"<p>[jvm]\\ fun buildDynamoDb(host: String, port: Int): AmazonDynamoDB</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/create-table/","title":"createTable - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/createTable</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/create-table/#createtable","title":"createTable","text":"<p>[jvm]\\ fun AmazonDynamoDB.createTable(table: TestTable)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/debug/","title":"debug - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/debug</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/debug/#debug","title":"debug","text":"<p>[jvm]\\ fun KLogger.debug(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.debug(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/error/","title":"error - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/error</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/error/#error","title":"error","text":"<p>[jvm]\\ fun KLogger.error(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.error(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/get-logger/","title":"getLogger - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/getLogger</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/get-logger/#getlogger","title":"getLogger","text":"<p>[jvm]\\ inline fun &lt;T&gt; getLogger(): KLogger</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/host-name/","title":"hostName - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/hostName</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/host-name/#hostname","title":"hostName","text":"<p>[jvm]\\ fun hostName(port: Int): String</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/info/","title":"info - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/info</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/info/#info","title":"info","text":"<p>[jvm]\\ fun KLogger.info(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.info(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/is-server-listening/","title":"isServerListening - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/isServerListening</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/is-server-listening/#isserverlistening","title":"isServerListening","text":"<p>[jvm]\\ fun isServerListening(host: String, port: Int): Boolean</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/log/","title":"log - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/log</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/log/#log","title":"log","text":"<p>[jvm]\\ fun KLogger.log(level: Level, vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.log(level: Level, th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/pick-random-port/","title":"pickRandomPort - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/pickRandomPort</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/pick-random-port/#pickrandomport","title":"pickRandomPort","text":"<p>[jvm]\\ fun pickRandomPort(): Int</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/warn/","title":"warn - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/warn</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/warn/#warn","title":"warn","text":"<p>[jvm]\\ fun KLogger.warn(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.warn(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/","title":"DefaultTestDynamoDbClient - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/#defaulttestdynamodbclient","title":"DefaultTestDynamoDbClient","text":"<p>[jvm]\\ class DefaultTestDynamoDbClient(val tables: List&lt;TestTable&gt;, port: Int) : AbstractIdleService, TestDynamoDbClient</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/#constructors","title":"Constructors","text":"DefaultTestDynamoDbClient [jvm]constructor(tables: List&lt;TestTable&gt;, port: Int)"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/#properties","title":"Properties","text":"Name Summary dynamoDb [jvm]open override val dynamoDb: AmazonDynamoDB dynamoDbStreams [jvm]open override val dynamoDbStreams: AmazonDynamoDBStreams tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean logicalDb [jvm]open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/-default-test-dynamo-db-client/","title":"DefaultTestDynamoDbClient - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient/DefaultTestDynamoDbClient</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/-default-test-dynamo-db-client/#defaulttestdynamodbclient","title":"DefaultTestDynamoDbClient","text":"<p>[jvm]\\ constructor(tables: List&lt;TestTable&gt;, port: Int)</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/dynamo-db-streams/","title":"dynamoDbStreams - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient/dynamoDbStreams</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/dynamo-db-streams/#dynamodbstreams","title":"dynamoDbStreams","text":"<p>[jvm]\\ open override val dynamoDbStreams: AmazonDynamoDBStreams</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/dynamo-db/","title":"dynamoDb - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient/dynamoDb</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/dynamo-db/#dynamodb","title":"dynamoDb","text":"<p>[jvm]\\ open override val dynamoDb: AmazonDynamoDB</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/reset/","title":"reset - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient/reset</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/reset/#reset","title":"reset","text":"<p>[jvm]\\ open override fun reset()</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/tables/","title":"tables - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/DefaultTestDynamoDbClient/tables</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-default-test-dynamo-db-client/tables/#tables","title":"tables","text":"<p>[jvm]\\ open override val tables: List&lt;TestTable&gt;</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-tag/","title":"Tag - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/Tag</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-tag/#tag","title":"Tag","text":"<p>[jvm]\\ typealias Tag = Pair&lt;String, Any?&gt;</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/","title":"TestDynamoDbService - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/TestDynamoDbService</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/#testdynamodbservice","title":"TestDynamoDbService","text":"<p>[jvm]\\ class TestDynamoDbService : AbstractIdleService</p> <p>This Guava service spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/#properties","title":"Properties","text":"Name Summary client [jvm]val client: TestDynamoDbClient server [jvm]val server: TestDynamoDbServer"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/client/","title":"client - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/TestDynamoDbService/client</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/client/#client","title":"client","text":"<p>[jvm]\\ val client: TestDynamoDbClient</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/server/","title":"server - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/TestDynamoDbService/server</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/server/#server","title":"server","text":"<p>[jvm]\\ val server: TestDynamoDbServer</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/-companion/","title":"Companion - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/TestDynamoDbService/Companion</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun create(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;, tables: List&lt;TestTable&gt;, port: Int? = null): TestDynamoDbService"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/-companion/create/","title":"create - Tempest","text":"<p>//tempest-testing-internal/app.cash.tempest.testing.internal/TestDynamoDbService/Companion/create</p>"},{"location":"1.x/tempest-testing-internal/tempest-testing-internal/app.cash.tempest.testing.internal/-test-dynamo-db-service/-companion/create/#create","title":"create","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun create(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;, tables: List&lt;TestTable&gt;, port: Int? = null): TestDynamoDbService</p>"},{"location":"1.x/tempest-testing-junit4/","title":"tempest-testing-junit4 - Tempest","text":"<p>//tempest-testing-junit4</p>"},{"location":"1.x/tempest-testing-junit4/#tempest-testing-junit4","title":"tempest-testing-junit4","text":""},{"location":"1.x/tempest-testing-junit4/#packages","title":"Packages","text":"Name app.cash.tempest.testing"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/#types","title":"Types","text":"Name Summary TestDynamoDb [jvm]class TestDynamoDb : ExternalResource, TestDynamoDbClientThis JUnit rule spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/","title":"TestDynamoDb - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/#testdynamodb","title":"TestDynamoDb","text":"<p>[jvm]\\ class TestDynamoDb : ExternalResource, TestDynamoDbClient</p> <p>This JUnit rule spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/#properties","title":"Properties","text":"Name Summary dynamoDb [jvm]open override val dynamoDb: AmazonDynamoDB dynamoDbStreams [jvm]open override val dynamoDbStreams: AmazonDynamoDBStreams tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/#functions","title":"Functions","text":"Name Summary addListener [jvm]open override fun addListener(p0: Service.Listener, p1: Executor) apply [jvm]open override fun apply(p0: Statement, p1: Description): Statement awaitRunning [jvm]open override fun awaitRunning()open fun awaitRunning(p0: Duration)open override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]open override fun awaitTerminated()open fun awaitTerminated(p0: Duration)open override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]open override fun failureCause(): Throwable isRunning [jvm]open override fun isRunning(): Boolean logicalDb [jvm]open override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueopen override fun startAsync(): Service state [jvm]open override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueopen override fun stopAsync(): Service"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/","title":"Builder - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/#functions","title":"Functions","text":"Name Summary addTable [jvm]fun addTable(table: TestTable): TestDynamoDb.Builder addTables [jvm]fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder build [jvm]fun build(): TestDynamoDb port [jvm]fun port(port: Int): TestDynamoDb.Builder"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder/Builder</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/add-table/","title":"addTable - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder/addTable</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/add-table/#addtable","title":"addTable","text":"<p>[jvm]\\ fun addTable(table: TestTable): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/add-tables/","title":"addTables - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder/addTables</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/add-tables/#addtables","title":"addTables","text":"<p>[jvm]\\ fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/build/","title":"build - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder/build</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TestDynamoDb</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/port/","title":"port - Tempest","text":"<p>//tempest-testing-junit4/app.cash.tempest.testing/TestDynamoDb/Builder/port</p>"},{"location":"1.x/tempest-testing-junit4/tempest-testing-junit4/app.cash.tempest.testing/-test-dynamo-db/-builder/port/#port","title":"port","text":"<p>[jvm]\\ fun port(port: Int): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-junit5/","title":"tempest-testing-junit5 - Tempest","text":"<p>//tempest-testing-junit5</p>"},{"location":"1.x/tempest-testing-junit5/#tempest-testing-junit5","title":"tempest-testing-junit5","text":""},{"location":"1.x/tempest-testing-junit5/#packages","title":"Packages","text":"Name app.cash.tempest.testing"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/#types","title":"Types","text":"Name Summary TestDynamoDb [jvm]class TestDynamoDb : TestDynamoDbClient, BeforeEachCallback, AfterEachCallbackThis JUnit extension spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/","title":"TestDynamoDb - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/#testdynamodb","title":"TestDynamoDb","text":"<p>[jvm]\\ class TestDynamoDb : TestDynamoDbClient, BeforeEachCallback, AfterEachCallback</p> <p>This JUnit extension spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/#properties","title":"Properties","text":"Name Summary dynamoDb [jvm]open override val dynamoDb: AmazonDynamoDB dynamoDbStreams [jvm]open override val dynamoDbStreams: AmazonDynamoDBStreams tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/#functions","title":"Functions","text":"Name Summary addListener [jvm]open override fun addListener(p0: Service.Listener, p1: Executor) afterEach [jvm]open override fun afterEach(context: ExtensionContext?) awaitRunning [jvm]open override fun awaitRunning()open fun awaitRunning(p0: Duration)open override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]open override fun awaitTerminated()open fun awaitTerminated(p0: Duration)open override fun awaitTerminated(p0: Long, p1: TimeUnit) beforeEach [jvm]open override fun beforeEach(context: ExtensionContext) failureCause [jvm]open override fun failureCause(): Throwable isRunning [jvm]open override fun isRunning(): Boolean logicalDb [jvm]open override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, mapperConfig: DynamoDBMapperConfig): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueopen override fun startAsync(): Service state [jvm]open override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueopen override fun stopAsync(): Service"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/after-each/","title":"afterEach - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/afterEach</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/after-each/#aftereach","title":"afterEach","text":"<p>[jvm]\\ open override fun afterEach(context: ExtensionContext?)</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/before-each/","title":"beforeEach - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/beforeEach</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/before-each/#beforeeach","title":"beforeEach","text":"<p>[jvm]\\ open override fun beforeEach(context: ExtensionContext)</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/","title":"Builder - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/#functions","title":"Functions","text":"Name Summary addTable [jvm]fun addTable(table: TestTable): TestDynamoDb.Builder addTables [jvm]fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder build [jvm]fun build(): TestDynamoDb port [jvm]fun port(port: Int): TestDynamoDb.Builder"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder/Builder</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/add-table/","title":"addTable - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder/addTable</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/add-table/#addtable","title":"addTable","text":"<p>[jvm]\\ fun addTable(table: TestTable): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/add-tables/","title":"addTables - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder/addTables</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/add-tables/#addtables","title":"addTables","text":"<p>[jvm]\\ fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/build/","title":"build - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder/build</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TestDynamoDb</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/port/","title":"port - Tempest","text":"<p>//tempest-testing-junit5/app.cash.tempest.testing/TestDynamoDb/Builder/port</p>"},{"location":"1.x/tempest-testing-junit5/tempest-testing-junit5/app.cash.tempest.testing/-test-dynamo-db/-builder/port/#port","title":"port","text":"<p>[jvm]\\ fun port(port: Int): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest-testing-jvm/","title":"tempest-testing-jvm - Tempest","text":"<p>//tempest-testing-jvm</p>"},{"location":"1.x/tempest-testing-jvm/#tempest-testing-jvm","title":"tempest-testing-jvm","text":""},{"location":"1.x/tempest-testing-jvm/#packages","title":"Packages","text":"Name app.cash.tempest.testing"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/#types","title":"Types","text":"Name Summary JvmDynamoDbServer [jvm]class JvmDynamoDbServer : AbstractIdleService, TestDynamoDbServer"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/","title":"JvmDynamoDbServer - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing/JvmDynamoDbServer</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/#jvmdynamodbserver","title":"JvmDynamoDbServer","text":"<p>[jvm]\\ class JvmDynamoDbServer : AbstractIdleService, TestDynamoDbServer</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]object Factory : TestDynamoDbServer.Factory&lt;JvmDynamoDbServer&gt;"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]open override val id: String port [jvm]open override val port: Int"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing/JvmDynamoDbServer/id</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ open override val id: String</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing/JvmDynamoDbServer/port</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ open override val port: Int</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing/JvmDynamoDbServer/Factory</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ object Factory : TestDynamoDbServer.Factory&lt;JvmDynamoDbServer&gt;</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): JvmDynamoDbServeropen fun create(port: Int): JvmDynamoDbServer"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest-testing-jvm/app.cash.tempest.testing/JvmDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest-testing-jvm/tempest-testing-jvm/app.cash.tempest.testing/-jvm-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): JvmDynamoDbServer</p>"},{"location":"1.x/tempest2/","title":"tempest2 - Tempest","text":"<p>//tempest2</p>"},{"location":"1.x/tempest2/#tempest2","title":"tempest2","text":""},{"location":"1.x/tempest2/#packages","title":"Packages","text":"Name app.cash.tempest2 app.cash.tempest2.extensions app.cash.tempest2.internal"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/","title":"Package-level declarations - Tempest","text":"<p>//tempest2/app.cash.tempest2</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/#types","title":"Types","text":"Name Summary AsyncInlineView [jvm]interface AsyncInlineView&lt;K : Any, I : Any&gt; : AsyncView&lt;K, I&gt; , AsyncScannable&lt;K, I&gt; , AsyncQueryable&lt;K, I&gt; AsyncLogicalDb [jvm]interface AsyncLogicalDb : AsyncLogicalTable.FactoryA collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types. AsyncLogicalTable [jvm]interface AsyncLogicalTable&lt;RI : Any&gt; : AsyncView&lt;RI, RI&gt; , AsyncInlineView.Factory, AsyncSecondaryIndex.FactoryA collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes. AsyncQueryable [jvm]interface AsyncQueryable&lt;K : Any, I : Any&gt; AsyncScannable [jvm]interface AsyncScannable&lt;K : Any, I : Any&gt; AsyncSecondaryIndex [jvm]interface AsyncSecondaryIndex&lt;K : Any, I : Any&gt; : AsyncScannable&lt;K, I&gt; , AsyncQueryable&lt;K, I&gt; AsyncView [jvm]interface AsyncView&lt;K : Any, I : Any&gt; Attribute [jvm]@Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FIELD])annotation class Attribute(val name: String = \"\", val names: Array&lt;String&gt; = [], val prefix: String = \"\", val allowEmpty: Boolean = false)Maps an item class property to one or more attributes in a DynamoDB table. BatchWriteResult [jvm]data class BatchWriteResult(val unprocessedClobbers: List&lt;Key&gt;, val unprocessedDeletes: List&lt;Key&gt;)It contains information about the unprocessed items and the exception causing the failure. BatchWriteSet [jvm]data class BatchWriteSet(val itemsToClobber: ItemSet, val keysToDelete: KeySet)A write that the client sends to the DynamoDb service. BeginsWith [jvm]data class BeginsWith&lt;K&gt;(val prefix: K) : KeyCondition&lt;K&gt; Applies equality condition on the hash key and the following condition on the range key Between [jvm]data class Between&lt;K&gt;(val startInclusive: K, val endInclusive: K) : KeyCondition&lt;K&gt; Applies equality condition on the hash key and the following condition on the range key Codec [jvm]interface Codec&lt;A : Any, D : Any&gt;Converts values between the mutable <code>DynamoDbBean</code> objects that defines the union of all key and value attributes, and specific Tempest values. ForIndex [jvm]@Target(allowedTargets = [AnnotationTarget.CLASS])annotation class ForIndex(val name: String = \"\")Maps an key class to a global or local secondary index in a DynamoDB table. InlineView [jvm]interface InlineView&lt;K : Any, I : Any&gt; : View&lt;K, I&gt; , Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt; ItemSet [jvm]class ItemSet : Set&lt;Any&gt; A collection of items across tables. KeyCondition [jvm]sealed class KeyCondition&lt;K&gt;Used to query a table or an index. KeySet [jvm]class KeySet : Set&lt;Any&gt; A collection of keys or items across tables. LogicalDb [jvm]interface LogicalDb : LogicalTable.FactoryA collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types. LogicalTable [jvm]interface LogicalTable&lt;RI : Any&gt; : View&lt;RI, RI&gt; , InlineView.Factory, SecondaryIndex.FactoryA collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes. Offset [jvm]data class Offset&lt;K&gt;(val key: K) Page [jvm]data class Page&lt;K, T&gt; Queryable [jvm]interface Queryable&lt;K : Any, I : Any&gt; QueryConfig [jvm]data class QueryConfig ScanConfig [jvm]data class ScanConfig Scannable [jvm]interface Scannable&lt;K : Any, I : Any&gt; SecondaryIndex [jvm]interface SecondaryIndex&lt;K : Any, I : Any&gt; : Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt; TableName [jvm]@Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FUNCTION])annotation class TableName(val value: String = \"\")Maps an DB class property to a DynamoDB table. TableNameResolver [jvm]interface TableNameResolverResolves the table name for a given LogicalTable class. TransactionWriteSet [jvm]data class TransactionWriteSet(val itemsToSave: ItemSet, val keysToDelete: KeySet, val keysToCheck: KeySet, val writeExpressions: Map&lt;Any, Expression&gt;, val idempotencyToken: String?) View [jvm]interface View&lt;K : Any, I : Any&gt; WorkerId [jvm]data class WorkerId(val segment: Int, val totalSegments: Int)In the context of parallel scans, a worker is analogous to a thread or an operating system process. Each worker then issues its own Scan request with a unique WorkerId, which represents a tuple of <code>segment</code> and <code>totalSegments</code>. WritingPager [jvm]class WritingPager&lt;T&gt;@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)A control flow abstraction for paging transactional writes."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/#functions","title":"Functions","text":"Name Summary transactionWritingPager [jvm]fun &lt;DB : LogicalDb, T&gt; DB.transactionWritingPager(items: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;): WritingPager&lt;T&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/transaction-writing-pager/","title":"transactionWritingPager - Tempest","text":"<p>//tempest2/app.cash.tempest2/transactionWritingPager</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/transaction-writing-pager/#transactionwritingpager","title":"transactionWritingPager","text":"<p>[jvm]\\ fun &lt;DB : LogicalDb, T&gt; DB.transactionWritingPager(items: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;): WritingPager&lt;T&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/","title":"AsyncInlineView - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncInlineView</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/#asyncinlineview","title":"AsyncInlineView","text":"<p>[jvm]\\ interface AsyncInlineView&lt;K : Any, I : Any&gt; : AsyncView&lt;K, I&gt; , AsyncScannable&lt;K, I&gt; , AsyncQueryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open suspend fun delete(item: I, deleteExpression: Expression? = null): I?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteAsync [jvm]open fun deleteAsync(item: I): CompletableFuture&lt;I?&gt;abstract fun deleteAsync(item: I, deleteExpression: Expression?): CompletableFuture&lt;I?&gt; deleteKey [jvm]open suspend fun deleteKey(key: K, deleteExpression: Expression? = null): I?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKeyAsync [jvm]open fun deleteKeyAsync(key: K): CompletableFuture&lt;I?&gt;abstract fun deleteKeyAsync(key: K, deleteExpression: Expression?): CompletableFuture&lt;I?&gt; load [jvm]open suspend fun load(key: K, consistentReads: Boolean = false): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists.[jvm]open suspend fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt; loadAsync [jvm]open fun loadAsync(key: K): CompletableFuture&lt;I?&gt;abstract fun loadAsync(key: K, consistentReads: Boolean): CompletableFuture&lt;I?&gt;abstract fun loadAsync(key: K, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;I?, ConsumedCapacity?&gt;&gt; query [jvm]open suspend fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAsync [jvm]open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean, pageSize: Int, consistentRead: Boolean, filterExpression: Expression?, initialOffset: Offset&lt;K&gt;?, returnConsumedCapacity: ReturnConsumedCapacity?): Publisher&lt;Page&lt;K, I&gt;&gt; save [jvm]open suspend fun save(item: I, saveExpression: Expression? = null): VoidSaves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveAsync [jvm]open fun saveAsync(item: I): CompletableFuture&lt;Void&gt;abstract fun saveAsync(item: I, saveExpression: Expression?): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]open fun saveAsyncWithResult(item: I): CompletableFuture&lt;I&gt;abstract fun saveAsyncWithResult(item: I, saveExpression: Expression?): CompletableFuture&lt;I&gt; saveWithResult [jvm]open suspend fun saveWithResult(item: I, saveExpression: Expression? = null): IThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last! scan [jvm]open suspend fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAsync [jvm]open fun scanAsync(): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun scanAsync(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Publisher&lt;Page&lt;K, I&gt;&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncInlineView/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/#inheritors","title":"Inheritors","text":"AsyncLogicalTable"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/#functions","title":"Functions","text":"Name Summary inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/inline-view/","title":"inlineView - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncInlineView/Factory/inlineView</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-inline-view/-factory/inline-view/#inlineview","title":"inlineView","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/","title":"AsyncLogicalDb - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/#asynclogicaldb","title":"AsyncLogicalDb","text":"<p>[jvm]\\ interface AsyncLogicalDb : AsyncLogicalTable.Factory</p> <p>A collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open suspend fun batchLoad(vararg keys: Any, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ): ItemSetopen suspend fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ): ItemSet[jvm]open suspend fun batchLoad(keys: KeySet, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSetRetrieves multiple items from multiple tables using their primary keys. batchLoadAsync [jvm]open fun batchLoadAsync(keys: Iterable&lt;Any&gt;): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(vararg keys: Any, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;open fun batchLoadAsync(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;abstract fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt; batchWrite [jvm]@CheckReturnValueopen suspend fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): BatchWriteResultSaves and deletes the objects given using one or more calls to the DynamoDbClient.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed. batchWriteAsync [jvm]abstract fun batchWriteAsync(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): CompletableFuture&lt;BatchWriteResult&gt; logicalTable [jvm]abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]open suspend fun transactionLoad(keys: KeySet): ItemSetTransactionally loads objects specified by transactionLoadRequest by calling DynamoDbClient.transactGetItems API.[jvm]open suspend fun transactionLoad(vararg keys: Any): ItemSetopen suspend fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionLoadAsync [jvm]abstract fun transactionLoadAsync(keys: KeySet): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(vararg keys: Any): CompletableFuture&lt;ItemSet&gt;open fun transactionLoadAsync(keys: Iterable&lt;Any&gt;): CompletableFuture&lt;ItemSet&gt; transactionWrite [jvm]open suspend fun transactionWrite(writeSet: TransactionWriteSet)Transactionally writes objects specified by transactionWriteRequest by calling DynamoDbClient.transactWriteItems API. transactionWriteAsync [jvm]abstract fun transactionWriteAsync(writeSet: TransactionWriteSet): CompletableFuture&lt;Void&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-load-async/","title":"batchLoadAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/batchLoadAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-load-async/#batchloadasync","title":"batchLoadAsync","text":"<p>[jvm]\\ abstract fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;</p> <p>open fun batchLoadAsync(keys: KeySet, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;</p> <p>open fun batchLoadAsync(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;</p> <p>open fun batchLoadAsync(vararg keys: Any, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): Publisher&lt;ItemSet&gt;</p> <p>open fun batchLoadAsync(keys: Iterable&lt;Any&gt;): Publisher&lt;ItemSet&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-load/","title":"batchLoad - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/batchLoad</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-load/#batchload","title":"batchLoad","text":"<p>[jvm]\\ open suspend fun batchLoad(keys: KeySet, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSet</p> <p>Retrieves multiple items from multiple tables using their primary keys.</p> <p>This method performs one or more calls to the DynamoDbClient.batchGetItem API.</p> <p>A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. BatchGetItem returns a partial result if the response size limit is exceeded, the table\u2019s provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, this method backs off and retries the <code>UnprocessedKeys</code> in the next API call.</p> <p>[jvm]\\ open suspend fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ): ItemSet</p> <p>open suspend fun batchLoad(vararg keys: Any, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ): ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-write-async/","title":"batchWriteAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/batchWriteAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-write-async/#batchwriteasync","title":"batchWriteAsync","text":"<p>[jvm]\\ abstract fun batchWriteAsync(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): CompletableFuture&lt;BatchWriteResult&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-write/","title":"batchWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/batchWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/batch-write/#batchwrite","title":"batchWrite","text":"<p>[jvm]\\</p> <p>@CheckReturnValue</p> <p>open suspend fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): BatchWriteResult</p> <p>Saves and deletes the objects given using one or more calls to the DynamoDbClient.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed.</p> <p>This method does not support versioning annotations and behaves like DynamoDbClient.putItem.</p> <p>A single call to BatchWriteItem can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.</p> <p>In order to improve performance with these large-scale operations, this does not behave in the same way as individual PutItem and DeleteItem calls would. For example, you cannot specify conditions on individual put and delete requests, and BatchWriteItem does not return deleted items in the response.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-load-async/","title":"transactionLoadAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/transactionLoadAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-load-async/#transactionloadasync","title":"transactionLoadAsync","text":"<p>[jvm]\\ abstract fun transactionLoadAsync(keys: KeySet): CompletableFuture&lt;ItemSet&gt;</p> <p>open fun transactionLoadAsync(keys: Iterable&lt;Any&gt;): CompletableFuture&lt;ItemSet&gt;</p> <p>open fun transactionLoadAsync(vararg keys: Any): CompletableFuture&lt;ItemSet&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-load/","title":"transactionLoad - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/transactionLoad</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-load/#transactionload","title":"transactionLoad","text":"<p>[jvm]\\ open suspend fun transactionLoad(keys: KeySet): ItemSet</p> <p>Transactionally loads objects specified by transactionLoadRequest by calling DynamoDbClient.transactGetItems API.</p> <p>A transaction cannot contain more than 25 unique items. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table.</p> <p>[jvm]\\ open suspend fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet</p> <p>open suspend fun transactionLoad(vararg keys: Any): ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-write-async/","title":"transactionWriteAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/transactionWriteAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-write-async/#transactionwriteasync","title":"transactionWriteAsync","text":"<p>[jvm]\\ abstract fun transactionWriteAsync(writeSet: TransactionWriteSet): CompletableFuture&lt;Void&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-write/","title":"transactionWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/transactionWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/transaction-write/#transactionwrite","title":"transactionWrite","text":"<p>[jvm]\\ open suspend fun transactionWrite(writeSet: TransactionWriteSet)</p> <p>Transactionally writes objects specified by transactionWriteRequest by calling DynamoDbClient.transactWriteItems API.</p> <p>This method supports versioning annotations, but not in conjunction with condition expressions. It throws software.amazon.awssdk.core.exception.SdkClientException exception if class of any input object is annotated with DynamoDbVersionAttribute and a condition expression is also present.</p> <p>A transaction cannot contain more than 25 unique items, including conditions. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table. For example, you cannot both ConditionCheck and Update the same item in one transaction.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/","title":"Companion - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun &lt;DB : AsyncLogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient): DB@JvmStaticfun &lt;DB : AsyncLogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver?): DBfun &lt;DB : AsyncLogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver? = null): DB invoke [jvm]inline operator fun &lt;DB : AsyncLogicalDb&gt; invoke(dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver? = null): DB"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/create/","title":"create - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/Companion/create</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;DB : AsyncLogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver? = null): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : AsyncLogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : AsyncLogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver?): DB</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/invoke/","title":"invoke - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalDb/Companion/invoke</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-db/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ inline operator fun &lt;DB : AsyncLogicalDb&gt; invoke(dynamoDbEnhancedClient: DynamoDbEnhancedAsyncClient, tableNameResolver: TableNameResolver? = null): DB</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/","title":"AsyncLogicalTable - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalTable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/#asynclogicaltable","title":"AsyncLogicalTable","text":"<p>[jvm]\\ interface AsyncLogicalTable&lt;RI : Any&gt; : AsyncView&lt;RI, RI&gt; , AsyncInlineView.Factory, AsyncSecondaryIndex.Factory</p> <p>A collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;type must be a key type or item type of one of the views of this table. delete [jvm]open suspend fun delete(item: RI, deleteExpression: Expression? = null): RI?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteAsync [jvm]open fun deleteAsync(item: RI): CompletableFuture&lt;RI?&gt;abstract fun deleteAsync(item: RI, deleteExpression: Expression?): CompletableFuture&lt;RI?&gt; deleteKey [jvm]open suspend fun deleteKey(key: RI, deleteExpression: Expression? = null): RI?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKeyAsync [jvm]open fun deleteKeyAsync(key: RI): CompletableFuture&lt;RI?&gt;abstract fun deleteKeyAsync(key: RI, deleteExpression: Expression?): CompletableFuture&lt;RI?&gt; inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncInlineView&lt;K, I&gt; load [jvm]open suspend fun load(key: RI, consistentReads: Boolean = false): RI?Returns an item whose keys match those of the prototype key object given, or null if no such item exists.[jvm]open suspend fun load(key: RI, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;RI?, ConsumedCapacity?&gt; loadAsync [jvm]open fun loadAsync(key: RI): CompletableFuture&lt;RI?&gt;abstract fun loadAsync(key: RI, consistentReads: Boolean): CompletableFuture&lt;RI?&gt;abstract fun loadAsync(key: RI, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;RI?, ConsumedCapacity?&gt;&gt; save [jvm]open suspend fun save(item: RI, saveExpression: Expression? = null): VoidSaves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveAsync [jvm]open fun saveAsync(item: RI): CompletableFuture&lt;Void&gt;abstract fun saveAsync(item: RI, saveExpression: Expression?): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]open fun saveAsyncWithResult(item: RI): CompletableFuture&lt;RI&gt;abstract fun saveAsyncWithResult(item: RI, saveExpression: Expression?): CompletableFuture&lt;RI&gt; saveWithResult [jvm]open suspend fun saveWithResult(item: RI, saveExpression: Expression? = null): RIThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last! secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/codec/","title":"codec - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalTable/codec</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/codec/#codec","title":"codec","text":"<p>[jvm]\\ abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;</p> <p>type must be a key type or item type of one of the views of this table.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalTable/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/#inheritors","title":"Inheritors","text":"AsyncLogicalDb"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/#functions","title":"Functions","text":"Name Summary logicalTable [jvm]abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/logical-table/","title":"logicalTable - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncLogicalTable/Factory/logicalTable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-logical-table/-factory/logical-table/#logicaltable","title":"logicalTable","text":"<p>[jvm]\\ abstract fun &lt;T : AsyncLogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/","title":"AsyncQueryable - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncQueryable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/#asyncqueryable","title":"AsyncQueryable","text":"<p>interface AsyncQueryable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/#inheritors","title":"Inheritors","text":"AsyncInlineView AsyncSecondaryIndex"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/#functions","title":"Functions","text":"Name Summary query [jvm]open suspend fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAsync [jvm]open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean, pageSize: Int, consistentRead: Boolean, filterExpression: Expression?, initialOffset: Offset&lt;K&gt;?, returnConsumedCapacity: ReturnConsumedCapacity?): Publisher&lt;Page&lt;K, I&gt;&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/query-async/","title":"queryAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncQueryable/queryAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/query-async/#queryasync","title":"queryAsync","text":"<p>[jvm]\\ abstract fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean, pageSize: Int, consistentRead: Boolean, filterExpression: Expression?, initialOffset: Offset&lt;K&gt;?, returnConsumedCapacity: ReturnConsumedCapacity?): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/query/","title":"query - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncQueryable/query</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-queryable/query/#query","title":"query","text":"<p>[jvm]\\ open suspend fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;</p> <p>Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/","title":"AsyncScannable - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncScannable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/#asyncscannable","title":"AsyncScannable","text":"<p>interface AsyncScannable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/#inheritors","title":"Inheritors","text":"AsyncInlineView AsyncSecondaryIndex"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/#functions","title":"Functions","text":"Name Summary scan [jvm]open suspend fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAsync [jvm]open fun scanAsync(): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun scanAsync(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Publisher&lt;Page&lt;K, I&gt;&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/scan-async/","title":"scanAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncScannable/scanAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/scan-async/#scanasync","title":"scanAsync","text":"<p>[jvm]\\ abstract fun scanAsync(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAsync(): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAsync(initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAsync(config: ScanConfig): Publisher&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAsync(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/scan/","title":"scan - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncScannable/scan</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-scannable/scan/#scan","title":"scan","text":"<p>[jvm]\\ open suspend fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;</p> <p>Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/","title":"AsyncSecondaryIndex - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncSecondaryIndex</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/#asyncsecondaryindex","title":"AsyncSecondaryIndex","text":"<p>[jvm]\\ interface AsyncSecondaryIndex&lt;K : Any, I : Any&gt; : AsyncScannable&lt;K, I&gt; , AsyncQueryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/#functions","title":"Functions","text":"Name Summary query [jvm]open suspend fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAsync [jvm]open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun queryAsync(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean, pageSize: Int, consistentRead: Boolean, filterExpression: Expression?, initialOffset: Offset&lt;K&gt;?, returnConsumedCapacity: ReturnConsumedCapacity?): Publisher&lt;Page&lt;K, I&gt;&gt; scan [jvm]open suspend fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAsync [jvm]open fun scanAsync(): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig): Publisher&lt;Page&lt;K, I&gt;&gt;open fun scanAsync(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Publisher&lt;Page&lt;K, I&gt;&gt;abstract fun scanAsync(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Publisher&lt;Page&lt;K, I&gt;&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncSecondaryIndex/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/#inheritors","title":"Inheritors","text":"AsyncLogicalTable"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/#functions","title":"Functions","text":"Name Summary secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/secondary-index/","title":"secondaryIndex - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncSecondaryIndex/Factory/secondaryIndex</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-secondary-index/-factory/secondary-index/#secondaryindex","title":"secondaryIndex","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): AsyncSecondaryIndex&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/","title":"AsyncView - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/#asyncview","title":"AsyncView","text":"<p>interface AsyncView&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/#inheritors","title":"Inheritors","text":"AsyncLogicalTable AsyncInlineView"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open suspend fun delete(item: I, deleteExpression: Expression? = null): I?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteAsync [jvm]open fun deleteAsync(item: I): CompletableFuture&lt;I?&gt;abstract fun deleteAsync(item: I, deleteExpression: Expression?): CompletableFuture&lt;I?&gt; deleteKey [jvm]open suspend fun deleteKey(key: K, deleteExpression: Expression? = null): I?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKeyAsync [jvm]open fun deleteKeyAsync(key: K): CompletableFuture&lt;I?&gt;abstract fun deleteKeyAsync(key: K, deleteExpression: Expression?): CompletableFuture&lt;I?&gt; load [jvm]open suspend fun load(key: K, consistentReads: Boolean = false): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists.[jvm]open suspend fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt; loadAsync [jvm]open fun loadAsync(key: K): CompletableFuture&lt;I?&gt;abstract fun loadAsync(key: K, consistentReads: Boolean): CompletableFuture&lt;I?&gt;abstract fun loadAsync(key: K, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;I?, ConsumedCapacity?&gt;&gt; save [jvm]open suspend fun save(item: I, saveExpression: Expression? = null): VoidSaves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveAsync [jvm]open fun saveAsync(item: I): CompletableFuture&lt;Void&gt;abstract fun saveAsync(item: I, saveExpression: Expression?): CompletableFuture&lt;Void&gt; saveAsyncWithResult [jvm]open fun saveAsyncWithResult(item: I): CompletableFuture&lt;I&gt;abstract fun saveAsyncWithResult(item: I, saveExpression: Expression?): CompletableFuture&lt;I&gt; saveWithResult [jvm]open suspend fun saveWithResult(item: I, saveExpression: Expression? = null): IThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last!"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-async/","title":"deleteAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/deleteAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-async/#deleteasync","title":"deleteAsync","text":"<p>[jvm]\\ abstract fun deleteAsync(item: I, deleteExpression: Expression?): CompletableFuture&lt;I?&gt;</p> <p>open fun deleteAsync(item: I): CompletableFuture&lt;I?&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-key-async/","title":"deleteKeyAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/deleteKeyAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-key-async/#deletekeyasync","title":"deleteKeyAsync","text":"<p>[jvm]\\ abstract fun deleteKeyAsync(key: K, deleteExpression: Expression?): CompletableFuture&lt;I?&gt;</p> <p>open fun deleteKeyAsync(key: K): CompletableFuture&lt;I?&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-key/","title":"deleteKey - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/deleteKey</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete-key/#deletekey","title":"deleteKey","text":"<p>[jvm]\\ open suspend fun deleteKey(key: K, deleteExpression: Expression? = null): I?</p> <p>Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>If the item to be deleted has versioned attributes, load the item and use delete instead. For more information, see VersionedRecordExtension.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete/","title":"delete - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/delete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/delete/#delete","title":"delete","text":"<p>[jvm]\\ open suspend fun delete(item: I, deleteExpression: Expression? = null): I?</p> <p>Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/load-async/","title":"loadAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/loadAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/load-async/#loadasync","title":"loadAsync","text":"<p>[jvm]\\ abstract fun loadAsync(key: K, consistentReads: Boolean): CompletableFuture&lt;I?&gt;</p> <p>abstract fun loadAsync(key: K, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): CompletableFuture&lt;Pair&lt;I?, ConsumedCapacity?&gt;&gt;</p> <p>open fun loadAsync(key: K): CompletableFuture&lt;I?&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/load/","title":"load - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/load</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/load/#load","title":"load","text":"<p>[jvm]\\ open suspend fun load(key: K, consistentReads: Boolean = false): I?</p> <p>Returns an item whose keys match those of the prototype key object given, or null if no such item exists.</p> <p>[jvm]\\ open suspend fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-async-with-result/","title":"saveAsyncWithResult - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/saveAsyncWithResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-async-with-result/#saveasyncwithresult","title":"saveAsyncWithResult","text":"<p>[jvm]\\ abstract fun saveAsyncWithResult(item: I, saveExpression: Expression?): CompletableFuture&lt;I&gt;</p> <p>open fun saveAsyncWithResult(item: I): CompletableFuture&lt;I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-async/","title":"saveAsync - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/saveAsync</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-async/#saveasync","title":"saveAsync","text":"<p>[jvm]\\ abstract fun saveAsync(item: I, saveExpression: Expression?): CompletableFuture&lt;Void&gt;</p> <p>open fun saveAsync(item: I): CompletableFuture&lt;Void&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-with-result/","title":"saveWithResult - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/saveWithResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save-with-result/#savewithresult","title":"saveWithResult","text":"<p>[jvm]\\ open suspend fun saveWithResult(item: I, saveExpression: Expression? = null): I</p> <p>This method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last!</p> <p>Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet.</p> <p>Any options specified in the saveExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>Any auto generated in memory updates will be reflected in the result item.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save/","title":"save - Tempest","text":"<p>//tempest2/app.cash.tempest2/AsyncView/save</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-async-view/save/#save","title":"save","text":"<p>[jvm]\\ open suspend fun save(item: I, saveExpression: Expression? = null): Void</p> <p>Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet.</p> <p>Any options specified in the saveExpression parameter will be overlaid on any constraints due to versioned attributes.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/","title":"Attribute - Tempest","text":"<p>//tempest2/app.cash.tempest2/Attribute</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/#attribute","title":"Attribute","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FIELD])</p> <p>annotation class Attribute(val name: String = \"\", val names: Array&lt;String&gt; = [], val prefix: String = \"\", val allowEmpty: Boolean = false)</p> <p>Maps an item class property to one or more attributes in a DynamoDB table.</p> <p>If this mapped to a primary range key, it must have a prefix. Tempest automatically adds the prefix before database writes and removes it after database reads.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/#properties","title":"Properties","text":"Name Summary allowEmpty [jvm]val allowEmpty: Boolean = falseAllows a nullable field with a prefix to be null when serializing. If this is false the prefix will be added to the field even when it is null. name [jvm]val name: String names [jvm]val names: Array&lt;String&gt; prefix [jvm]val prefix: String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/allow-empty/","title":"allowEmpty - Tempest","text":"<p>//tempest2/app.cash.tempest2/Attribute/allowEmpty</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/allow-empty/#allowempty","title":"allowEmpty","text":"<p>[jvm]\\ val allowEmpty: Boolean = false</p> <p>Allows a nullable field with a prefix to be null when serializing. If this is false the prefix will be added to the field even when it is null.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/name/","title":"name - Tempest","text":"<p>//tempest2/app.cash.tempest2/Attribute/name</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/names/","title":"names - Tempest","text":"<p>//tempest2/app.cash.tempest2/Attribute/names</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/names/#names","title":"names","text":"<p>[jvm]\\ val names: Array&lt;String&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/prefix/","title":"prefix - Tempest","text":"<p>//tempest2/app.cash.tempest2/Attribute/prefix</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-attribute/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/","title":"BatchWriteResult - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/#batchwriteresult","title":"BatchWriteResult","text":"<p>[jvm]\\ data class BatchWriteResult(val unprocessedClobbers: List&lt;Key&gt;, val unprocessedDeletes: List&lt;Key&gt;)</p> <p>It contains information about the unprocessed items and the exception causing the failure.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/#constructors","title":"Constructors","text":"BatchWriteResult [jvm]constructor(unprocessedClobbers: List&lt;Key&gt;, unprocessedDeletes: List&lt;Key&gt;)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/#properties","title":"Properties","text":"Name Summary isSuccessful [jvm]val isSuccessful: Boolean unprocessedClobbers [jvm]val unprocessedClobbers: List&lt;Key&gt; unprocessedDeletes [jvm]val unprocessedDeletes: List&lt;Key&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/-batch-write-result/","title":"BatchWriteResult - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteResult/BatchWriteResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/-batch-write-result/#batchwriteresult","title":"BatchWriteResult","text":"<p>[jvm]\\ constructor(unprocessedClobbers: List&lt;Key&gt;, unprocessedDeletes: List&lt;Key&gt;)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/is-successful/","title":"isSuccessful - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteResult/isSuccessful</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/is-successful/#issuccessful","title":"isSuccessful","text":"<p>[jvm]\\ val isSuccessful: Boolean</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/unprocessed-clobbers/","title":"unprocessedClobbers - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteResult/unprocessedClobbers</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/unprocessed-clobbers/#unprocessedclobbers","title":"unprocessedClobbers","text":"<p>[jvm]\\ val unprocessedClobbers: List&lt;Key&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/unprocessed-deletes/","title":"unprocessedDeletes - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteResult/unprocessedDeletes</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-result/unprocessed-deletes/#unprocesseddeletes","title":"unprocessedDeletes","text":"<p>[jvm]\\ val unprocessedDeletes: List&lt;Key&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/","title":"BatchWriteSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/#batchwriteset","title":"BatchWriteSet","text":"<p>[jvm]\\ data class BatchWriteSet(val itemsToClobber: ItemSet, val keysToDelete: KeySet)</p> <p>A write that the client sends to the DynamoDb service.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/#constructors","title":"Constructors","text":"BatchWriteSet [jvm]constructor(itemsToClobber: ItemSet, keysToDelete: KeySet)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/#properties","title":"Properties","text":"Name Summary itemsToClobber [jvm]val itemsToClobber: ItemSet keysToDelete [jvm]val keysToDelete: KeySet"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-batch-write-set/","title":"BatchWriteSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/BatchWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-batch-write-set/#batchwriteset","title":"BatchWriteSet","text":"<p>[jvm]\\ constructor(itemsToClobber: ItemSet, keysToDelete: KeySet)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/items-to-clobber/","title":"itemsToClobber - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/itemsToClobber</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/items-to-clobber/#itemstoclobber","title":"itemsToClobber","text":"<p>[jvm]\\ val itemsToClobber: ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/keys-to-delete/","title":"keysToDelete - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/keysToDelete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/keys-to-delete/#keystodelete","title":"keysToDelete","text":"<p>[jvm]\\ val keysToDelete: KeySet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/#functions","title":"Functions","text":"Name Summary build [jvm]fun build(): BatchWriteSet clobber [jvm]fun clobber(vararg item: Any): BatchWriteSet.BuilderThis method behaves like <code>DynamoDbClient.putItem</code>. Versioned attributes will be discarded.[jvm]fun clobber(items: Iterable&lt;Any&gt;): BatchWriteSet.Builder delete [jvm]fun delete(vararg key: Any): BatchWriteSet.Builderfun delete(keys: Iterable&lt;Any&gt;): BatchWriteSet.Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/Builder/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/build/","title":"build - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/Builder/build</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): BatchWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/clobber/","title":"clobber - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/Builder/clobber</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/clobber/#clobber","title":"clobber","text":"<p>[jvm]\\ fun clobber(vararg item: Any): BatchWriteSet.Builder</p> <p>This method behaves like <code>DynamoDbClient.putItem</code>. Versioned attributes will be discarded.</p> <p>[jvm]\\ fun clobber(items: Iterable&lt;Any&gt;): BatchWriteSet.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/delete/","title":"delete - Tempest","text":"<p>//tempest2/app.cash.tempest2/BatchWriteSet/Builder/delete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-batch-write-set/-builder/delete/#delete","title":"delete","text":"<p>[jvm]\\ fun delete(vararg key: Any): BatchWriteSet.Builder</p> <p>fun delete(keys: Iterable&lt;Any&gt;): BatchWriteSet.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/","title":"BeginsWith - Tempest","text":"<p>//tempest2/app.cash.tempest2/BeginsWith</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/#beginswith","title":"BeginsWith","text":"<p>[jvm]\\ data class BeginsWith&lt;K&gt;(val prefix: K) : KeyCondition&lt;K&gt; </p> <p>Applies equality condition on the hash key and the following condition on the range key</p> <ul> <li>begins_with (a, substr)\u2014 true if the value of attribute a begins with a particular substring.</li> </ul>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/#constructors","title":"Constructors","text":"BeginsWith [jvm]constructor(prefix: K)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/#properties","title":"Properties","text":"Name Summary prefix [jvm]val prefix: K"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/-begins-with/","title":"BeginsWith - Tempest","text":"<p>//tempest2/app.cash.tempest2/BeginsWith/BeginsWith</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/-begins-with/#beginswith","title":"BeginsWith","text":"<p>[jvm]\\ constructor(prefix: K)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/prefix/","title":"prefix - Tempest","text":"<p>//tempest2/app.cash.tempest2/BeginsWith/prefix</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-begins-with/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: K</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/","title":"Between - Tempest","text":"<p>//tempest2/app.cash.tempest2/Between</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/#between","title":"Between","text":"<p>[jvm]\\ data class Between&lt;K&gt;(val startInclusive: K, val endInclusive: K) : KeyCondition&lt;K&gt; </p> <p>Applies equality condition on the hash key and the following condition on the range key</p> <ul> <li>a BETWEEN b AND c \u2014 true if a is greater than or equal to b, and less than or equal to c.</li> </ul>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/#constructors","title":"Constructors","text":"Between [jvm]constructor(startInclusive: K, endInclusive: K)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/#properties","title":"Properties","text":"Name Summary endInclusive [jvm]val endInclusive: K startInclusive [jvm]val startInclusive: K"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/-between/","title":"Between - Tempest","text":"<p>//tempest2/app.cash.tempest2/Between/Between</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/-between/#between","title":"Between","text":"<p>[jvm]\\ constructor(startInclusive: K, endInclusive: K)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/end-inclusive/","title":"endInclusive - Tempest","text":"<p>//tempest2/app.cash.tempest2/Between/endInclusive</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/end-inclusive/#endinclusive","title":"endInclusive","text":"<p>[jvm]\\ val endInclusive: K</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/start-inclusive/","title":"startInclusive - Tempest","text":"<p>//tempest2/app.cash.tempest2/Between/startInclusive</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-between/start-inclusive/#startinclusive","title":"startInclusive","text":"<p>[jvm]\\ val startInclusive: K</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/","title":"Codec - Tempest","text":"<p>//tempest2/app.cash.tempest2/Codec</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/#codec","title":"Codec","text":"<p>[jvm]\\ interface Codec&lt;A : Any, D : Any&gt;</p> <p>Converts values between the mutable <code>DynamoDbBean</code> objects that defines the union of all key and value attributes, and specific Tempest values.</p> <p>It is the caller\u2019s responsibility to check that the <code>DynamoDbBean</code> instance can be safely converted to the target type. If it cannot be, the behavior of this codec is undefined.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/#functions","title":"Functions","text":"Name Summary toApp [jvm]abstract fun toApp(dbItem: D): A toDb [jvm]abstract fun toDb(appItem: A): D"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/to-app/","title":"toApp - Tempest","text":"<p>//tempest2/app.cash.tempest2/Codec/toApp</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/to-app/#toapp","title":"toApp","text":"<p>[jvm]\\ abstract fun toApp(dbItem: D): A</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/to-db/","title":"toDb - Tempest","text":"<p>//tempest2/app.cash.tempest2/Codec/toDb</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-codec/to-db/#todb","title":"toDb","text":"<p>[jvm]\\ abstract fun toDb(appItem: A): D</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-for-index/","title":"ForIndex - Tempest","text":"<p>//tempest2/app.cash.tempest2/ForIndex</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-for-index/#forindex","title":"ForIndex","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.CLASS])</p> <p>annotation class ForIndex(val name: String = \"\")</p> <p>Maps an key class to a global or local secondary index in a DynamoDB table.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-for-index/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-for-index/name/","title":"name - Tempest","text":"<p>//tempest2/app.cash.tempest2/ForIndex/name</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-for-index/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/","title":"InlineView - Tempest","text":"<p>//tempest2/app.cash.tempest2/InlineView</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/#inlineview","title":"InlineView","text":"<p>[jvm]\\ interface InlineView&lt;K : Any, I : Any&gt; : View&lt;K, I&gt; , Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open fun delete(item: I): I?[jvm]abstract fun delete(item: I, deleteExpression: Expression? = null): I?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: K): I?[jvm]abstract fun deleteKey(key: K, deleteExpression: Expression? = null): I?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. load [jvm]open fun load(key: K): I?abstract fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt;[jvm]abstract fun load(key: K, consistentReads: Boolean = false): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAll [jvm]open fun queryAll(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]abstract fun queryAll(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a query and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. queryAllContents [jvm]open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]abstract fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a query and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. save [jvm]open fun save(item: I)[jvm]abstract fun save(item: I, saveExpression: Expression? = null)Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveWithResult [jvm]open fun saveWithResult(item: I): I[jvm]abstract fun saveWithResult(item: I, saveExpression: Expression? = null): IThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last! scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, workerId: WorkerId? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAll [jvm]open fun scanAll(): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]open fun scanAll(config: ScanConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;abstract fun scanAll(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a scan and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. scanAllContents [jvm]open fun scanAllContents(): Sequence&lt;I&gt;open fun scanAllContents(initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]open fun scanAllContents(config: ScanConfig): Sequence&lt;I&gt;open fun scanAllContents(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;abstract fun scanAllContents(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a scan and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/InlineView/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/#inheritors","title":"Inheritors","text":"LogicalTable"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/#functions","title":"Functions","text":"Name Summary inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/inline-view/","title":"inlineView - Tempest","text":"<p>//tempest2/app.cash.tempest2/InlineView/Factory/inlineView</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-inline-view/-factory/inline-view/#inlineview","title":"inlineView","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/","title":"ItemSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/#itemset","title":"ItemSet","text":"<p>[jvm]\\ class ItemSet : Set&lt;Any&gt; </p> <p>A collection of items across tables.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/#constructors","title":"Constructors","text":"ItemSet [jvm]constructor(contents: Iterable&lt;Any&gt;, consumedCapacity: List&lt;ConsumedCapacity&gt; = emptyList())"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/#properties","title":"Properties","text":"Name Summary consumedCapacity [jvm]val consumedCapacity: List&lt;ConsumedCapacity&gt; size [jvm]open override val size: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/#functions","title":"Functions","text":"Name Summary contains [jvm]open operator override fun contains(element: Any): Boolean containsAll [jvm]open override fun containsAll(elements: Collection&lt;Any&gt;): Boolean forEach [jvm]open fun forEach(p0: Consumer&lt;in Any&gt;) getAllItems [jvm]fun getAllItems(): Set&lt;Any&gt; getItems [jvm]inline fun &lt;I : Any&gt; getItems(): List&lt;I&gt;fun &lt;I : Any&gt; getItems(itemType: Class&lt;I&gt;): List&lt;I&gt;fun &lt;I : Any&gt; getItems(itemType: KClass&lt;I&gt;): List&lt;I&gt; isEmpty [jvm]open override fun isEmpty(): Boolean iterator [jvm]open operator override fun iterator(): Iterator&lt;Any&gt; parallelStream [jvm]open fun parallelStream(): Stream&lt;Any&gt; spliterator [jvm]open override fun spliterator(): Spliterator&lt;Any&gt; stream [jvm]open fun stream(): Stream&lt;Any&gt; toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/-item-set/","title":"ItemSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet/ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/-item-set/#itemset","title":"ItemSet","text":"<p>[jvm]\\ constructor(contents: Iterable&lt;Any&gt;, consumedCapacity: List&lt;ConsumedCapacity&gt; = emptyList())</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/consumed-capacity/","title":"consumedCapacity - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet/consumedCapacity</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/consumed-capacity/#consumedcapacity","title":"consumedCapacity","text":"<p>[jvm]\\ val consumedCapacity: List&lt;ConsumedCapacity&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/get-all-items/","title":"getAllItems - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet/getAllItems</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/get-all-items/#getallitems","title":"getAllItems","text":"<p>[jvm]\\ fun getAllItems(): Set&lt;Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/get-items/","title":"getItems - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet/getItems</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/get-items/#getitems","title":"getItems","text":"<p>[jvm]\\ fun &lt;I : Any&gt; getItems(itemType: KClass&lt;I&gt;): List&lt;I&gt;</p> <p>fun &lt;I : Any&gt; getItems(itemType: Class&lt;I&gt;): List&lt;I&gt;</p> <p>inline fun &lt;I : Any&gt; getItems(): List&lt;I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/to-string/","title":"toString - Tempest","text":"<p>//tempest2/app.cash.tempest2/ItemSet/toString</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-item-set/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-condition/","title":"KeyCondition - Tempest","text":"<p>//tempest2/app.cash.tempest2/KeyCondition</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-condition/#keycondition","title":"KeyCondition","text":"<p>sealed class KeyCondition&lt;K&gt;</p> <p>Used to query a table or an index.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-condition/#inheritors","title":"Inheritors","text":"BeginsWith Between"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/","title":"KeySet - Tempest","text":"<p>//tempest2/app.cash.tempest2/KeySet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/#keyset","title":"KeySet","text":"<p>[jvm]\\ class KeySet : Set&lt;Any&gt; </p> <p>A collection of keys or items across tables.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/#constructors","title":"Constructors","text":"KeySet [jvm]constructor(contents: Iterable&lt;Any&gt;)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/#properties","title":"Properties","text":"Name Summary size [jvm]open override val size: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/#functions","title":"Functions","text":"Name Summary contains [jvm]open operator override fun contains(element: Any): Boolean containsAll [jvm]open override fun containsAll(elements: Collection&lt;Any&gt;): Boolean forEach [jvm]open fun forEach(p0: Consumer&lt;in Any&gt;) getKeys [jvm]inline fun &lt;K : Any&gt; getKeys(): List&lt;K&gt;fun &lt;K : Any&gt; getKeys(keyType: Class&lt;K&gt;): List&lt;K&gt;fun &lt;K : Any&gt; getKeys(keyType: KClass&lt;K&gt;): List&lt;K&gt; isEmpty [jvm]open override fun isEmpty(): Boolean iterator [jvm]open operator override fun iterator(): Iterator&lt;Any&gt; parallelStream [jvm]open fun parallelStream(): Stream&lt;Any&gt; spliterator [jvm]open override fun spliterator(): Spliterator&lt;Any&gt; stream [jvm]open fun stream(): Stream&lt;Any&gt; toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/-key-set/","title":"KeySet - Tempest","text":"<p>//tempest2/app.cash.tempest2/KeySet/KeySet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/-key-set/#keyset","title":"KeySet","text":"<p>[jvm]\\ constructor(contents: Iterable&lt;Any&gt;)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/get-keys/","title":"getKeys - Tempest","text":"<p>//tempest2/app.cash.tempest2/KeySet/getKeys</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/get-keys/#getkeys","title":"getKeys","text":"<p>[jvm]\\ fun &lt;K : Any&gt; getKeys(keyType: KClass&lt;K&gt;): List&lt;K&gt;</p> <p>fun &lt;K : Any&gt; getKeys(keyType: Class&lt;K&gt;): List&lt;K&gt;</p> <p>inline fun &lt;K : Any&gt; getKeys(): List&lt;K&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/to-string/","title":"toString - Tempest","text":"<p>//tempest2/app.cash.tempest2/KeySet/toString</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-key-set/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/","title":"LogicalDb - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/#logicaldb","title":"LogicalDb","text":"<p>[jvm]\\ interface LogicalDb : LogicalTable.Factory</p> <p>A collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean = false): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSet[jvm]abstract fun batchLoad(keys: KeySet, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSetRetrieves multiple items from multiple tables using their primary keys. batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResult[jvm]@CheckReturnValueabstract fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): BatchWriteResultSaves and deletes the objects given using one or more calls to the DynamoDbClient.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed. logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetTransactionally loads objects specified by transactionLoadRequest by calling DynamoDbClient.transactGetItems API.[jvm]open fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)Transactionally writes objects specified by transactionWriteRequest by calling DynamoDbClient.transactWriteItems API."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/batch-load/","title":"batchLoad - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/batchLoad</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/batch-load/#batchload","title":"batchLoad","text":"<p>[jvm]\\ abstract fun batchLoad(keys: KeySet, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSet</p> <p>Retrieves multiple items from multiple tables using their primary keys.</p> <p>This method performs one or more calls to the DynamoDbClient.batchGetItem API.</p> <p>A single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. BatchGetItem returns a partial result if the response size limit is exceeded, the table\u2019s provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, this method backs off and retries the <code>UnprocessedKeys</code> in the next API call.</p> <p>[jvm]\\ open fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSet</p> <p>open fun batchLoad(vararg keys: Any, consistentReads: Boolean = false, maxPageSize: Int = MAX_BATCH_READ, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.NONE): ItemSet</p> <p>open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSet</p> <p>open fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean): ItemSet</p> <p>open fun batchLoad(vararg keys: Any, consistentReads: Boolean = false): ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/batch-write/","title":"batchWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/batchWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/batch-write/#batchwrite","title":"batchWrite","text":"<p>[jvm]\\</p> <p>@CheckReturnValue</p> <p>abstract fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int = MAX_BATCH_WRITE): BatchWriteResult</p> <p>Saves and deletes the objects given using one or more calls to the DynamoDbClient.batchWriteItem API. Callers should always check the returned BatchWriteResult because this method returns normally even if some writes were not performed.</p> <p>This method does not support versioning annotations and behaves like DynamoDbClient.putItem.</p> <p>A single call to BatchWriteItem can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.</p> <p>In order to improve performance with these large-scale operations, this does not behave in the same way as individual PutItem and DeleteItem calls would. For example, you cannot specify conditions on individual put and delete requests, and BatchWriteItem does not return deleted items in the response.</p> <p>[jvm]\\ open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/transaction-load/","title":"transactionLoad - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/transactionLoad</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/transaction-load/#transactionload","title":"transactionLoad","text":"<p>[jvm]\\ abstract fun transactionLoad(keys: KeySet): ItemSet</p> <p>Transactionally loads objects specified by transactionLoadRequest by calling DynamoDbClient.transactGetItems API.</p> <p>A transaction cannot contain more than 25 unique items. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table.</p> <p>[jvm]\\ open fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet</p> <p>open fun transactionLoad(vararg keys: Any): ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/transaction-write/","title":"transactionWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/transactionWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/transaction-write/#transactionwrite","title":"transactionWrite","text":"<p>[jvm]\\ abstract fun transactionWrite(writeSet: TransactionWriteSet)</p> <p>Transactionally writes objects specified by transactionWriteRequest by calling DynamoDbClient.transactWriteItems API.</p> <p>This method supports versioning annotations, but not in conjunction with condition expressions. It throws software.amazon.awssdk.core.exception.SdkClientException exception if class of any input object is annotated with DynamoDbVersionAttribute and a condition expression is also present.</p> <p>A transaction cannot contain more than 25 unique items, including conditions. A transaction cannot contain more than 4 MB of data. No two actions in a transaction can work against the same item in the same table. For example, you cannot both ConditionCheck and Update the same item in one transaction.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/","title":"Companion - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient): DB@JvmStaticfun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver?): DBfun &lt;DB : LogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver? = null): DB invoke [jvm]inline operator fun &lt;DB : LogicalDb&gt; invoke(dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver? = null): DB"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/create/","title":"create - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/Companion/create</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;DB : LogicalDb&gt; create(dbType: KClass&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver? = null): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient): DB</p> <p>@JvmStatic</p> <p>fun &lt;DB : LogicalDb&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver?): DB</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/invoke/","title":"invoke - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalDb/Companion/invoke</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-db/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ inline operator fun &lt;DB : LogicalDb&gt; invoke(dynamoDbEnhancedClient: DynamoDbEnhancedClient, tableNameResolver: TableNameResolver? = null): DB</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/","title":"LogicalTable - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalTable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/#logicaltable","title":"LogicalTable","text":"<p>[jvm]\\ interface LogicalTable&lt;RI : Any&gt; : View&lt;RI, RI&gt; , InlineView.Factory, SecondaryIndex.Factory</p> <p>A collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;type must be a key type or item type of one of the views of this table. delete [jvm]open fun delete(item: RI): RI?[jvm]abstract fun delete(item: RI, deleteExpression: Expression? = null): RI?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: RI): RI?[jvm]abstract fun deleteKey(key: RI, deleteExpression: Expression? = null): RI?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: RI): RI?abstract fun load(key: RI, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;RI?, ConsumedCapacity?&gt;[jvm]abstract fun load(key: RI, consistentReads: Boolean = false): RI?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. save [jvm]open fun save(item: RI)[jvm]abstract fun save(item: RI, saveExpression: Expression? = null)Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveWithResult [jvm]open fun saveWithResult(item: RI): RI[jvm]abstract fun saveWithResult(item: RI, saveExpression: Expression? = null): RIThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last! secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/codec/","title":"codec - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalTable/codec</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/codec/#codec","title":"codec","text":"<p>[jvm]\\ abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, RI&gt;</p> <p>type must be a key type or item type of one of the views of this table.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalTable/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/#inheritors","title":"Inheritors","text":"LogicalDb"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/#functions","title":"Functions","text":"Name Summary logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/logical-table/","title":"logicalTable - Tempest","text":"<p>//tempest2/app.cash.tempest2/LogicalTable/Factory/logicalTable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-logical-table/-factory/logical-table/#logicaltable","title":"logicalTable","text":"<p>[jvm]\\ abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/","title":"Offset - Tempest","text":"<p>//tempest2/app.cash.tempest2/Offset</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/#offset","title":"Offset","text":"<p>[jvm]\\ data class Offset&lt;K&gt;(val key: K)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/#constructors","title":"Constructors","text":"Offset [jvm]constructor(key: K)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/#properties","title":"Properties","text":"Name Summary key [jvm]val key: K"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/-offset/","title":"Offset - Tempest","text":"<p>//tempest2/app.cash.tempest2/Offset/Offset</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/-offset/#offset","title":"Offset","text":"<p>[jvm]\\ constructor(key: K)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/key/","title":"key - Tempest","text":"<p>//tempest2/app.cash.tempest2/Offset/key</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-offset/key/#key","title":"key","text":"<p>[jvm]\\ val key: K</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/","title":"Page - Tempest","text":"<p>//tempest2/app.cash.tempest2/Page</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/#page","title":"Page","text":"<p>[jvm]\\ data class Page&lt;K, T&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/#properties","title":"Properties","text":"Name Summary consumedCapacity [jvm]val consumedCapacity: ConsumedCapacity? contents [jvm]val contents: List&lt;T&gt; hasMorePages [jvm]val hasMorePages: Boolean offset [jvm]val offset: Offset&lt;K&gt;?"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/consumed-capacity/","title":"consumedCapacity - Tempest","text":"<p>//tempest2/app.cash.tempest2/Page/consumedCapacity</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/consumed-capacity/#consumedcapacity","title":"consumedCapacity","text":"<p>[jvm]\\ val consumedCapacity: ConsumedCapacity?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/contents/","title":"contents - Tempest","text":"<p>//tempest2/app.cash.tempest2/Page/contents</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/contents/#contents","title":"contents","text":"<p>[jvm]\\ val contents: List&lt;T&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/has-more-pages/","title":"hasMorePages - Tempest","text":"<p>//tempest2/app.cash.tempest2/Page/hasMorePages</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/has-more-pages/#hasmorepages","title":"hasMorePages","text":"<p>[jvm]\\ val hasMorePages: Boolean</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/offset/","title":"offset - Tempest","text":"<p>//tempest2/app.cash.tempest2/Page/offset</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-page/offset/#offset","title":"offset","text":"<p>[jvm]\\ val offset: Offset&lt;K&gt;?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/","title":"QueryConfig - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/#queryconfig","title":"QueryConfig","text":"<p>[jvm]\\ data class QueryConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/#properties","title":"Properties","text":"Name Summary asc [jvm]val asc: Boolean consistentRead [jvm]val consistentRead: Boolean filterExpression [jvm]val filterExpression: Expression? pageSize [jvm]val pageSize: Int returnConsumedCapacity [jvm]val returnConsumedCapacity: ReturnConsumedCapacity?"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/asc/","title":"asc - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/asc</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/asc/#asc","title":"asc","text":"<p>[jvm]\\ val asc: Boolean</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/consistentRead</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ val consistentRead: Boolean</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/filterExpression</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ val filterExpression: Expression?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/page-size/","title":"pageSize - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/pageSize</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ val pageSize: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/returnConsumedCapacity</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ val returnConsumedCapacity: ReturnConsumedCapacity?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/#functions","title":"Functions","text":"Name Summary asc [jvm]fun asc(asc: Boolean): QueryConfig.Builder build [jvm]fun build(): QueryConfig consistentRead [jvm]fun consistentRead(consistentRead: Boolean): QueryConfig.Builder filterExpression [jvm]fun filterExpression(filterExpression: Expression): QueryConfig.Builder pageSize [jvm]fun pageSize(pageSize: Int): QueryConfig.Builder returnConsumedCapacity [jvm]fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): QueryConfig.Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/asc/","title":"asc - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/asc</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/asc/#asc","title":"asc","text":"<p>[jvm]\\ fun asc(asc: Boolean): QueryConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/build/","title":"build - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/build</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): QueryConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/consistentRead</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ fun consistentRead(consistentRead: Boolean): QueryConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/filterExpression</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ fun filterExpression(filterExpression: Expression): QueryConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/page-size/","title":"pageSize - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/pageSize</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ fun pageSize(pageSize: Int): QueryConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/return-consumed-capacity/","title":"returnConsumedCapacity - Tempest","text":"<p>//tempest2/app.cash.tempest2/QueryConfig/Builder/returnConsumedCapacity</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-query-config/-builder/return-consumed-capacity/#returnconsumedcapacity","title":"returnConsumedCapacity","text":"<p>[jvm]\\ fun returnConsumedCapacity(returnConsumedCapacity: ReturnConsumedCapacity): QueryConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/","title":"Queryable - Tempest","text":"<p>//tempest2/app.cash.tempest2/Queryable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/#queryable","title":"Queryable","text":"<p>interface Queryable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/#inheritors","title":"Inheritors","text":"InlineView SecondaryIndex"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/#functions","title":"Functions","text":"Name Summary query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAll [jvm]open fun queryAll(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]abstract fun queryAll(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a query and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. queryAllContents [jvm]open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]abstract fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a query and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query-all-contents/","title":"queryAllContents - Tempest","text":"<p>//tempest2/app.cash.tempest2/Queryable/queryAllContents</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query-all-contents/#queryallcontents","title":"queryAllContents","text":"<p>[jvm]\\ abstract fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;</p> <p>Executes a query and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>[jvm]\\ open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;I&gt;</p> <p>open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;</p> <p>open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;I&gt;</p> <p>open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query-all/","title":"queryAll - Tempest","text":"<p>//tempest2/app.cash.tempest2/Queryable/queryAll</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query-all/#queryall","title":"queryAll","text":"<p>[jvm]\\ abstract fun queryAll(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>Executes a query and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>[jvm]\\ open fun queryAll(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query/","title":"query - Tempest","text":"<p>//tempest2/app.cash.tempest2/Queryable/query</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-queryable/query/#query","title":"query","text":"<p>[jvm]\\ abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;</p> <p>Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p> <p>[jvm]\\ open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;</p> <p>open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/","title":"ScanConfig - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/#scanconfig","title":"ScanConfig","text":"<p>[jvm]\\ data class ScanConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/#properties","title":"Properties","text":"Name Summary consistentRead [jvm]val consistentRead: Boolean filterExpression [jvm]val filterExpression: Expression? pageSize [jvm]val pageSize: Int workerId [jvm]val workerId: WorkerId?"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/consistentRead</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ val consistentRead: Boolean</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/filterExpression</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ val filterExpression: Expression?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/page-size/","title":"pageSize - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/pageSize</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ val pageSize: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/worker-id/","title":"workerId - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/workerId</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/worker-id/#workerid","title":"workerId","text":"<p>[jvm]\\ val workerId: WorkerId?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/#functions","title":"Functions","text":"Name Summary build [jvm]fun build(): ScanConfig consistentRead [jvm]fun consistentRead(consistentRead: Boolean): ScanConfig.Builder filterExpression [jvm]fun filterExpression(filterExpression: Expression): ScanConfig.Builder pageSize [jvm]fun pageSize(pageSize: Int): ScanConfig.Builder workerId [jvm]fun workerId(workerId: WorkerId): ScanConfig.Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/build/","title":"build - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/build</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): ScanConfig</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/consistent-read/","title":"consistentRead - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/consistentRead</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/consistent-read/#consistentread","title":"consistentRead","text":"<p>[jvm]\\ fun consistentRead(consistentRead: Boolean): ScanConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/filter-expression/","title":"filterExpression - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/filterExpression</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/filter-expression/#filterexpression","title":"filterExpression","text":"<p>[jvm]\\ fun filterExpression(filterExpression: Expression): ScanConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/page-size/","title":"pageSize - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/pageSize</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/page-size/#pagesize","title":"pageSize","text":"<p>[jvm]\\ fun pageSize(pageSize: Int): ScanConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/worker-id/","title":"workerId - Tempest","text":"<p>//tempest2/app.cash.tempest2/ScanConfig/Builder/workerId</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scan-config/-builder/worker-id/#workerid","title":"workerId","text":"<p>[jvm]\\ fun workerId(workerId: WorkerId): ScanConfig.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/","title":"Scannable - Tempest","text":"<p>//tempest2/app.cash.tempest2/Scannable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/#scannable","title":"Scannable","text":"<p>interface Scannable&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/#inheritors","title":"Inheritors","text":"InlineView SecondaryIndex"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/#functions","title":"Functions","text":"Name Summary scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, workerId: WorkerId? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAll [jvm]open fun scanAll(): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]open fun scanAll(config: ScanConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;abstract fun scanAll(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a scan and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. scanAllContents [jvm]open fun scanAllContents(): Sequence&lt;I&gt;open fun scanAllContents(initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]open fun scanAllContents(config: ScanConfig): Sequence&lt;I&gt;open fun scanAllContents(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;abstract fun scanAllContents(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a scan and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan-all-contents/","title":"scanAllContents - Tempest","text":"<p>//tempest2/app.cash.tempest2/Scannable/scanAllContents</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan-all-contents/#scanallcontents","title":"scanAllContents","text":"<p>[jvm]\\ abstract fun scanAllContents(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;</p> <p>Executes a scan and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>[jvm]\\ open fun scanAllContents(): Sequence&lt;I&gt;</p> <p>open fun scanAllContents(initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;</p> <p>[jvm]\\ open fun scanAllContents(config: ScanConfig): Sequence&lt;I&gt;</p> <p>open fun scanAllContents(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;</p> <p>Executes a scan and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>This method doesn\u2019t support parallel scans. <code>workerId</code>, if provided as part of <code>config</code>, will be ignored.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan-all/","title":"scanAll - Tempest","text":"<p>//tempest2/app.cash.tempest2/Scannable/scanAll</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan-all/#scanall","title":"scanAll","text":"<p>[jvm]\\ abstract fun scanAll(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>Executes a scan and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>[jvm]\\ open fun scanAll(): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAll(initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>[jvm]\\ open fun scanAll(config: ScanConfig): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>open fun scanAll(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;</p> <p>Executes a scan and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated.</p> <p>This method doesn\u2019t support parallel scans. <code>workerId</code>, if provided as part of <code>config</code>, will be ignored.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan/","title":"scan - Tempest","text":"<p>//tempest2/app.cash.tempest2/Scannable/scan</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan/#scan","title":"scan","text":"<p>[jvm]\\ abstract fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, workerId: WorkerId? = null): Page&lt;K, I&gt;</p> <p>Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-scannable/scan/#parameters","title":"Parameters","text":"<p>jvm</p> workerId identifies a tuple of <code>segment</code> and <code>totalSegments</code> in the context of parallel scans. <p>[jvm]\\ open fun scan(): Page&lt;K, I&gt;</p> <p>open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p> <p>open fun scan(config: ScanConfig): Page&lt;K, I&gt;</p> <p>open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/","title":"SecondaryIndex - Tempest","text":"<p>//tempest2/app.cash.tempest2/SecondaryIndex</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/#secondaryindex","title":"SecondaryIndex","text":"<p>[jvm]\\ interface SecondaryIndex&lt;K : Any, I : Any&gt; : Scannable&lt;K, I&gt; , Queryable&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/#functions","title":"Functions","text":"Name Summary query [jvm]open fun query(keyCondition: KeyCondition&lt;K&gt;): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Page&lt;K, I&gt;open fun query(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun query(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, returnConsumedCapacity: ReturnConsumedCapacity? = null): Page&lt;K, I&gt;Reads up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. queryAll [jvm]open fun queryAll(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun queryAll(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]abstract fun queryAll(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a query and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. queryAllContents [jvm]open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig): Sequence&lt;I&gt;open fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, config: QueryConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]abstract fun queryAllContents(keyCondition: KeyCondition&lt;K&gt;, asc: Boolean = true, pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a query and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. scan [jvm]open fun scan(): Page&lt;K, I&gt;open fun scan(initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;open fun scan(config: ScanConfig): Page&lt;K, I&gt;open fun scan(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Page&lt;K, I&gt;[jvm]abstract fun scan(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null, workerId: WorkerId? = null): Page&lt;K, I&gt;Scans up to the pageSize items or a maximum of 1 MB of data. This limit applies before the filter expression is evaluated. scanAll [jvm]open fun scanAll(): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;[jvm]open fun scanAll(config: ScanConfig): Sequence&lt;Page&lt;K, I&gt;&gt;open fun scanAll(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;Page&lt;K, I&gt;&gt;abstract fun scanAll(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;Page&lt;K, I&gt;&gt;Executes a scan and returns a sequence of pages that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated. scanAllContents [jvm]open fun scanAllContents(): Sequence&lt;I&gt;open fun scanAllContents(initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;[jvm]open fun scanAllContents(config: ScanConfig): Sequence&lt;I&gt;open fun scanAllContents(config: ScanConfig, initialOffset: Offset&lt;K&gt;?): Sequence&lt;I&gt;abstract fun scanAllContents(pageSize: Int = 100, consistentRead: Boolean = false, filterExpression: Expression? = null, initialOffset: Offset&lt;K&gt;? = null): Sequence&lt;I&gt;Executes a scan and returns a sequence that contains all results, regardless of page size. New pages will be fetched as needed when the resulting sequence is enumerated."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/","title":"Factory - Tempest","text":"<p>//tempest2/app.cash.tempest2/SecondaryIndex/Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/#factory","title":"Factory","text":"<p>interface Factory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/#inheritors","title":"Inheritors","text":"LogicalTable"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/#functions","title":"Functions","text":"Name Summary secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/secondary-index/","title":"secondaryIndex - Tempest","text":"<p>//tempest2/app.cash.tempest2/SecondaryIndex/Factory/secondaryIndex</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-secondary-index/-factory/secondary-index/#secondaryindex","title":"secondaryIndex","text":"<p>[jvm]\\ abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name/","title":"TableName - Tempest","text":"<p>//tempest2/app.cash.tempest2/TableName</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name/#tablename","title":"TableName","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.PROPERTY, AnnotationTarget.FUNCTION])</p> <p>annotation class TableName(val value: String = \"\")</p> <p>Maps an DB class property to a DynamoDB table.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name/#properties","title":"Properties","text":"Name Summary value [jvm]val value: String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name/value/","title":"value - Tempest","text":"<p>//tempest2/app.cash.tempest2/TableName/value</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name/value/#value","title":"value","text":"<p>[jvm]\\ val value: String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name-resolver/","title":"TableNameResolver - Tempest","text":"<p>//tempest2/app.cash.tempest2/TableNameResolver</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name-resolver/#tablenameresolver","title":"TableNameResolver","text":"<p>[jvm]\\ interface TableNameResolver</p> <p>Resolves the table name for a given LogicalTable class.</p> <p>This allows table names to be overridden at runtime.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name-resolver/#functions","title":"Functions","text":"Name Summary resolveTableName [jvm]abstract fun resolveTableName(clazz: Class&lt;*&gt;, tableNameFromAnnotation: String?): String"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name-resolver/resolve-table-name/","title":"resolveTableName - Tempest","text":"<p>//tempest2/app.cash.tempest2/TableNameResolver/resolveTableName</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-table-name-resolver/resolve-table-name/#resolvetablename","title":"resolveTableName","text":"<p>[jvm]\\ abstract fun resolveTableName(clazz: Class&lt;*&gt;, tableNameFromAnnotation: String?): String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/","title":"TransactionWriteSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/#transactionwriteset","title":"TransactionWriteSet","text":"<p>[jvm]\\ data class TransactionWriteSet(val itemsToSave: ItemSet, val keysToDelete: KeySet, val keysToCheck: KeySet, val writeExpressions: Map&lt;Any, Expression&gt;, val idempotencyToken: String?)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/#constructors","title":"Constructors","text":"TransactionWriteSet [jvm]constructor(itemsToSave: ItemSet, keysToDelete: KeySet, keysToCheck: KeySet, writeExpressions: Map&lt;Any, Expression&gt;, idempotencyToken: String?)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/#properties","title":"Properties","text":"Name Summary idempotencyToken [jvm]val idempotencyToken: String? itemsToSave [jvm]val itemsToSave: ItemSet keysToCheck [jvm]val keysToCheck: KeySet keysToDelete [jvm]val keysToDelete: KeySet sizeDynamoDbTable [jvm]val sizeDynamoDbTable: Int writeExpressions [jvm]val writeExpressions: Map&lt;Any, Expression&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-transaction-write-set/","title":"TransactionWriteSet - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/TransactionWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-transaction-write-set/#transactionwriteset","title":"TransactionWriteSet","text":"<p>[jvm]\\ constructor(itemsToSave: ItemSet, keysToDelete: KeySet, keysToCheck: KeySet, writeExpressions: Map&lt;Any, Expression&gt;, idempotencyToken: String?)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/idempotency-token/","title":"idempotencyToken - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/idempotencyToken</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/idempotency-token/#idempotencytoken","title":"idempotencyToken","text":"<p>[jvm]\\ val idempotencyToken: String?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/items-to-save/","title":"itemsToSave - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/itemsToSave</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/items-to-save/#itemstosave","title":"itemsToSave","text":"<p>[jvm]\\ val itemsToSave: ItemSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/keys-to-check/","title":"keysToCheck - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/keysToCheck</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/keys-to-check/#keystocheck","title":"keysToCheck","text":"<p>[jvm]\\ val keysToCheck: KeySet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/keys-to-delete/","title":"keysToDelete - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/keysToDelete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/keys-to-delete/#keystodelete","title":"keysToDelete","text":"<p>[jvm]\\ val keysToDelete: KeySet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/size-dynamo-db-table/","title":"sizeDynamoDbTable - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/sizeDynamoDbTable</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/size-dynamo-db-table/#sizedynamodbtable","title":"sizeDynamoDbTable","text":"<p>[jvm]\\ val sizeDynamoDbTable: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/write-expressions/","title":"writeExpressions - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/writeExpressions</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/write-expressions/#writeexpressions","title":"writeExpressions","text":"<p>[jvm]\\ val writeExpressions: Map&lt;Any, Expression&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/#properties","title":"Properties","text":"Name Summary size [jvm]val size: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/#functions","title":"Functions","text":"Name Summary addAll [jvm]fun addAll(builder: TransactionWriteSet.Builder) build [jvm]fun build(): TransactionWriteSet checkCondition [jvm]@JvmOverloadsfun checkCondition(key: Any, expression: Expression? = null): TransactionWriteSet.Builder delete [jvm]@JvmOverloadsfun delete(key: Any, expression: Expression? = null): TransactionWriteSet.Builder idempotencyToken [jvm]fun idempotencyToken(idempotencyToken: String): TransactionWriteSet.Builder save [jvm]@JvmOverloadsfun save(item: Any, expression: Expression? = null): TransactionWriteSet.BuilderThis adds a put operation to clear and replace all attributes, including unmodeled ones. Partial update is not supported."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/add-all/","title":"addAll - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/addAll</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/add-all/#addall","title":"addAll","text":"<p>[jvm]\\ fun addAll(builder: TransactionWriteSet.Builder)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/build/","title":"build - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/build</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TransactionWriteSet</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/check-condition/","title":"checkCondition - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/checkCondition</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/check-condition/#checkcondition","title":"checkCondition","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun checkCondition(key: Any, expression: Expression? = null): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/delete/","title":"delete - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/delete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/delete/#delete","title":"delete","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun delete(key: Any, expression: Expression? = null): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/idempotency-token/","title":"idempotencyToken - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/idempotencyToken</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/idempotency-token/#idempotencytoken","title":"idempotencyToken","text":"<p>[jvm]\\ fun idempotencyToken(idempotencyToken: String): TransactionWriteSet.Builder</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/save/","title":"save - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/save</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/save/#save","title":"save","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun save(item: Any, expression: Expression? = null): TransactionWriteSet.Builder</p> <p>This adds a put operation to clear and replace all attributes, including unmodeled ones. Partial update is not supported.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/size/","title":"size - Tempest","text":"<p>//tempest2/app.cash.tempest2/TransactionWriteSet/Builder/size</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-transaction-write-set/-builder/size/#size","title":"size","text":"<p>[jvm]\\ val size: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/","title":"View - Tempest","text":"<p>//tempest2/app.cash.tempest2/View</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/#view","title":"View","text":"<p>interface View&lt;K : Any, I : Any&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/#inheritors","title":"Inheritors","text":"LogicalTable InlineView"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/#functions","title":"Functions","text":"Name Summary delete [jvm]open fun delete(item: I): I?[jvm]abstract fun delete(item: I, deleteExpression: Expression? = null): I?Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. deleteKey [jvm]open fun deleteKey(key: K): I?[jvm]abstract fun deleteKey(key: K, deleteExpression: Expression? = null): I?Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes. load [jvm]open fun load(key: K): I?abstract fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt;[jvm]abstract fun load(key: K, consistentReads: Boolean = false): I?Returns an item whose keys match those of the prototype key object given, or null if no such item exists. save [jvm]open fun save(item: I)[jvm]abstract fun save(item: I, saveExpression: Expression? = null)Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet. saveWithResult [jvm]open fun saveWithResult(item: I): I[jvm]abstract fun saveWithResult(item: I, saveExpression: Expression? = null): IThis method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last!"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/delete-key/","title":"deleteKey - Tempest","text":"<p>//tempest2/app.cash.tempest2/View/deleteKey</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/delete-key/#deletekey","title":"deleteKey","text":"<p>[jvm]\\ abstract fun deleteKey(key: K, deleteExpression: Expression? = null): I?</p> <p>Deletes the item identified by key from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>If the item to be deleted has versioned attributes, load the item and use delete instead. For more information, see VersionedRecordExtension.</p> <p>[jvm]\\ open fun deleteKey(key: K): I?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/delete/","title":"delete - Tempest","text":"<p>//tempest2/app.cash.tempest2/View/delete</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/delete/#delete","title":"delete","text":"<p>[jvm]\\ abstract fun delete(item: I, deleteExpression: Expression? = null): I?</p> <p>Deletes item from its DynamoDB table using deleteExpression. Any options specified in the deleteExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>[jvm]\\ open fun delete(item: I): I?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/load/","title":"load - Tempest","text":"<p>//tempest2/app.cash.tempest2/View/load</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/load/#load","title":"load","text":"<p>[jvm]\\ abstract fun load(key: K, consistentReads: Boolean = false): I?</p> <p>Returns an item whose keys match those of the prototype key object given, or null if no such item exists.</p> <p>[jvm]\\ abstract fun load(key: K, consistentReads: Boolean = false, returnConsumedCapacity: ReturnConsumedCapacity = ReturnConsumedCapacity.TOTAL): Pair&lt;I?, ConsumedCapacity?&gt;</p> <p>open fun load(key: K): I?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/save-with-result/","title":"saveWithResult - Tempest","text":"<p>//tempest2/app.cash.tempest2/View/saveWithResult</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/save-with-result/#savewithresult","title":"saveWithResult","text":"<p>[jvm]\\ abstract fun saveWithResult(item: I, saveExpression: Expression? = null): I</p> <p>This method requires the WithResultExtension to be installed on the DynamoDbEnhancedClient. This extension must be installed last!</p> <p>Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet.</p> <p>Any options specified in the saveExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>Any auto generated in memory updates will be reflected in the result item.</p> <p>[jvm]\\ open fun saveWithResult(item: I): I</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/save/","title":"save - Tempest","text":"<p>//tempest2/app.cash.tempest2/View/save</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-view/save/#save","title":"save","text":"<p>[jvm]\\ abstract fun save(item: I, saveExpression: Expression? = null)</p> <p>Saves an item in DynamoDB. This method uses DynamoDbClient.putItem to clear and replace all attributes, including unmodeled ones, on save. Partial update, i.e. DynamoDbClient.updateItem, is not supported yet.</p> <p>Any options specified in the saveExpression parameter will be overlaid on any constraints due to versioned attributes.</p> <p>[jvm]\\ open fun save(item: I)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/","title":"WorkerId - Tempest","text":"<p>//tempest2/app.cash.tempest2/WorkerId</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/#workerid","title":"WorkerId","text":"<p>[jvm]\\ data class WorkerId(val segment: Int, val totalSegments: Int)</p> <p>In the context of parallel scans, a worker is analogous to a thread or an operating system process. Each worker then issues its own Scan request with a unique WorkerId, which represents a tuple of <code>segment</code> and <code>totalSegments</code>.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/#constructors","title":"Constructors","text":"WorkerId [jvm]constructor(segment: Int, totalSegments: Int)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/#properties","title":"Properties","text":"Name Summary segment [jvm]val segment: Int totalSegments [jvm]val totalSegments: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/-worker-id/","title":"WorkerId - Tempest","text":"<p>//tempest2/app.cash.tempest2/WorkerId/WorkerId</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/-worker-id/#workerid","title":"WorkerId","text":"<p>[jvm]\\ constructor(segment: Int, totalSegments: Int)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/segment/","title":"segment - Tempest","text":"<p>//tempest2/app.cash.tempest2/WorkerId/segment</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/segment/#segment","title":"segment","text":"<p>[jvm]\\ val segment: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/total-segments/","title":"totalSegments - Tempest","text":"<p>//tempest2/app.cash.tempest2/WorkerId/totalSegments</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-worker-id/total-segments/#totalsegments","title":"totalSegments","text":"<p>[jvm]\\ val totalSegments: Int</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/","title":"WritingPager - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/#writingpager","title":"WritingPager","text":"<p>[jvm]\\ class WritingPager&lt;T&gt;@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)</p> <p>A control flow abstraction for paging transactional writes.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/#constructors","title":"Constructors","text":"WritingPager [jvm]@JvmOverloadsconstructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/#types","title":"Types","text":"Name Summary Handler [jvm]interface Handler&lt;T&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/#properties","title":"Properties","text":"Name Summary remainingUpdates [jvm]val remainingUpdates: List&lt;T&gt;A snapshot of the elements yet to be updated. updatedCount [jvm]var updatedCount: IntThe number of updates successfully applied."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/#functions","title":"Functions","text":"Name Summary execute [jvm]fun execute()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-writing-pager/","title":"WritingPager - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/WritingPager</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-writing-pager/#writingpager","title":"WritingPager","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(db: LogicalDb, updates: List&lt;T&gt;, maxTransactionItems: Int = 25, handler: WritingPager.Handler&lt;T&gt;)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/execute/","title":"execute - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/execute</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/execute/#execute","title":"execute","text":"<p>[jvm]\\ fun execute()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/remaining-updates/","title":"remainingUpdates - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/remainingUpdates</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/remaining-updates/#remainingupdates","title":"remainingUpdates","text":"<p>[jvm]\\ val remainingUpdates: List&lt;T&gt;</p> <p>A snapshot of the elements yet to be updated.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/updated-count/","title":"updatedCount - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/updatedCount</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/updated-count/#updatedcount","title":"updatedCount","text":"<p>[jvm]\\ var updatedCount: Int</p> <p>The number of updates successfully applied.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/","title":"Handler - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/#handler","title":"Handler","text":"<p>[jvm]\\ interface Handler&lt;T&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/#functions","title":"Functions","text":"Name Summary beforePage [jvm]abstract fun beforePage(remainingUpdates: List&lt;@JvmSuppressWildcardsT&gt;, maxTransactionItems: Int): IntInvoked before each page with the full set of updates yet be processed. eachPage [jvm]abstract fun eachPage(proceed: () -&gt; Unit)Intercept each page\u2019s processing. Use this to decorate processing with metrics or retries. finishPage [jvm]abstract fun finishPage(builder: TransactionWriteSet.Builder)Invoked after a page of items has been computed. item [jvm]abstract fun item(builder: TransactionWriteSet.Builder, item: T)Invoked to update each item. pageWritten [jvm]open fun pageWritten(writeSet: TransactionWriteSet)Invoked after a page of items has been written."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/before-page/","title":"beforePage - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler/beforePage</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/before-page/#beforepage","title":"beforePage","text":"<p>[jvm]\\ abstract fun beforePage(remainingUpdates: List&lt;@JvmSuppressWildcardsT&gt;, maxTransactionItems: Int): Int</p> <p>Invoked before each page with the full set of updates yet be processed.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/before-page/#return","title":"Return","text":"<p>the number of updates that fits in the current page.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/before-page/#parameters","title":"Parameters","text":"<p>jvm</p> remainingUpdates all remaining updates. This may be more than a single page of     entities."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/each-page/","title":"eachPage - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler/eachPage</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/each-page/#eachpage","title":"eachPage","text":"<p>[jvm]\\ abstract fun eachPage(proceed: () -&gt; Unit)</p> <p>Intercept each page\u2019s processing. Use this to decorate processing with metrics or retries.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/finish-page/","title":"finishPage - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler/finishPage</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/finish-page/#finishpage","title":"finishPage","text":"<p>[jvm]\\ abstract fun finishPage(builder: TransactionWriteSet.Builder)</p> <p>Invoked after a page of items has been computed.</p> <p>NB: the page has not been written at this point. This method is called just prior to writing the page. Use pageWritten for handling a page after it has written successfully.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/item/","title":"item - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler/item</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/item/#item","title":"item","text":"<p>[jvm]\\ abstract fun item(builder: TransactionWriteSet.Builder, item: T)</p> <p>Invoked to update each item.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/page-written/","title":"pageWritten - Tempest","text":"<p>//tempest2/app.cash.tempest2/WritingPager/Handler/pageWritten</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2/-writing-pager/-handler/page-written/#pagewritten","title":"pageWritten","text":"<p>[jvm]\\ open fun pageWritten(writeSet: TransactionWriteSet)</p> <p>Invoked after a page of items has been written.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/","title":"Package-level declarations - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/#types","title":"Types","text":"Name Summary TempestAutoGeneratedTimeStamp [jvm]@Target(allowedTargets = [AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER])annotation class TempestAutoGeneratedTimeStamp(val writeMode: WriteMode)Requires TempestAutoGeneratedTimestampRecordExtension to be installed on the DynamoDbEnhancedClient TempestAutoGeneratedTimestampRecordExtension [jvm]class TempestAutoGeneratedTimestampRecordExtension : DynamoDbEnhancedClientExtensionAn extension that automatically sets timestamps on fields annotated with TempestAutoGeneratedTimeStamp supporting both created at and updated at timestamps.  Additionally, supports Date types. Usage of Date type requires installing TempestDateAttributeConverterProvider on your DynamoDbBean or TempestDateAttributeConverter on each attribute.  You may also implement a custom converter. TempestDateAttributeConverter [jvm]class TempestDateAttributeConverter : AttributeConverter&lt;Date&gt; TempestDateAttributeConverterProvider [jvm]class TempestDateAttributeConverterProvider : AttributeConverterProvider WithResultExtension [jvm]class WithResultExtension : DynamoDbEnhancedClientExtensionEnables WithResult APIs that reflect the auto generated updates to the item in the response. WriteMode [jvm]enum WriteMode : Enum&lt;WriteMode&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/","title":"TempestAutoGeneratedTimeStamp - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimeStamp</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/#tempestautogeneratedtimestamp","title":"TempestAutoGeneratedTimeStamp","text":"<p>@Target(allowedTargets = [AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER])</p> <p>annotation class TempestAutoGeneratedTimeStamp(val writeMode: WriteMode)</p> <p>Requires TempestAutoGeneratedTimestampRecordExtension to be installed on the DynamoDbEnhancedClient</p> <p>If using a Date attribute you must use TempestDateAttributeConverterProvider on the DynamoDbBean, TempestDateAttributeConverter on the attribute, or implement your own AttributeConverter</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/#parameters","title":"Parameters","text":"<p>jvm</p> writeMode whether to only write the timestamp on create or any time there is an update/put.Denotes this attribute as recording the auto generated created at timestamp for the record. When the annotated attribute is null during write it will be updated with the current time stamp."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/#properties","title":"Properties","text":"Name Summary writeMode [jvm]val writeMode: WriteMode"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/write-mode/","title":"writeMode - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimeStamp/writeMode</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/write-mode/#writemode","title":"writeMode","text":"<p>[jvm]\\ val writeMode: WriteMode</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-time-stamp/write-mode/#parameters","title":"Parameters","text":"<p>jvm</p> writeMode whether to only write the timestamp on create or any time there is an update/put.Denotes this attribute as recording the auto generated created at timestamp for the record. When the annotated attribute is null during write it will be updated with the current time stamp."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/","title":"TempestAutoGeneratedTimestampRecordExtension - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/#tempestautogeneratedtimestamprecordextension","title":"TempestAutoGeneratedTimestampRecordExtension","text":"<p>[jvm]\\ class TempestAutoGeneratedTimestampRecordExtension : DynamoDbEnhancedClientExtension</p> <p>An extension that automatically sets timestamps on fields annotated with TempestAutoGeneratedTimeStamp supporting both created at and updated at timestamps.  Additionally, supports Date types. Usage of Date type requires installing TempestDateAttributeConverterProvider on your DynamoDbBean or TempestDateAttributeConverter on each attribute.  You may also implement a custom converter.</p> <p>This implementation is a port of AutoGeneratedTimestampRecordExtension</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/#functions","title":"Functions","text":"Name Summary afterRead [jvm]open fun afterRead(p0: DynamoDbExtensionContext.AfterRead): ReadModification beforeWrite [jvm]open override fun beforeWrite(context: DynamoDbExtensionContext.BeforeWrite): WriteModification"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/before-write/","title":"beforeWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/beforeWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/before-write/#beforewrite","title":"beforeWrite","text":"<p>[jvm]\\ open override fun beforeWrite(context: DynamoDbExtensionContext.BeforeWrite): WriteModification</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/","title":"Companion - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/#types","title":"Types","text":"Name Summary TempestAutoGeneratedTimestampMetadata [jvm]data class TempestAutoGeneratedTimestampMetadata(val writeMode: WriteMode, val rawType: Class&lt;*&gt;, val attributeName: String)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(): TempestAutoGeneratedTimestampRecordExtensionfun create(clock: Clock): TempestAutoGeneratedTimestampRecordExtension"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/create/","title":"create - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/create</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun create(clock: Clock): TempestAutoGeneratedTimestampRecordExtension</p> <p>fun create(): TempestAutoGeneratedTimestampRecordExtension</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/","title":"TempestAutoGeneratedTimestampMetadata - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/TempestAutoGeneratedTimestampMetadata</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/#tempestautogeneratedtimestampmetadata","title":"TempestAutoGeneratedTimestampMetadata","text":"<p>[jvm]\\ data class TempestAutoGeneratedTimestampMetadata(val writeMode: WriteMode, val rawType: Class&lt;*&gt;, val attributeName: String)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/#constructors","title":"Constructors","text":"TempestAutoGeneratedTimestampMetadata [jvm]constructor(writeMode: WriteMode, rawType: Class&lt;*&gt;, attributeName: String)"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/#properties","title":"Properties","text":"Name Summary attributeName [jvm]val attributeName: String rawType [jvm]val rawType: Class&lt;*&gt; writeMode [jvm]val writeMode: WriteMode"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/-tempest-auto-generated-timestamp-metadata/","title":"TempestAutoGeneratedTimestampMetadata - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/TempestAutoGeneratedTimestampMetadata/TempestAutoGeneratedTimestampMetadata</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/-tempest-auto-generated-timestamp-metadata/#tempestautogeneratedtimestampmetadata","title":"TempestAutoGeneratedTimestampMetadata","text":"<p>[jvm]\\ constructor(writeMode: WriteMode, rawType: Class&lt;*&gt;, attributeName: String)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/attribute-name/","title":"attributeName - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/TempestAutoGeneratedTimestampMetadata/attributeName</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/attribute-name/#attributename","title":"attributeName","text":"<p>[jvm]\\ val attributeName: String</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/raw-type/","title":"rawType - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/TempestAutoGeneratedTimestampMetadata/rawType</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/raw-type/#rawtype","title":"rawType","text":"<p>[jvm]\\ val rawType: Class&lt;*&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/write-mode/","title":"writeMode - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestAutoGeneratedTimestampRecordExtension/Companion/TempestAutoGeneratedTimestampMetadata/writeMode</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-auto-generated-timestamp-record-extension/-companion/-tempest-auto-generated-timestamp-metadata/write-mode/#writemode","title":"writeMode","text":"<p>[jvm]\\ val writeMode: WriteMode</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/","title":"TempestDateAttributeConverter - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/#tempestdateattributeconverter","title":"TempestDateAttributeConverter","text":"<p>[jvm]\\ class TempestDateAttributeConverter : AttributeConverter&lt;Date&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/#constructors","title":"Constructors","text":"TempestDateAttributeConverter [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/#functions","title":"Functions","text":"Name Summary attributeValueType [jvm]open override fun attributeValueType(): AttributeValueType transformFrom [jvm]open override fun transformFrom(input: Date): AttributeValue transformTo [jvm]open override fun transformTo(input: AttributeValue): Date type [jvm]open override fun type(): EnhancedType&lt;Date&gt;"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/-tempest-date-attribute-converter/","title":"TempestDateAttributeConverter - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter/TempestDateAttributeConverter</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/-tempest-date-attribute-converter/#tempestdateattributeconverter","title":"TempestDateAttributeConverter","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/attribute-value-type/","title":"attributeValueType - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter/attributeValueType</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/attribute-value-type/#attributevaluetype","title":"attributeValueType","text":"<p>[jvm]\\ open override fun attributeValueType(): AttributeValueType</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/transform-from/","title":"transformFrom - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter/transformFrom</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/transform-from/#transformfrom","title":"transformFrom","text":"<p>[jvm]\\ open override fun transformFrom(input: Date): AttributeValue</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/transform-to/","title":"transformTo - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter/transformTo</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/transform-to/#transformto","title":"transformTo","text":"<p>[jvm]\\ open override fun transformTo(input: AttributeValue): Date</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/type/","title":"type - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverter/type</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter/type/#type","title":"type","text":"<p>[jvm]\\ open override fun type(): EnhancedType&lt;Date&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/","title":"TempestDateAttributeConverterProvider - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverterProvider</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/#tempestdateattributeconverterprovider","title":"TempestDateAttributeConverterProvider","text":"<p>[jvm]\\ class TempestDateAttributeConverterProvider : AttributeConverterProvider</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/#constructors","title":"Constructors","text":"TempestDateAttributeConverterProvider [jvm]constructor()"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/#functions","title":"Functions","text":"Name Summary converterFor [jvm]open override fun &lt;T : Any&gt; converterFor(enhancedType: EnhancedType&lt;T&gt;): AttributeConverter&lt;T&gt;?"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/-tempest-date-attribute-converter-provider/","title":"TempestDateAttributeConverterProvider - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverterProvider/TempestDateAttributeConverterProvider</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/-tempest-date-attribute-converter-provider/#tempestdateattributeconverterprovider","title":"TempestDateAttributeConverterProvider","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/converter-for/","title":"converterFor - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverterProvider/converterFor</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/converter-for/#converterfor","title":"converterFor","text":"<p>[jvm]\\ open override fun &lt;T : Any&gt; converterFor(enhancedType: EnhancedType&lt;T&gt;): AttributeConverter&lt;T&gt;?</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/-companion/","title":"Companion - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/TempestDateAttributeConverterProvider/Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-tempest-date-attribute-converter-provider/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/","title":"WithResultExtension - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WithResultExtension</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/#withresultextension","title":"WithResultExtension","text":"<p>[jvm]\\ class WithResultExtension : DynamoDbEnhancedClientExtension</p> <p>Enables WithResult APIs that reflect the auto generated updates to the item in the response.</p> <p>This extension must be installed to use these APIs. This extension must be installed last!</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/#functions","title":"Functions","text":"Name Summary afterRead [jvm]open fun afterRead(p0: DynamoDbExtensionContext.AfterRead): ReadModification beforeWrite [jvm]open override fun beforeWrite(context: DynamoDbExtensionContext.BeforeWrite): WriteModification"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/before-write/","title":"beforeWrite - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WithResultExtension/beforeWrite</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/before-write/#beforewrite","title":"beforeWrite","text":"<p>[jvm]\\ open override fun beforeWrite(context: DynamoDbExtensionContext.BeforeWrite): WriteModification</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/before-write/#return","title":"Return","text":"<p>WriteModification Instance updated with attribute updated with Extension.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/before-write/#parameters","title":"Parameters","text":"<p>jvm</p> context The DynamoDbExtensionContext.BeforeWrite context containing the state of the execution."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/","title":"Companion - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WithResultExtension/Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/#types","title":"Types","text":"Name Summary WithResultExtensionInstalledLast [jvm]@Target(allowedTargets = [AnnotationTarget.CLASS, AnnotationTarget.FUNCTION])annotation class WithResultExtensionInstalledLast"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(): WithResultExtensionCreate an instance of the extension."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/create/","title":"create - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WithResultExtension/Companion/create</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun create(): WithResultExtension</p> <p>Create an instance of the extension.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/-with-result-extension-installed-last/","title":"WithResultExtensionInstalledLast - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WithResultExtension/Companion/WithResultExtensionInstalledLast</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-with-result-extension/-companion/-with-result-extension-installed-last/#withresultextensioninstalledlast","title":"WithResultExtensionInstalledLast","text":"<p>[jvm]\\ @Target(allowedTargets = [AnnotationTarget.CLASS, AnnotationTarget.FUNCTION])</p> <p>annotation class WithResultExtensionInstalledLast</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/","title":"WriteMode - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/#writemode","title":"WriteMode","text":"<p>[jvm]\\ enum WriteMode : Enum&lt;WriteMode&gt;</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/#entries","title":"Entries","text":"ALWAYS [jvm]ALWAYS CREATE [jvm]CREATE"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/#properties","title":"Properties","text":"Name Summary entries [jvm]val entries: EnumEntries&lt;WriteMode&gt;Returns a representation of an immutable list of all enum entries, in the order they\u2019re declared. name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/#functions","title":"Functions","text":"Name Summary valueOf [jvm]fun valueOf(value: String): WriteModeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]fun values(): Array&lt;WriteMode&gt;Returns an array containing the constants of this enum type, in the order they\u2019re declared."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/entries/","title":"entries - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode/entries</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/entries/#entries","title":"entries","text":"<p>[jvm]\\ val entries: EnumEntries&lt;WriteMode&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they\u2019re declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/value-of/","title":"valueOf - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode/valueOf</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ fun valueOf(value: String): WriteMode</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/values/","title":"values - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode/values</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/values/#values","title":"values","text":"<p>[jvm]\\ fun values(): Array&lt;WriteMode&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they\u2019re declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-a-l-w-a-y-s/","title":"ALWAYS - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode/ALWAYS</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-a-l-w-a-y-s/#always","title":"ALWAYS","text":"<p>[jvm]\\ ALWAYS</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-a-l-w-a-y-s/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-c-r-e-a-t-e/","title":"CREATE - Tempest","text":"<p>//tempest2/app.cash.tempest2.extensions/WriteMode/CREATE</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-c-r-e-a-t-e/#create","title":"CREATE","text":"<p>[jvm]\\ CREATE</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.extensions/-write-mode/-c-r-e-a-t-e/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/","title":"Package-level declarations - Tempest","text":"<p>//tempest2/app.cash.tempest2.internal</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/#types","title":"Types","text":"Name Summary TableSchemaFactory [jvm]object TableSchemaFactory"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/-table-schema-factory/","title":"TableSchemaFactory - Tempest","text":"<p>//tempest2/app.cash.tempest2.internal/TableSchemaFactory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/-table-schema-factory/#tableschemafactory","title":"TableSchemaFactory","text":"<p>[jvm]\\ object TableSchemaFactory</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/-table-schema-factory/#functions","title":"Functions","text":"Name Summary create [jvm]inline fun &lt;T&gt; create(): TableSchema&lt;T&gt;[jvm]fun &lt;T&gt; create(clazz: Class&lt;*&gt;): TableSchema&lt;T&gt;Compute the TableSchema, which a moderately expensive operation, and cache the result."},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/-table-schema-factory/create/","title":"create - Tempest","text":"<p>//tempest2/app.cash.tempest2.internal/TableSchemaFactory/create</p>"},{"location":"1.x/tempest2/tempest2/app.cash.tempest2.internal/-table-schema-factory/create/#create","title":"create","text":"<p>[jvm]\\ fun &lt;T&gt; create(clazz: Class&lt;*&gt;): TableSchema&lt;T&gt;</p> <p>Compute the TableSchema, which a moderately expensive operation, and cache the result.</p> <p>[jvm]\\ inline fun &lt;T&gt; create(): TableSchema&lt;T&gt;</p>"},{"location":"1.x/tempest2-testing/","title":"tempest2-testing - Tempest","text":"<p>//tempest2-testing</p>"},{"location":"1.x/tempest2-testing/#tempest2-testing","title":"tempest2-testing","text":""},{"location":"1.x/tempest2-testing/#packages","title":"Packages","text":"Name app.cash.tempest2.testing"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/#types","title":"Types","text":"Name Summary AsyncLogicalDb [jvm]typealias AsyncLogicalDb = app.cash.tempest2.AsyncLogicalDb TestDynamoDbClient [jvm]interface TestDynamoDbClient : Service TestDynamoDbServer [jvm]interface TestDynamoDbServer : ServiceA DynamoDB test server running in-process or in a local Docker container. TestTable [jvm]data class TestTableUse this with TestDynamoDbClient to configure your DynamoDB tables for each test execution."},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/#functions","title":"Functions","text":"Name Summary asyncLogicalDb [jvm]inline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DBinline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB logicalDb [jvm]inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DBinline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/async-logical-db/","title":"asyncLogicalDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/asyncLogicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/async-logical-db/#asynclogicaldb","title":"asyncLogicalDb","text":"<p>[jvm]\\ inline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DB</p> <p>inline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/logical-db/","title":"logicalDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/logicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/logical-db/#logicaldb","title":"logicalDb","text":"<p>[jvm]\\ inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DB</p> <p>inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-async-logical-db/","title":"AsyncLogicalDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/AsyncLogicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-async-logical-db/#asynclogicaldb","title":"AsyncLogicalDb","text":"<p>[jvm]\\ typealias AsyncLogicalDb = app.cash.tempest2.AsyncLogicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/","title":"TestDynamoDbClient - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/#testdynamodbclient","title":"TestDynamoDbClient","text":"<p>[jvm]\\ interface TestDynamoDbClient : Service</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/#properties","title":"Properties","text":"Name Summary asyncDynamoDb [jvm]abstract val asyncDynamoDb: DynamoDbAsyncClientA DynamoDB instance that is usable while this service is running. asyncDynamoDbStreams [jvm]abstract val asyncDynamoDbStreams: DynamoDbStreamsAsyncClientA DynamoDB streams instance that is usable while this service is running. dynamoDb [jvm]abstract val dynamoDb: DynamoDbClientA DynamoDB instance that is usable while this service is running. dynamoDbStreams [jvm]abstract val dynamoDbStreams: DynamoDbStreamsClientA DynamoDB streams instance that is usable while this service is running. tables [jvm]abstract val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/#functions","title":"Functions","text":"Name Summary addListener [jvm]abstract fun addListener(p0: Service.Listener, p1: Executor) asyncLogicalDb [jvm]open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB asyncLogicalDb [jvm]inline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DBinline fun &lt;DB : AsyncLogicalDb&gt; TestDynamoDbClient.asyncLogicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB awaitRunning [jvm]abstract fun awaitRunning()open fun awaitRunning(p0: Duration)abstract fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]abstract fun awaitTerminated()open fun awaitTerminated(p0: Duration)abstract fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]abstract fun failureCause(): Throwable isRunning [jvm]abstract fun isRunning(): Boolean logicalDb [jvm]open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB logicalDb [jvm]inline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(vararg extensions: DynamoDbEnhancedClientExtension, tableNameResolver: TableNameResolver? = null): DBinline fun &lt;DB : LogicalDb&gt; TestDynamoDbClient.logicalDb(extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB reset [jvm]abstract fun reset()Cleans up tables in between test runs. startAsync [jvm]@CanIgnoreReturnValueabstract fun startAsync(): Service state [jvm]abstract fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueabstract fun stopAsync(): Service"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-dynamo-db-streams/","title":"asyncDynamoDbStreams - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/asyncDynamoDbStreams</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-dynamo-db-streams/#asyncdynamodbstreams","title":"asyncDynamoDbStreams","text":"<p>[jvm]\\ abstract val asyncDynamoDbStreams: DynamoDbStreamsAsyncClient</p> <p>A DynamoDB streams instance that is usable while this service is running.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-dynamo-db/","title":"asyncDynamoDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/asyncDynamoDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-dynamo-db/#asyncdynamodb","title":"asyncDynamoDb","text":"<p>[jvm]\\ abstract val asyncDynamoDb: DynamoDbAsyncClient</p> <p>A DynamoDB instance that is usable while this service is running.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-logical-db/","title":"asyncLogicalDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/asyncLogicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/async-logical-db/#asynclogicaldb","title":"asyncLogicalDb","text":"<p>[jvm]\\ open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DB</p> <p>open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DB</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/dynamo-db-streams/","title":"dynamoDbStreams - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/dynamoDbStreams</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/dynamo-db-streams/#dynamodbstreams","title":"dynamoDbStreams","text":"<p>[jvm]\\ abstract val dynamoDbStreams: DynamoDbStreamsClient</p> <p>A DynamoDB streams instance that is usable while this service is running.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/dynamo-db/","title":"dynamoDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/dynamoDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/dynamo-db/#dynamodb","title":"dynamoDb","text":"<p>[jvm]\\ abstract val dynamoDb: DynamoDbClient</p> <p>A DynamoDB instance that is usable while this service is running.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/logical-db/","title":"logicalDb - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/logicalDb</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/logical-db/#logicaldb","title":"logicalDb","text":"<p>[jvm]\\ open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver? = null): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DB</p> <p>open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DB</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/reset/","title":"reset - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/reset</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/reset/#reset","title":"reset","text":"<p>[jvm]\\ abstract fun reset()</p> <p>Cleans up tables in between test runs.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/tables/","title":"tables - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbClient/tables</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-client/tables/#tables","title":"tables","text":"<p>[jvm]\\ abstract val tables: List&lt;TestTable&gt;</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/","title":"TestDynamoDbServer - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbServer</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/#testdynamodbserver","title":"TestDynamoDbServer","text":"<p>[jvm]\\ interface TestDynamoDbServer : Service</p> <p>A DynamoDB test server running in-process or in a local Docker container.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]interface Factory&lt;T : TestDynamoDbServer&gt;"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]abstract val id: String port [jvm]abstract val port: Int"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]abstract fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]abstract fun awaitRunning()open fun awaitRunning(p0: Duration)abstract fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]abstract fun awaitTerminated()open fun awaitTerminated(p0: Duration)abstract fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]abstract fun failureCause(): Throwable isRunning [jvm]abstract fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueabstract fun startAsync(): Service state [jvm]abstract fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueabstract fun stopAsync(): Service"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbServer/id</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ abstract val id: String</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbServer/port</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ abstract val port: Int</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbServer/Factory</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ interface Factory&lt;T : TestDynamoDbServer&gt;</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open fun create(port: Int): Tabstract fun create(port: Int, onBeforeStartup: () -&gt; Unit): T"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open fun create(port: Int): T</p> <p>abstract fun create(port: Int, onBeforeStartup: () -&gt; Unit): T</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/","title":"TestTable - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/#testtable","title":"TestTable","text":"<p>[jvm]\\ data class TestTable</p> <p>Use this with TestDynamoDbClient to configure your DynamoDB tables for each test execution.</p> <p>Use configureTable to customize the table creation request for testing, such as to configure the secondary indexes required by <code>ProjectionType.ALL</code>.</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/#properties","title":"Properties","text":"Name Summary configureTable [jvm]val configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest tableClass [jvm]val tableClass: KClass&lt;*&gt; tableName [jvm]val tableName: String"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/configure-table/","title":"configureTable - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable/configureTable</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/configure-table/#configuretable","title":"configureTable","text":"<p>[jvm]\\ val configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/table-class/","title":"tableClass - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable/tableClass</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/table-class/#tableclass","title":"tableClass","text":"<p>[jvm]\\ val tableClass: KClass&lt;*&gt;</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/table-name/","title":"tableName - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable/tableName</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/table-name/#tablename","title":"tableName","text":"<p>[jvm]\\ val tableName: String</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/-companion/","title":"Companion - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable/Companion</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]inline fun &lt;T&gt; create(tableName: String, noinline configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTable@JvmStatic@JvmOverloadsfun create(tableName: String, tableClass: Class&lt;&gt;, configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTablefun create(tableName: String, tableClass: KClass&lt;&gt;, configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTable"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/-companion/create/","title":"create - Tempest","text":"<p>//tempest2-testing/app.cash.tempest2.testing/TestTable/Companion/create</p>"},{"location":"1.x/tempest2-testing/tempest2-testing/app.cash.tempest2.testing/-test-table/-companion/create/#create","title":"create","text":"<p>[jvm]\\ inline fun &lt;T&gt; create(tableName: String, noinline configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTable</p> <p>fun create(tableName: String, tableClass: KClass&lt;*&gt;, configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTable</p> <p>@JvmStatic</p> <p>@JvmOverloads</p> <p>fun create(tableName: String, tableClass: Class&lt;*&gt;, configureTable: (CreateTableEnhancedRequest) -&gt; CreateTableEnhancedRequest = { it }): TestTable</p>"},{"location":"1.x/tempest2-testing-docker/","title":"tempest2-testing-docker - Tempest","text":"<p>//tempest2-testing-docker</p>"},{"location":"1.x/tempest2-testing-docker/#tempest2-testing-docker","title":"tempest2-testing-docker","text":""},{"location":"1.x/tempest2-testing-docker/#packages","title":"Packages","text":"Name app.cash.tempest2.testing"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/#types","title":"Types","text":"Name Summary Composer [jvm]class Composer(name: String, containers: Container)Composer composes many Containers together to use in a unit test. Container [jvm]data class Container(val createCmd: CreateContainerCmd.() -&gt; Unit, val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)A Container creates a Docker container for testing. DockerDynamoDbServer [jvm]class DockerDynamoDbServer : AbstractIdleService, TestDynamoDbServer"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/","title":"Composer - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Composer</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/#composer","title":"Composer","text":"<p>[jvm]\\ class Composer(name: String, containers: Container)</p> <p>Composer composes many Containers together to use in a unit test.</p> <p>The Containers are networked using a dedicated Docker network. Tests need to expose ports in order for the test to communicate with the containers over 127.0.0.1.</p> <p>The following example composes Kafka and Zookeeper containers for testing. Kafka is exposed to the jUnit test via 127.0.0.1:9102. In this example, Zookeeper is not exposed to the test.</p> <pre><code>    val zkContainer = Container {\n        withImage(\"confluentinc/cp-zookeeper\")\n        withName(\"zookeeper\")\n        withEnv(\"ZOOKEEPER_CLIENT_PORT=2181\")\n    }\n    val kafka = Container {\n        withImage(\"confluentinc/cp-kafka\")\n        withName(\"kafka\")\n        withExposedPorts(ExposedPort.tcp(port))\n        withPortBindings(Ports().apply {\n          bind(ExposedPort.tcp(9102), Ports.Binding.bindPort(9102))\n        })\n        withEnv(\n          \"KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\",\n          \"KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9102\")\n        }\n    val composer = Composer(\"e-kafka\", zkContainer, kafka)\n    composer.start()\n</code></pre>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/#constructors","title":"Constructors","text":"Composer [jvm]constructor(name: String, vararg containers: Container)"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/#properties","title":"Properties","text":"Name Summary running [jvm]val running: AtomicBoolean"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/#functions","title":"Functions","text":"Name Summary start [jvm]fun start() stop [jvm]fun stop()"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/-composer/","title":"Composer - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Composer/Composer</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/-composer/#composer","title":"Composer","text":"<p>[jvm]\\ constructor(name: String, vararg containers: Container)</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/running/","title":"running - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Composer/running</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/running/#running","title":"running","text":"<p>[jvm]\\ val running: AtomicBoolean</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/start/","title":"start - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Composer/start</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/start/#start","title":"start","text":"<p>[jvm]\\ fun start()</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/stop/","title":"stop - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Composer/stop</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-composer/stop/#stop","title":"stop","text":"<p>[jvm]\\ fun stop()</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/","title":"Container - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Container</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/#container","title":"Container","text":"<p>[jvm]\\ data class Container(val createCmd: CreateContainerCmd.() -&gt; Unit, val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)</p> <p>A Container creates a Docker container for testing.</p> <p>Tests provide a lambda to build a CreateContainerCmd. The createCmd lambda must set CreateContainerCmd.withName and CreateContainerCmd.withImage. All other fields are optional. The Composer takes care of setting up the network.</p> <p>There may be a need to configure your container between the creation and start steps. beforeStartHook provides you with an id to your container allowing you to manipulate as necessary before the command/entrypoint is invoked.</p> <p>See Composer for an example.</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/#constructors","title":"Constructors","text":"Container [jvm]constructor(createCmd: CreateContainerCmd.() -&gt; Unit)constructor(createCmd: CreateContainerCmd.() -&gt; Unit, beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/#properties","title":"Properties","text":"Name Summary beforeStartHook [jvm]val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit createCmd [jvm]val createCmd: CreateContainerCmd.() -&gt; Unit"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/-container/","title":"Container - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Container/Container</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/-container/#container","title":"Container","text":"<p>[jvm]\\ constructor(createCmd: CreateContainerCmd.() -&gt; Unit)</p> <p>constructor(createCmd: CreateContainerCmd.() -&gt; Unit, beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit)</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/before-start-hook/","title":"beforeStartHook - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Container/beforeStartHook</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/before-start-hook/#beforestarthook","title":"beforeStartHook","text":"<p>[jvm]\\ val beforeStartHook: (docker: DockerClient, id: String) -&gt; Unit</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/create-cmd/","title":"createCmd - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/Container/createCmd</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-container/create-cmd/#createcmd","title":"createCmd","text":"<p>[jvm]\\ val createCmd: CreateContainerCmd.() -&gt; Unit</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/","title":"DockerDynamoDbServer - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/DockerDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/#dockerdynamodbserver","title":"DockerDynamoDbServer","text":"<p>[jvm]\\ class DockerDynamoDbServer : AbstractIdleService, TestDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]object Factory : TestDynamoDbServer.Factory&lt;DockerDynamoDbServer&gt;"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]open override val id: String port [jvm]open override val port: Int"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(listener: Service.Listener, executor: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(timeout: Duration)override fun awaitRunning(timeout: Long, unit: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(timeout: Duration)override fun awaitTerminated(timeout: Long, unit: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/DockerDynamoDbServer/id</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ open override val id: String</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/DockerDynamoDbServer/port</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ open override val port: Int</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/DockerDynamoDbServer/Factory</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ object Factory : TestDynamoDbServer.Factory&lt;DockerDynamoDbServer&gt;</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): DockerDynamoDbServeropen fun create(port: Int): DockerDynamoDbServer"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest2-testing-docker/app.cash.tempest2.testing/DockerDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest2-testing-docker/tempest2-testing-docker/app.cash.tempest2.testing/-docker-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): DockerDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-internal/","title":"tempest2-testing-internal - Tempest","text":"<p>//tempest2-testing-internal</p>"},{"location":"1.x/tempest2-testing-internal/#tempest2-testing-internal","title":"tempest2-testing-internal","text":""},{"location":"1.x/tempest2-testing-internal/#packages","title":"Packages","text":"Name app.cash.tempest2.testing.internal"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/#types","title":"Types","text":"Name Summary DefaultTestDynamoDbClient [jvm]class DefaultTestDynamoDbClient(val tables: List&lt;TestTable&gt;, port: Int) : AbstractIdleService, TestDynamoDbClient Tag [jvm]typealias Tag = Pair&lt;String, Any?&gt; TestDynamoDbService [jvm]class TestDynamoDbService(val client: TestDynamoDbClient, val server: TestDynamoDbServer) : AbstractIdleServiceThis Guava service spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/#functions","title":"Functions","text":"Name Summary allocateRandomPort [jvm]fun allocateRandomPort(): ServerSocket buildAsyncDynamoDb [jvm]fun buildAsyncDynamoDb(port: Int): DynamoDbAsyncClientfun buildAsyncDynamoDb(host: String, port: Int): DynamoDbAsyncClient buildAsyncDynamoDbStreams [jvm]fun buildAsyncDynamoDbStreams(port: Int): DynamoDbStreamsAsyncClientfun buildAsyncDynamoDbStreams(host: String, port: Int): DynamoDbStreamsAsyncClient buildDynamoDb [jvm]fun buildDynamoDb(port: Int): DynamoDbClientfun buildDynamoDb(host: String, port: Int): DynamoDbClient buildDynamoDbStreams [jvm]fun buildDynamoDbStreams(port: Int): DynamoDbStreamsClientfun buildDynamoDbStreams(host: String, port: Int): DynamoDbStreamsClient createTable [jvm]fun DynamoDbClient.createTable(table: TestTable) debug [jvm]fun KLogger.debug(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.debug(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) error [jvm]fun KLogger.error(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.error(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) getLogger [jvm]inline fun &lt;T&gt; getLogger(): KLogger hostName [jvm]fun hostName(port: Int): String info [jvm]fun KLogger.info(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.info(th: Throwable, vararg tags: Tag, message: () -&gt; Any?) isServerListening [jvm]fun isServerListening(host: String, port: Int): Boolean log [jvm]fun KLogger.log(level: Level, vararg tags: Tag, message: () -&gt; Any?)fun KLogger.log(level: Level, th: Throwable, vararg tags: Tag, message: () -&gt; Any?) pickRandomPort [jvm]fun pickRandomPort(): Int warn [jvm]fun KLogger.warn(vararg tags: Tag, message: () -&gt; Any?)fun KLogger.warn(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/allocate-random-port/","title":"allocateRandomPort - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/allocateRandomPort</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/allocate-random-port/#allocaterandomport","title":"allocateRandomPort","text":"<p>[jvm]\\ fun allocateRandomPort(): ServerSocket</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-async-dynamo-db-streams/","title":"buildAsyncDynamoDbStreams - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/buildAsyncDynamoDbStreams</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-async-dynamo-db-streams/#buildasyncdynamodbstreams","title":"buildAsyncDynamoDbStreams","text":"<p>[jvm]\\ fun buildAsyncDynamoDbStreams(port: Int): DynamoDbStreamsAsyncClient</p> <p>fun buildAsyncDynamoDbStreams(host: String, port: Int): DynamoDbStreamsAsyncClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-async-dynamo-db/","title":"buildAsyncDynamoDb - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/buildAsyncDynamoDb</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-async-dynamo-db/#buildasyncdynamodb","title":"buildAsyncDynamoDb","text":"<p>[jvm]\\ fun buildAsyncDynamoDb(port: Int): DynamoDbAsyncClient</p> <p>fun buildAsyncDynamoDb(host: String, port: Int): DynamoDbAsyncClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-dynamo-db-streams/","title":"buildDynamoDbStreams - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/buildDynamoDbStreams</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-dynamo-db-streams/#builddynamodbstreams","title":"buildDynamoDbStreams","text":"<p>[jvm]\\ fun buildDynamoDbStreams(port: Int): DynamoDbStreamsClient</p> <p>fun buildDynamoDbStreams(host: String, port: Int): DynamoDbStreamsClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-dynamo-db/","title":"buildDynamoDb - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/buildDynamoDb</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/build-dynamo-db/#builddynamodb","title":"buildDynamoDb","text":"<p>[jvm]\\ fun buildDynamoDb(port: Int): DynamoDbClient</p> <p>fun buildDynamoDb(host: String, port: Int): DynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/create-table/","title":"createTable - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/createTable</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/create-table/#createtable","title":"createTable","text":"<p>[jvm]\\ fun DynamoDbClient.createTable(table: TestTable)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/debug/","title":"debug - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/debug</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/debug/#debug","title":"debug","text":"<p>[jvm]\\ fun KLogger.debug(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.debug(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/error/","title":"error - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/error</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/error/#error","title":"error","text":"<p>[jvm]\\ fun KLogger.error(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.error(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/get-logger/","title":"getLogger - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/getLogger</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/get-logger/#getlogger","title":"getLogger","text":"<p>[jvm]\\ inline fun &lt;T&gt; getLogger(): KLogger</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/host-name/","title":"hostName - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/hostName</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/host-name/#hostname","title":"hostName","text":"<p>[jvm]\\ fun hostName(port: Int): String</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/info/","title":"info - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/info</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/info/#info","title":"info","text":"<p>[jvm]\\ fun KLogger.info(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.info(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/is-server-listening/","title":"isServerListening - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/isServerListening</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/is-server-listening/#isserverlistening","title":"isServerListening","text":"<p>[jvm]\\ fun isServerListening(host: String, port: Int): Boolean</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/log/","title":"log - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/log</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/log/#log","title":"log","text":"<p>[jvm]\\ fun KLogger.log(level: Level, vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.log(level: Level, th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/pick-random-port/","title":"pickRandomPort - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/pickRandomPort</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/pick-random-port/#pickrandomport","title":"pickRandomPort","text":"<p>[jvm]\\ fun pickRandomPort(): Int</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/warn/","title":"warn - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/warn</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/warn/#warn","title":"warn","text":"<p>[jvm]\\ fun KLogger.warn(vararg tags: Tag, message: () -&gt; Any?)</p> <p>fun KLogger.warn(th: Throwable, vararg tags: Tag, message: () -&gt; Any?)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/","title":"DefaultTestDynamoDbClient - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/#defaulttestdynamodbclient","title":"DefaultTestDynamoDbClient","text":"<p>[jvm]\\ class DefaultTestDynamoDbClient(val tables: List&lt;TestTable&gt;, port: Int) : AbstractIdleService, TestDynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/#constructors","title":"Constructors","text":"DefaultTestDynamoDbClient [jvm]constructor(tables: List&lt;TestTable&gt;, port: Int)"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/#properties","title":"Properties","text":"Name Summary asyncDynamoDb [jvm]open override val asyncDynamoDb: DynamoDbAsyncClient asyncDynamoDbStreams [jvm]open override val asyncDynamoDbStreams: DynamoDbStreamsAsyncClient dynamoDb [jvm]open override val dynamoDb: DynamoDbClient dynamoDbStreams [jvm]open override val dynamoDbStreams: DynamoDbStreamsClient tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) asyncLogicalDb [jvm]open fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean logicalDb [jvm]open fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/-default-test-dynamo-db-client/","title":"DefaultTestDynamoDbClient - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/DefaultTestDynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/-default-test-dynamo-db-client/#defaulttestdynamodbclient","title":"DefaultTestDynamoDbClient","text":"<p>[jvm]\\ constructor(tables: List&lt;TestTable&gt;, port: Int)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/async-dynamo-db-streams/","title":"asyncDynamoDbStreams - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/asyncDynamoDbStreams</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/async-dynamo-db-streams/#asyncdynamodbstreams","title":"asyncDynamoDbStreams","text":"<p>[jvm]\\ open override val asyncDynamoDbStreams: DynamoDbStreamsAsyncClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/async-dynamo-db/","title":"asyncDynamoDb - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/asyncDynamoDb</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/async-dynamo-db/#asyncdynamodb","title":"asyncDynamoDb","text":"<p>[jvm]\\ open override val asyncDynamoDb: DynamoDbAsyncClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/dynamo-db-streams/","title":"dynamoDbStreams - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/dynamoDbStreams</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/dynamo-db-streams/#dynamodbstreams","title":"dynamoDbStreams","text":"<p>[jvm]\\ open override val dynamoDbStreams: DynamoDbStreamsClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/dynamo-db/","title":"dynamoDb - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/dynamoDb</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/dynamo-db/#dynamodb","title":"dynamoDb","text":"<p>[jvm]\\ open override val dynamoDb: DynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/reset/","title":"reset - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/reset</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/reset/#reset","title":"reset","text":"<p>[jvm]\\ open override fun reset()</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/tables/","title":"tables - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/DefaultTestDynamoDbClient/tables</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-default-test-dynamo-db-client/tables/#tables","title":"tables","text":"<p>[jvm]\\ open override val tables: List&lt;TestTable&gt;</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-tag/","title":"Tag - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/Tag</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-tag/#tag","title":"Tag","text":"<p>[jvm]\\ typealias Tag = Pair&lt;String, Any?&gt;</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/","title":"TestDynamoDbService - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/#testdynamodbservice","title":"TestDynamoDbService","text":"<p>[jvm]\\ class TestDynamoDbService(val client: TestDynamoDbClient, val server: TestDynamoDbServer) : AbstractIdleService</p> <p>This Guava service spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/#constructors","title":"Constructors","text":"TestDynamoDbService [jvm]constructor(client: TestDynamoDbClient, server: TestDynamoDbServer)"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/#properties","title":"Properties","text":"Name Summary client [jvm]val client: TestDynamoDbClient server [jvm]val server: TestDynamoDbServer"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-test-dynamo-db-service/","title":"TestDynamoDbService - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService/TestDynamoDbService</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-test-dynamo-db-service/#testdynamodbservice","title":"TestDynamoDbService","text":"<p>[jvm]\\ constructor(client: TestDynamoDbClient, server: TestDynamoDbServer)</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/client/","title":"client - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService/client</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/client/#client","title":"client","text":"<p>[jvm]\\ val client: TestDynamoDbClient</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/server/","title":"server - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService/server</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/server/#server","title":"server","text":"<p>[jvm]\\ val server: TestDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-companion/","title":"Companion - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService/Companion</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun create(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;, tables: List&lt;TestTable&gt;, port: Int? = null): TestDynamoDbService"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-companion/create/","title":"create - Tempest","text":"<p>//tempest2-testing-internal/app.cash.tempest2.testing.internal/TestDynamoDbService/Companion/create</p>"},{"location":"1.x/tempest2-testing-internal/tempest2-testing-internal/app.cash.tempest2.testing.internal/-test-dynamo-db-service/-companion/create/#create","title":"create","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun create(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;, tables: List&lt;TestTable&gt;, port: Int? = null): TestDynamoDbService</p>"},{"location":"1.x/tempest2-testing-junit4/","title":"tempest2-testing-junit4 - Tempest","text":"<p>//tempest2-testing-junit4</p>"},{"location":"1.x/tempest2-testing-junit4/#tempest2-testing-junit4","title":"tempest2-testing-junit4","text":""},{"location":"1.x/tempest2-testing-junit4/#packages","title":"Packages","text":"Name app.cash.tempest2.testing"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/#types","title":"Types","text":"Name Summary TestDynamoDb [jvm]class TestDynamoDb : ExternalResource, TestDynamoDbClientThis JUnit rule spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/","title":"TestDynamoDb - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/#testdynamodb","title":"TestDynamoDb","text":"<p>[jvm]\\ class TestDynamoDb : ExternalResource, TestDynamoDbClient</p> <p>This JUnit rule spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/#properties","title":"Properties","text":"Name Summary asyncDynamoDb [jvm]open override val asyncDynamoDb: DynamoDbAsyncClient asyncDynamoDbStreams [jvm]open override val asyncDynamoDbStreams: DynamoDbStreamsAsyncClient dynamoDb [jvm]open override val dynamoDb: DynamoDbClient dynamoDbStreams [jvm]open override val dynamoDbStreams: DynamoDbStreamsClient tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/#functions","title":"Functions","text":"Name Summary addListener [jvm]open override fun addListener(p0: Service.Listener, p1: Executor) apply [jvm]open override fun apply(p0: Statement, p1: Description): Statement asyncLogicalDb [jvm]open override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB awaitRunning [jvm]open override fun awaitRunning()open fun awaitRunning(p0: Duration)open override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]open override fun awaitTerminated()open fun awaitTerminated(p0: Duration)open override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]open override fun failureCause(): Throwable isRunning [jvm]open override fun isRunning(): Boolean logicalDb [jvm]open override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueopen override fun startAsync(): Service state [jvm]open override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueopen override fun stopAsync(): Service"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/","title":"Builder - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/#functions","title":"Functions","text":"Name Summary addTable [jvm]fun addTable(table: TestTable): TestDynamoDb.Builder addTables [jvm]fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder build [jvm]fun build(): TestDynamoDb port [jvm]fun port(port: Int): TestDynamoDb.Builder"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder/Builder</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-table/","title":"addTable - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder/addTable</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-table/#addtable","title":"addTable","text":"<p>[jvm]\\ fun addTable(table: TestTable): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-tables/","title":"addTables - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder/addTables</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-tables/#addtables","title":"addTables","text":"<p>[jvm]\\ fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/build/","title":"build - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder/build</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TestDynamoDb</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/port/","title":"port - Tempest","text":"<p>//tempest2-testing-junit4/app.cash.tempest2.testing/TestDynamoDb/Builder/port</p>"},{"location":"1.x/tempest2-testing-junit4/tempest2-testing-junit4/app.cash.tempest2.testing/-test-dynamo-db/-builder/port/#port","title":"port","text":"<p>[jvm]\\ fun port(port: Int): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-junit5/","title":"tempest2-testing-junit5 - Tempest","text":"<p>//tempest2-testing-junit5</p>"},{"location":"1.x/tempest2-testing-junit5/#tempest2-testing-junit5","title":"tempest2-testing-junit5","text":""},{"location":"1.x/tempest2-testing-junit5/#packages","title":"Packages","text":"Name app.cash.tempest2.testing"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/#types","title":"Types","text":"Name Summary TestDynamoDb [jvm]class TestDynamoDb : TestDynamoDbClient, BeforeEachCallback, AfterEachCallbackThis JUnit extension spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits."},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/","title":"TestDynamoDb - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/#testdynamodb","title":"TestDynamoDb","text":"<p>[jvm]\\ class TestDynamoDb : TestDynamoDbClient, BeforeEachCallback, AfterEachCallback</p> <p>This JUnit extension spins up a DynamoDB server in tests. It shares the server across tests and keeps the server running until the process exits.</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/#properties","title":"Properties","text":"Name Summary asyncDynamoDb [jvm]open override val asyncDynamoDb: DynamoDbAsyncClient asyncDynamoDbStreams [jvm]open override val asyncDynamoDbStreams: DynamoDbStreamsAsyncClient dynamoDb [jvm]open override val dynamoDb: DynamoDbClient dynamoDbStreams [jvm]open override val dynamoDbStreams: DynamoDbStreamsClient tables [jvm]open override val tables: List&lt;TestTable&gt;"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/#functions","title":"Functions","text":"Name Summary addListener [jvm]open override fun addListener(p0: Service.Listener, p1: Executor) afterEach [jvm]open override fun afterEach(context: ExtensionContext?) asyncLogicalDb [jvm]open override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : AsyncLogicalDb&gt; asyncLogicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB awaitRunning [jvm]open override fun awaitRunning()open fun awaitRunning(p0: Duration)open override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]open override fun awaitTerminated()open fun awaitTerminated(p0: Duration)open override fun awaitTerminated(p0: Long, p1: TimeUnit) beforeEach [jvm]open override fun beforeEach(context: ExtensionContext) failureCause [jvm]open override fun failureCause(): Throwable isRunning [jvm]open override fun isRunning(): Boolean logicalDb [jvm]open override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: Class&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, vararg extensions: DynamoDbEnhancedClientExtension): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;): DBopen override fun &lt;DB : LogicalDb&gt; logicalDb(type: KClass&lt;DB&gt;, extensions: List&lt;DynamoDbEnhancedClientExtension&gt;, tableNameResolver: TableNameResolver?): DB reset [jvm]open override fun reset() startAsync [jvm]@CanIgnoreReturnValueopen override fun startAsync(): Service state [jvm]open override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueopen override fun stopAsync(): Service"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/after-each/","title":"afterEach - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/afterEach</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/after-each/#aftereach","title":"afterEach","text":"<p>[jvm]\\ open override fun afterEach(context: ExtensionContext?)</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/before-each/","title":"beforeEach - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/beforeEach</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/before-each/#beforeeach","title":"beforeEach","text":"<p>[jvm]\\ open override fun beforeEach(context: ExtensionContext)</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/","title":"Builder - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/#constructors","title":"Constructors","text":"Builder [jvm]constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/#functions","title":"Functions","text":"Name Summary addTable [jvm]fun addTable(table: TestTable): TestDynamoDb.Builder addTables [jvm]fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder build [jvm]fun build(): TestDynamoDb port [jvm]fun port(port: Int): TestDynamoDb.Builder"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/-builder/","title":"Builder - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder/Builder</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ constructor(serverFactory: TestDynamoDbServer.Factory&lt;*&gt;)</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-table/","title":"addTable - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder/addTable</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-table/#addtable","title":"addTable","text":"<p>[jvm]\\ fun addTable(table: TestTable): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-tables/","title":"addTables - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder/addTables</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/add-tables/#addtables","title":"addTables","text":"<p>[jvm]\\ fun addTables(tables: List&lt;TestTable&gt;): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/build/","title":"build - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder/build</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): TestDynamoDb</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/port/","title":"port - Tempest","text":"<p>//tempest2-testing-junit5/app.cash.tempest2.testing/TestDynamoDb/Builder/port</p>"},{"location":"1.x/tempest2-testing-junit5/tempest2-testing-junit5/app.cash.tempest2.testing/-test-dynamo-db/-builder/port/#port","title":"port","text":"<p>[jvm]\\ fun port(port: Int): TestDynamoDb.Builder</p>"},{"location":"1.x/tempest2-testing-jvm/","title":"tempest2-testing-jvm - Tempest","text":"<p>//tempest2-testing-jvm</p>"},{"location":"1.x/tempest2-testing-jvm/#tempest2-testing-jvm","title":"tempest2-testing-jvm","text":""},{"location":"1.x/tempest2-testing-jvm/#packages","title":"Packages","text":"Name app.cash.tempest2.testing"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/","title":"Package-level declarations - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/#types","title":"Types","text":"Name Summary JvmDynamoDbServer [jvm]class JvmDynamoDbServer : AbstractIdleService, TestDynamoDbServer"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/","title":"JvmDynamoDbServer - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing/JvmDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/#jvmdynamodbserver","title":"JvmDynamoDbServer","text":"<p>[jvm]\\ class JvmDynamoDbServer : AbstractIdleService, TestDynamoDbServer</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/#types","title":"Types","text":"Name Summary Factory [jvm]object Factory : TestDynamoDbServer.Factory&lt;JvmDynamoDbServer&gt;"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/#properties","title":"Properties","text":"Name Summary id [jvm]open override val id: String port [jvm]open override val port: Int"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/#functions","title":"Functions","text":"Name Summary addListener [jvm]override fun addListener(p0: Service.Listener, p1: Executor) awaitRunning [jvm]override fun awaitRunning()override fun awaitRunning(p0: Duration)override fun awaitRunning(p0: Long, p1: TimeUnit) awaitTerminated [jvm]override fun awaitTerminated()override fun awaitTerminated(p0: Duration)override fun awaitTerminated(p0: Long, p1: TimeUnit) failureCause [jvm]override fun failureCause(): Throwable isRunning [jvm]override fun isRunning(): Boolean startAsync [jvm]@CanIgnoreReturnValueoverride fun startAsync(): Service state [jvm]override fun state(): Service.State stopAsync [jvm]@CanIgnoreReturnValueoverride fun stopAsync(): Service toString [jvm]open override fun toString(): String"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/id/","title":"id - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing/JvmDynamoDbServer/id</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/id/#id","title":"id","text":"<p>[jvm]\\ open override val id: String</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/port/","title":"port - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing/JvmDynamoDbServer/port</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/port/#port","title":"port","text":"<p>[jvm]\\ open override val port: Int</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/-factory/","title":"Factory - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing/JvmDynamoDbServer/Factory</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/-factory/#factory","title":"Factory","text":"<p>[jvm]\\ object Factory : TestDynamoDbServer.Factory&lt;JvmDynamoDbServer&gt;</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): JvmDynamoDbServeropen fun create(port: Int): JvmDynamoDbServer"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/-factory/create/","title":"create - Tempest","text":"<p>//tempest2-testing-jvm/app.cash.tempest2.testing/JvmDynamoDbServer/Factory/create</p>"},{"location":"1.x/tempest2-testing-jvm/tempest2-testing-jvm/app.cash.tempest2.testing/-jvm-dynamo-db-server/-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun create(port: Int, onBeforeStartup: () -&gt; Unit): JvmDynamoDbServer</p>"},{"location":"1.x/urlshortener/","title":"urlshortener - Tempest","text":"<p>//urlshortener</p>"},{"location":"1.x/urlshortener/#urlshortener","title":"urlshortener","text":""},{"location":"1.x/urlshortener/#packages","title":"Packages","text":"Name app.cash.tempest.urlshortener app.cash.tempest.urlshortener.java"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/","title":"Package-level declarations - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/#types","title":"Types","text":"Name Summary Alias [jvm]data class Alias(val short_url: String, val destination_url: String) AliasDb [jvm]interface AliasDb : LogicalDb AliasItem [jvm]class AliasItem AliasTable [jvm]interface AliasTable : LogicalTable&lt;AliasItem&gt; Cli [jvm]class Cli : CliktCommand RealUrlShortener [jvm]class RealUrlShortener(table: AliasTable) : UrlShortener Redirect [jvm]class Redirect : CliktCommand Shorten [jvm]class Shorten : CliktCommand UrlShortener [jvm]interface UrlShortener"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/#properties","title":"Properties","text":"Name Summary urlShortener [jvm]lateinit var urlShortener: UrlShortener"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/#functions","title":"Functions","text":"Name Summary main [jvm]fun main(args: Array&lt;String&gt;)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/main/","title":"main - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/main</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/main/#main","title":"main","text":"<p>[jvm]\\ fun main(args: Array&lt;String&gt;)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/url-shortener/","title":"urlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/urlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/url-shortener/#urlshortener","title":"urlShortener","text":"<p>[jvm]\\ lateinit var urlShortener: UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ data class Alias(val short_url: String, val destination_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/#constructors","title":"Constructors","text":"Alias [jvm]constructor(short_url: String, destination_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val short_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/#properties","title":"Properties","text":"Name Summary destination_url [jvm]val destination_url: String key [jvm]@Transientval key: Alias.Key short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/Alias</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ constructor(short_url: String, destination_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/destination_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ val destination_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/key/","title":"key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: Alias.Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/short_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/","title":"Key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val short_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(short_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/#properties","title":"Properties","text":"Name Summary short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/-key/","title":"Key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/Key/Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(short_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Alias/Key/short_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias/-key/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/","title":"AliasDb - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasDb</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/#aliasdb","title":"AliasDb","text":"<p>[jvm]\\ interface AliasDb : LogicalDb</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/#properties","title":"Properties","text":"Name Summary aliasTable [jvm]abstract val aliasTable: AliasTable"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: DynamoDBMapperConfig.ConsistentReads, retryStrategy: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, retryStrategy: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/alias-table/","title":"aliasTable - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasDb/aliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-db/alias-table/#aliastable","title":"aliasTable","text":"<p>[jvm]\\ abstract val aliasTable: AliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ class AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/#constructors","title":"Constructors","text":"AliasItem [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/#properties","title":"Properties","text":"Name Summary destination_url [jvm]var destination_url: String? short_url [jvm]var short_url: String?"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasItem/AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasItem/destination_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ var destination_url: String?</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasItem/short_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-item/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ var short_url: String?</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/","title":"AliasTable - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/#aliastable","title":"AliasTable","text":"<p>[jvm]\\ interface AliasTable : LogicalTable&lt;AliasItem&gt;</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/#properties","title":"Properties","text":"Name Summary aliases [jvm]abstract val aliases: InlineView&lt;Alias.Key, Alias&gt;"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, AliasItem&gt; delete [jvm]open fun delete(item: AliasItem)open fun delete(item: AliasItem, deleteExpression: DynamoDBDeleteExpression)open fun delete(item: AliasItem, ignoreVersionConstraints: Boolean)abstract fun delete(item: AliasItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) deleteKey [jvm]open fun deleteKey(key: AliasItem)open fun deleteKey(key: AliasItem, deleteExpression: DynamoDBDeleteExpression)open fun deleteKey(key: AliasItem, ignoreVersionConstraints: Boolean)abstract fun deleteKey(key: AliasItem, deleteExpression: DynamoDBDeleteExpression?, ignoreVersionConstraints: Boolean) inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: AliasItem): AliasItem?abstract fun load(key: AliasItem, consistentReads: DynamoDBMapperConfig.ConsistentReads): AliasItem? save [jvm]open fun save(item: AliasItem): AliasItemopen fun save(item: AliasItem, saveExpression: DynamoDBSaveExpression): AliasItemopen fun save(item: AliasItem, ignoreVersionConstraints: Boolean): AliasItemabstract fun save(item: AliasItem, saveExpression: DynamoDBSaveExpression?, ignoreVersionConstraints: Boolean): AliasItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/aliases/","title":"aliases - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/AliasTable/aliases</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-alias-table/aliases/#aliases","title":"aliases","text":"<p>[jvm]\\ abstract val aliases: InlineView&lt;Alias.Key, Alias&gt;</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/","title":"Cli - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Cli</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/#cli","title":"Cli","text":"<p>[jvm]\\ class Cli : CliktCommand</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/#constructors","title":"Constructors","text":"Cli [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/-cli/","title":"Cli - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Cli/Cli</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/-cli/#cli","title":"Cli","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/run/","title":"run - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Cli/run</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-cli/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ class RealUrlShortener(table: AliasTable) : UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/#constructors","title":"Constructors","text":"RealUrlShortener [jvm]constructor(table: AliasTable)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]open override fun redirect(shortUrl: String): String?Redirects shortUrl to its destination. shorten [jvm]open override fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from shortUrl to destinationUrl."},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/RealUrlShortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ constructor(table: AliasTable)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/RealUrlShortener/redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\ open override fun redirect(shortUrl: String): String?</p> <p>Redirects shortUrl to its destination.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/RealUrlShortener/shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ open override fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from shortUrl to destinationUrl.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-real-url-shortener/shorten/#return","title":"Return","text":"<p>false if shortUrl is taken.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/","title":"Redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/#redirect","title":"Redirect","text":"<p>[jvm]\\ class Redirect : CliktCommand</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/#constructors","title":"Constructors","text":"Redirect [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean shortUrl [jvm]val shortUrl: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/-redirect/","title":"Redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Redirect/Redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/-redirect/#redirect","title":"Redirect","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/run/","title":"run - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Redirect/run</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/short-url/","title":"shortUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Redirect/shortUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-redirect/short-url/#shorturl","title":"shortUrl","text":"<p>[jvm]\\ val shortUrl: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/","title":"Shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/#shorten","title":"Shorten","text":"<p>[jvm]\\ class Shorten : CliktCommand</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/#constructors","title":"Constructors","text":"Shorten [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context destinationUrl [jvm]val destinationUrl: String helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean shortUrl [jvm]val shortUrl: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/-shorten/","title":"Shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Shorten/Shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/-shorten/#shorten","title":"Shorten","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/destination-url/","title":"destinationUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Shorten/destinationUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/destination-url/#destinationurl","title":"destinationUrl","text":"<p>[jvm]\\ val destinationUrl: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/run/","title":"run - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Shorten/run</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/short-url/","title":"shortUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/Shorten/shortUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-shorten/short-url/#shorturl","title":"shortUrl","text":"<p>[jvm]\\ val shortUrl: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/","title":"UrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/#urlshortener","title":"UrlShortener","text":"<p>interface UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/#inheritors","title":"Inheritors","text":"RealUrlShortener"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]abstract fun redirect(shortUrl: String): String?Redirects shortUrl to its destination. shorten [jvm]abstract fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from shortUrl to destinationUrl."},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/UrlShortener/redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\ abstract fun redirect(shortUrl: String): String?</p> <p>Redirects shortUrl to its destination.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener/UrlShortener/shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ abstract fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from shortUrl to destinationUrl.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener/-url-shortener/shorten/#return","title":"Return","text":"<p>false if shortUrl is taken.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/","title":"Package-level declarations - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/#types","title":"Types","text":"Name Summary Alias [jvm]open class Alias AliasDb [jvm]interface AliasDb : LogicalDb AliasItem [jvm]open class AliasItem AliasTable [jvm]interface AliasTable : LogicalTable&lt;RI&gt; Main [jvm]open class Main RealUrlShortener [jvm]open class RealUrlShortener : UrlShortener UrlShortener [jvm]interface UrlShortener"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ open class Alias</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/#constructors","title":"Constructors","text":"Alias [jvm]constructor(short_url: String, destination_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/#types","title":"Types","text":"Name Summary Key [jvm]open class Key"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/#properties","title":"Properties","text":"Name Summary destination_url [jvm]val destination_url: String short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/#functions","title":"Functions","text":"Name Summary key [jvm]open fun key(): Alias.Key"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/Alias</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ constructor(short_url: String, destination_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/destination_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ val destination_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/key/","title":"key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/key/#key","title":"key","text":"<p>[jvm]\\ open fun key(): Alias.Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/short_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/","title":"Key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(short_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/#properties","title":"Properties","text":"Name Summary short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/-key/","title":"Key - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/Key/Key</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(short_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Alias/Key/short_url</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias/-key/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/","title":"AliasDb - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasDb</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/#aliasdb","title":"AliasDb","text":"<p>[jvm]\\ interface AliasDb : LogicalDb</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/#properties","title":"Properties","text":"Name Summary Companion [jvm]val Companion: LogicalDb.Companion"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/#functions","title":"Functions","text":"Name Summary aliasTable [jvm]abstract fun aliasTable(): AliasTable batchLoad [jvm]abstract fun batchLoad(p: KeySet, p1: DynamoDBMapperConfig.ConsistentReads, p2: DynamoDBMapperConfig.BatchLoadRetryStrategy): ItemSet batchWrite [jvm]abstract fun batchWrite(p: BatchWriteSet, p1: DynamoDBMapperConfig.BatchWriteRetryStrategy): BatchWriteResult create [jvm]open fun &lt;DB : LogicalDb?&gt; create(dbType: Class&lt;DB&gt;, dynamoDbMapper: DynamoDBMapper): DB logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;?, RI&gt; logicalTable(p: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(p: KeySet): ItemSet transactionWrite [jvm]abstract fun transactionWrite(p: TransactionWriteSet)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/alias-table/","title":"aliasTable - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasDb/aliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-db/alias-table/#aliastable","title":"aliasTable","text":"<p>[jvm]\\ abstract fun aliasTable(): AliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ open class AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/#constructors","title":"Constructors","text":"AliasItem [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/#functions","title":"Functions","text":"Name Summary getDestinationUrl [jvm]open fun getDestinationUrl(): String getShortUrl [jvm]open fun getShortUrl(): String setDestinationUrl [jvm]open fun setDestinationUrl(destination_url: String) setShortUrl [jvm]open fun setShortUrl(short_url: String)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem/AliasItem</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/get-destination-url/","title":"getDestinationUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem/getDestinationUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/get-destination-url/#getdestinationurl","title":"getDestinationUrl","text":"<p>[jvm]\\ open fun getDestinationUrl(): String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/get-short-url/","title":"getShortUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem/getShortUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/get-short-url/#getshorturl","title":"getShortUrl","text":"<p>[jvm]\\ open fun getShortUrl(): String</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/set-destination-url/","title":"setDestinationUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem/setDestinationUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/set-destination-url/#setdestinationurl","title":"setDestinationUrl","text":"<p>[jvm]\\ open fun setDestinationUrl(destination_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/set-short-url/","title":"setShortUrl - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasItem/setShortUrl</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-item/set-short-url/#setshorturl","title":"setShortUrl","text":"<p>[jvm]\\ open fun setShortUrl(short_url: String)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-table/","title":"AliasTable - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasTable</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-table/#aliastable","title":"AliasTable","text":"<p>[jvm]\\ interface AliasTable : LogicalTable&lt;RI&gt;</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-table/#functions","title":"Functions","text":"Name Summary aliases [jvm]abstract fun aliases(): InlineView&lt;Alias.Key, Alias&gt; codec [jvm]abstract fun &lt;T&gt; codec(p: KClass&lt;T&gt;): Codec&lt;T, RI&gt; delete [jvm]abstract fun delete(p: I, p1: DynamoDBDeleteExpression, p2: Boolean) deleteKey [jvm]abstract fun deleteKey(p: K, p1: DynamoDBDeleteExpression, p2: Boolean) inlineView [jvm]abstract fun &lt;K, I&gt; inlineView(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]abstract fun load(p: K, p1: DynamoDBMapperConfig.ConsistentReads): I save [jvm]abstract fun save(p: I, p1: DynamoDBSaveExpression, p2: Boolean): I secondaryIndex [jvm]abstract fun &lt;K, I&gt; secondaryIndex(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-table/aliases/","title":"aliases - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/AliasTable/aliases</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-alias-table/aliases/#aliases","title":"aliases","text":"<p>[jvm]\\ abstract fun aliases(): InlineView&lt;Alias.Key, Alias&gt;</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/","title":"Main - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Main</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/#main","title":"Main","text":"<p>[jvm]\\ open class Main</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/#constructors","title":"Constructors","text":"Main [jvm]constructor()"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/#functions","title":"Functions","text":"Name Summary main [jvm]open fun main(args: Array&lt;String&gt;)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/-main/","title":"Main - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Main/Main</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/-main/#main","title":"Main","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/main/","title":"main - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/Main/main</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-main/main/#main","title":"main","text":"<p>[jvm]\\ open fun main(args: Array&lt;String&gt;)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/RealUrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ open class RealUrlShortener : UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/#constructors","title":"Constructors","text":"RealUrlShortener [jvm]constructor(table: AliasTable)"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]@Nullableopen fun redirect(shortUrl: String): StringRedirects <code>shortUrl</code> to its destination. shorten [jvm]open fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>."},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/RealUrlShortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ constructor(table: AliasTable)</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/RealUrlShortener/redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun redirect(shortUrl: String): String</p> <p>Redirects <code>shortUrl</code> to its destination.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/RealUrlShortener/shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ open fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-real-url-shortener/shorten/#return","title":"Return","text":"<p>false if <code>shortUrl</code> is taken.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/","title":"UrlShortener - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/#urlshortener","title":"UrlShortener","text":"<p>interface UrlShortener</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/#inheritors","title":"Inheritors","text":"RealUrlShortener"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]@Nullableabstract fun redirect(shortUrl: String): StringRedirects <code>shortUrl</code> to its destination. shorten [jvm]abstract fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>."},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/UrlShortener/redirect</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>abstract fun redirect(shortUrl: String): String</p> <p>Redirects <code>shortUrl</code> to its destination.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener/app.cash.tempest.urlshortener.java/UrlShortener/shorten</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ abstract fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>.</p>"},{"location":"1.x/urlshortener/urlshortener/app.cash.tempest.urlshortener.java/-url-shortener/shorten/#return","title":"Return","text":"<p>false if <code>shortUrl</code> is taken.</p>"},{"location":"1.x/urlshortener2/","title":"urlshortener2 - Tempest","text":"<p>//urlshortener2</p>"},{"location":"1.x/urlshortener2/#urlshortener2","title":"urlshortener2","text":""},{"location":"1.x/urlshortener2/#packages","title":"Packages","text":"Name app.cash.tempest2.urlshortener app.cash.tempest2.urlshortener.java"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/","title":"Package-level declarations - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/#types","title":"Types","text":"Name Summary Alias [jvm]data class Alias(val short_url: String, val destination_url: String) AliasDb [jvm]interface AliasDb : LogicalDb AliasItem [jvm]class AliasItem AliasTable [jvm]interface AliasTable : LogicalTable&lt;AliasItem&gt; Cli [jvm]class Cli : CliktCommand RealUrlShortener [jvm]class RealUrlShortener(table: AliasTable) : UrlShortener Redirect [jvm]class Redirect : CliktCommand Shorten [jvm]class Shorten : CliktCommand UrlShortener [jvm]interface UrlShortener"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/#properties","title":"Properties","text":"Name Summary urlShortener [jvm]lateinit var urlShortener: UrlShortener"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/#functions","title":"Functions","text":"Name Summary main [jvm]fun main(args: Array&lt;String&gt;)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/main/","title":"main - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/main</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/main/#main","title":"main","text":"<p>[jvm]\\ fun main(args: Array&lt;String&gt;)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/url-shortener/","title":"urlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/urlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/url-shortener/#urlshortener","title":"urlShortener","text":"<p>[jvm]\\ lateinit var urlShortener: UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ data class Alias(val short_url: String, val destination_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/#constructors","title":"Constructors","text":"Alias [jvm]constructor(short_url: String, destination_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/#types","title":"Types","text":"Name Summary Key [jvm]data class Key(val short_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/#properties","title":"Properties","text":"Name Summary destination_url [jvm]val destination_url: String key [jvm]@Transientval key: Alias.Key short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/Alias</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ constructor(short_url: String, destination_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/destination_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ val destination_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/key/","title":"key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/key/#key","title":"key","text":"<p>[jvm]\\</p> <p>@Transient</p> <p>val key: Alias.Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/short_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/","title":"Key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/#key","title":"Key","text":"<p>[jvm]\\ data class Key(val short_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(short_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/#properties","title":"Properties","text":"Name Summary short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/-key/","title":"Key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/Key/Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(short_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Alias/Key/short_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias/-key/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/","title":"AliasDb - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasDb</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/#aliasdb","title":"AliasDb","text":"<p>[jvm]\\ interface AliasDb : LogicalDb</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/#properties","title":"Properties","text":"Name Summary aliasTable [jvm]abstract val aliasTable: AliasTable"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/#functions","title":"Functions","text":"Name Summary batchLoad [jvm]open fun batchLoad(keys: Iterable&lt;Any&gt;): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean): ItemSetabstract fun batchLoad(keys: KeySet, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(vararg keys: Any, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSetopen fun batchLoad(keys: Iterable&lt;Any&gt;, consistentReads: Boolean, maxPageSize: Int, returnConsumedCapacity: ReturnConsumedCapacity): ItemSet batchWrite [jvm]open fun batchWrite(writeSet: BatchWriteSet): BatchWriteResultabstract fun batchWrite(writeSet: BatchWriteSet, maxPageSize: Int): BatchWriteResult logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;, RI : Any&gt; logicalTable(tableName: String, tableType: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(keys: KeySet): ItemSetopen fun transactionLoad(vararg keys: Any): ItemSetopen fun transactionLoad(keys: Iterable&lt;Any&gt;): ItemSet transactionWrite [jvm]abstract fun transactionWrite(writeSet: TransactionWriteSet)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/alias-table/","title":"aliasTable - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasDb/aliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-db/alias-table/#aliastable","title":"aliasTable","text":"<p>[jvm]\\ abstract val aliasTable: AliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ class AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/#constructors","title":"Constructors","text":"AliasItem [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/#properties","title":"Properties","text":"Name Summary destination_url [jvm]var destination_url: String? short_url [jvm]var short_url: String?"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasItem/AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasItem/destination_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ var destination_url: String?</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasItem/short_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-item/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ var short_url: String?</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/","title":"AliasTable - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/#aliastable","title":"AliasTable","text":"<p>[jvm]\\ interface AliasTable : LogicalTable&lt;AliasItem&gt;</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/#properties","title":"Properties","text":"Name Summary aliases [jvm]abstract val aliases: InlineView&lt;Alias.Key, Alias&gt;"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/#functions","title":"Functions","text":"Name Summary codec [jvm]abstract fun &lt;T : Any&gt; codec(type: KClass&lt;T&gt;): Codec&lt;T, AliasItem&gt; delete [jvm]open fun delete(item: AliasItem): AliasItem?abstract fun delete(item: AliasItem, deleteExpression: Expression?): AliasItem? deleteKey [jvm]open fun deleteKey(key: AliasItem): AliasItem?abstract fun deleteKey(key: AliasItem, deleteExpression: Expression?): AliasItem? inlineView [jvm]abstract fun &lt;K : Any, I : Any&gt; inlineView(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]open fun load(key: AliasItem): AliasItem?abstract fun load(key: AliasItem, consistentReads: Boolean): AliasItem?abstract fun load(key: AliasItem, consistentReads: Boolean, returnConsumedCapacity: ReturnConsumedCapacity): Pair&lt;AliasItem?, ConsumedCapacity?&gt; save [jvm]open fun save(item: AliasItem)abstract fun save(item: AliasItem, saveExpression: Expression?) saveWithResult [jvm]open fun saveWithResult(item: AliasItem): AliasItemabstract fun saveWithResult(item: AliasItem, saveExpression: Expression?): AliasItem secondaryIndex [jvm]abstract fun &lt;K : Any, I : Any&gt; secondaryIndex(keyType: KClass&lt;K&gt;, itemType: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/aliases/","title":"aliases - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/AliasTable/aliases</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-alias-table/aliases/#aliases","title":"aliases","text":"<p>[jvm]\\ abstract val aliases: InlineView&lt;Alias.Key, Alias&gt;</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/","title":"Cli - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Cli</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/#cli","title":"Cli","text":"<p>[jvm]\\ class Cli : CliktCommand</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/#constructors","title":"Constructors","text":"Cli [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/-cli/","title":"Cli - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Cli/Cli</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/-cli/#cli","title":"Cli","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/run/","title":"run - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Cli/run</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-cli/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ class RealUrlShortener(table: AliasTable) : UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/#constructors","title":"Constructors","text":"RealUrlShortener [jvm]constructor(table: AliasTable)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]open override fun redirect(shortUrl: String): String?Redirects shortUrl to its destination. shorten [jvm]open override fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from shortUrl to destinationUrl."},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/RealUrlShortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ constructor(table: AliasTable)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/RealUrlShortener/redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\ open override fun redirect(shortUrl: String): String?</p> <p>Redirects shortUrl to its destination.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/RealUrlShortener/shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ open override fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from shortUrl to destinationUrl.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-real-url-shortener/shorten/#return","title":"Return","text":"<p>false if shortUrl is taken.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/","title":"Redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/#redirect","title":"Redirect","text":"<p>[jvm]\\ class Redirect : CliktCommand</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/#constructors","title":"Constructors","text":"Redirect [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean shortUrl [jvm]val shortUrl: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/-redirect/","title":"Redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Redirect/Redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/-redirect/#redirect","title":"Redirect","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/run/","title":"run - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Redirect/run</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/short-url/","title":"shortUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Redirect/shortUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-redirect/short-url/#shorturl","title":"shortUrl","text":"<p>[jvm]\\ val shortUrl: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/","title":"Shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/#shorten","title":"Shorten","text":"<p>[jvm]\\ class Shorten : CliktCommand</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/#constructors","title":"Constructors","text":"Shorten [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/#properties","title":"Properties","text":"Name Summary commandHelp [jvm]val commandHelp: String commandHelpEpilog [jvm]val commandHelpEpilog: String commandName [jvm]val commandName: String currentContext [jvm]val currentContext: Context destinationUrl [jvm]val destinationUrl: String helpTags [jvm]val helpTags: Map&lt;String, String&gt; invokeWithoutSubcommand [jvm]val invokeWithoutSubcommand: Boolean messages [jvm]val messages: List&lt;String&gt; printHelpOnEmptyArgs [jvm]val printHelpOnEmptyArgs: Boolean shortUrl [jvm]val shortUrl: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/#functions","title":"Functions","text":"Name Summary aliases [jvm]open fun aliases(): Map&lt;String, List&lt;String&gt;&gt; getFormattedHelp [jvm]open fun getFormattedHelp(): String getFormattedUsage [jvm]open fun getFormattedUsage(): String issueMessage [jvm]fun issueMessage(message: String) main [jvm]fun main(argv: Array&lt;out String&gt;)fun main(argv: List&lt;String&gt;) parse [jvm]fun parse(argv: Array&lt;String&gt;, parentContext: Context?)fun parse(argv: List&lt;String&gt;, parentContext: Context?) registerArgument [jvm]fun registerArgument(argument: Argument) registeredArguments [jvm]fun registeredArguments(): List&lt;Argument&gt; registeredOptions [jvm]fun registeredOptions(): List&lt;Option&gt; registeredParameterGroups [jvm]fun registeredParameterGroups(): List&lt;ParameterGroup&gt; registeredSubcommandNames [jvm]fun registeredSubcommandNames(): List&lt;String&gt; registeredSubcommands [jvm]fun registeredSubcommands(): List&lt;CliktCommand&gt; registerOption [jvm]open override fun registerOption(option: GroupableOption)fun registerOption(option: Option) registerOptionGroup [jvm]fun registerOptionGroup(group: ParameterGroup) run [jvm]open override fun run() toString [jvm]open override fun toString(): String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/-shorten/","title":"Shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Shorten/Shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/-shorten/#shorten","title":"Shorten","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/destination-url/","title":"destinationUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Shorten/destinationUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/destination-url/#destinationurl","title":"destinationUrl","text":"<p>[jvm]\\ val destinationUrl: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/run/","title":"run - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Shorten/run</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/run/#run","title":"run","text":"<p>[jvm]\\ open override fun run()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/short-url/","title":"shortUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/Shorten/shortUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-shorten/short-url/#shorturl","title":"shortUrl","text":"<p>[jvm]\\ val shortUrl: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/","title":"UrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/#urlshortener","title":"UrlShortener","text":"<p>interface UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/#inheritors","title":"Inheritors","text":"RealUrlShortener"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]abstract fun redirect(shortUrl: String): String?Redirects shortUrl to its destination. shorten [jvm]abstract fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from shortUrl to destinationUrl."},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/UrlShortener/redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\ abstract fun redirect(shortUrl: String): String?</p> <p>Redirects shortUrl to its destination.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener/UrlShortener/shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ abstract fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from shortUrl to destinationUrl.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener/-url-shortener/shorten/#return","title":"Return","text":"<p>false if shortUrl is taken.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/","title":"Package-level declarations - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/#types","title":"Types","text":"Name Summary Alias [jvm]open class Alias AliasDb [jvm]interface AliasDb : LogicalDb AliasItem [jvm]open class AliasItem AliasTable [jvm]interface AliasTable : LogicalTable&lt;RI&gt; Main [jvm]open class Main RealUrlShortener [jvm]open class RealUrlShortener : UrlShortener UrlShortener [jvm]interface UrlShortener"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ open class Alias</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/#constructors","title":"Constructors","text":"Alias [jvm]constructor(short_url: String, destination_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/#types","title":"Types","text":"Name Summary Key [jvm]open class Key"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/#properties","title":"Properties","text":"Name Summary destination_url [jvm]val destination_url: String short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/#functions","title":"Functions","text":"Name Summary key [jvm]open fun key(): Alias.Key"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-alias/","title":"Alias - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/Alias</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-alias/#alias","title":"Alias","text":"<p>[jvm]\\ constructor(short_url: String, destination_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/destination_url/","title":"destination_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/destination_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/destination_url/#destination_url","title":"destination_url","text":"<p>[jvm]\\ val destination_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/key/","title":"key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/key/#key","title":"key","text":"<p>[jvm]\\ open fun key(): Alias.Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/short_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/","title":"Key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/#key","title":"Key","text":"<p>[jvm]\\ open class Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/#constructors","title":"Constructors","text":"Key [jvm]constructor(short_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/#properties","title":"Properties","text":"Name Summary short_url [jvm]val short_url: String"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/-key/","title":"Key - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/Key/Key</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/-key/#key","title":"Key","text":"<p>[jvm]\\ constructor(short_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/short_url/","title":"short_url - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Alias/Key/short_url</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias/-key/short_url/#short_url","title":"short_url","text":"<p>[jvm]\\ val short_url: String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/","title":"AliasDb - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasDb</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/#aliasdb","title":"AliasDb","text":"<p>[jvm]\\ interface AliasDb : LogicalDb</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/#properties","title":"Properties","text":"Name Summary Companion [jvm]val Companion: LogicalDb.Companion"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/#functions","title":"Functions","text":"Name Summary aliasTable [jvm]abstract fun aliasTable(): AliasTable batchLoad [jvm]abstract fun batchLoad(p: KeySet, p1: Boolean, p2: Int, p3: ReturnConsumedCapacity): ItemSet batchWrite [jvm]abstract fun batchWrite(p: BatchWriteSet, p1: Int): BatchWriteResult create [jvm]open fun &lt;DB : LogicalDb?&gt; create(dbType: Class&lt;DB&gt;, dynamoDbEnhancedClient: DynamoDbEnhancedClient): DB logicalTable [jvm]abstract fun &lt;T : LogicalTable&lt;RI&gt;?, RI&gt; logicalTable(p: String, p1: KClass&lt;T&gt;): T transactionLoad [jvm]abstract fun transactionLoad(p: KeySet): ItemSet transactionWrite [jvm]abstract fun transactionWrite(p: TransactionWriteSet)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/alias-table/","title":"aliasTable - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasDb/aliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-db/alias-table/#aliastable","title":"aliasTable","text":"<p>[jvm]\\ abstract fun aliasTable(): AliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ open class AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/#constructors","title":"Constructors","text":"AliasItem [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/#functions","title":"Functions","text":"Name Summary getDestinationUrl [jvm]open fun getDestinationUrl(): String getShortUrl [jvm]open fun getShortUrl(): String setDestinationUrl [jvm]open fun setDestinationUrl(destination_url: String) setShortUrl [jvm]open fun setShortUrl(short_url: String)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/-alias-item/","title":"AliasItem - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem/AliasItem</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/-alias-item/#aliasitem","title":"AliasItem","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/get-destination-url/","title":"getDestinationUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem/getDestinationUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/get-destination-url/#getdestinationurl","title":"getDestinationUrl","text":"<p>[jvm]\\ open fun getDestinationUrl(): String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/get-short-url/","title":"getShortUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem/getShortUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/get-short-url/#getshorturl","title":"getShortUrl","text":"<p>[jvm]\\ open fun getShortUrl(): String</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/set-destination-url/","title":"setDestinationUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem/setDestinationUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/set-destination-url/#setdestinationurl","title":"setDestinationUrl","text":"<p>[jvm]\\ open fun setDestinationUrl(destination_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/set-short-url/","title":"setShortUrl - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasItem/setShortUrl</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-item/set-short-url/#setshorturl","title":"setShortUrl","text":"<p>[jvm]\\ open fun setShortUrl(short_url: String)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-table/","title":"AliasTable - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasTable</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-table/#aliastable","title":"AliasTable","text":"<p>[jvm]\\ interface AliasTable : LogicalTable&lt;RI&gt;</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-table/#functions","title":"Functions","text":"Name Summary aliases [jvm]abstract fun aliases(): InlineView&lt;Alias.Key, Alias&gt; codec [jvm]abstract fun &lt;T&gt; codec(p: KClass&lt;T&gt;): Codec&lt;T, RI&gt; delete [jvm]abstract fun delete(p: I, p1: Expression): I deleteKey [jvm]abstract fun deleteKey(p: K, p1: Expression): I inlineView [jvm]abstract fun &lt;K, I&gt; inlineView(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): InlineView&lt;K, I&gt; load [jvm]abstract fun load(p: K, p1: Boolean): Iabstract fun load(p: K, p1: Boolean, p2: ReturnConsumedCapacity): Pair&lt;I, ConsumedCapacity&gt; save [jvm]abstract fun save(p: I, p1: Expression) saveWithResult [jvm]abstract fun saveWithResult(p: I, p1: Expression): I secondaryIndex [jvm]abstract fun &lt;K, I&gt; secondaryIndex(p: KClass&lt;K&gt;, p1: KClass&lt;I&gt;): SecondaryIndex&lt;K, I&gt;"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-table/aliases/","title":"aliases - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/AliasTable/aliases</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-alias-table/aliases/#aliases","title":"aliases","text":"<p>[jvm]\\ abstract fun aliases(): InlineView&lt;Alias.Key, Alias&gt;</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/","title":"Main - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Main</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/#main","title":"Main","text":"<p>[jvm]\\ open class Main</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/#constructors","title":"Constructors","text":"Main [jvm]constructor()"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/#functions","title":"Functions","text":"Name Summary main [jvm]open fun main(args: Array&lt;String&gt;)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/-main/","title":"Main - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Main/Main</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/-main/#main","title":"Main","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/main/","title":"main - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/Main/main</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-main/main/#main","title":"main","text":"<p>[jvm]\\ open fun main(args: Array&lt;String&gt;)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/RealUrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ open class RealUrlShortener : UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/#constructors","title":"Constructors","text":"RealUrlShortener [jvm]constructor(table: AliasTable)"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]@Nullableopen fun redirect(shortUrl: String): StringRedirects <code>shortUrl</code> to its destination. shorten [jvm]open fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>."},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/-real-url-shortener/","title":"RealUrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/RealUrlShortener/RealUrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/-real-url-shortener/#realurlshortener","title":"RealUrlShortener","text":"<p>[jvm]\\ constructor(table: AliasTable)</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/RealUrlShortener/redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun redirect(shortUrl: String): String</p> <p>Redirects <code>shortUrl</code> to its destination.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/RealUrlShortener/shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ open fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-real-url-shortener/shorten/#return","title":"Return","text":"<p>false if <code>shortUrl</code> is taken.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/","title":"UrlShortener - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/#urlshortener","title":"UrlShortener","text":"<p>interface UrlShortener</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/#inheritors","title":"Inheritors","text":"RealUrlShortener"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/#functions","title":"Functions","text":"Name Summary redirect [jvm]@Nullableabstract fun redirect(shortUrl: String): StringRedirects <code>shortUrl</code> to its destination. shorten [jvm]abstract fun shorten(shortUrl: String, destinationUrl: String): BooleanCreates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>."},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/redirect/","title":"redirect - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/UrlShortener/redirect</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/redirect/#redirect","title":"redirect","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>abstract fun redirect(shortUrl: String): String</p> <p>Redirects <code>shortUrl</code> to its destination.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/redirect/#return","title":"Return","text":"<p>null if not found.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/shorten/","title":"shorten - Tempest","text":"<p>//urlshortener2/app.cash.tempest2.urlshortener.java/UrlShortener/shorten</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/shorten/#shorten","title":"shorten","text":"<p>[jvm]\\ abstract fun shorten(shortUrl: String, destinationUrl: String): Boolean</p> <p>Creates a custom alias from <code>shortUrl</code> to <code>destinationUrl</code>.</p>"},{"location":"1.x/urlshortener2/urlshortener2/app.cash.tempest2.urlshortener.java/-url-shortener/shorten/#return","title":"Return","text":"<p>false if <code>shortUrl</code> is taken.</p>"},{"location":"guide/asynchronous_programming/","title":"Asynchronous Programming","text":""},{"location":"guide/asynchronous_programming/#nonblocking-io","title":"Nonblocking I/O","text":"<p>The AWS SDK 2.x features truly nonblocking asynchronous clients that implement high  concurrency across a few threads.</p> <p>SDK 1.x uses blocking I/O</p> <p>The AWS SDK for Java 1.11.x has asynchronous clients that are wrappers around a thread pool and blocking synchronous clients that don\u2019t provide the full benefit of nonblocking I/O.</p>"},{"location":"guide/asynchronous_programming/#tempest-async-apis","title":"Tempest Async APIs","text":"<p>Tempest for SDK 2.x comes with async APIs that utilize Kotlin coroutine and Java CompletableFuture.</p> <p>Declare you DB and tables as <code>AsyncLogicalDb</code> and <code>AsyncLogicalTable</code>.</p> Kotlin - SDK 2.xJava - SDK 2.x <pre><code>interface AsyncMusicDb : AsyncLogicalDb {\n   @TableName(\"music_items\")\n   val music: AsyncMusicTable\n}\n\ninterface AsyncMusicTable : AsyncLogicalTable&lt;MusicItem&gt; {\n  val albumInfo: AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n\n  val playlistInfo: AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;\n\n  // Global Secondary Indexes.\n  val albumInfoByGenre: AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;\n  val albumInfoByArtist: AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;\n\n  // Local Secondary Indexes.\n  val albumTracksByTitle: AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;\n}\n</code></pre> <pre><code>public interface AsyncMusicDb extends AsyncLogicalDb {\n  @TableName(\"music_items\")\n  AsyncMusicTable music();\n}\n\npublic interface AsyncMusicTable extends AsyncLogicalTable&lt;MusicItem&gt; {\n  AsyncInlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n  AsyncInlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n\n  AsyncInlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; playlistInfo();\n\n  // Global Secondary Indexes.\n  AsyncSecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumInfoByGenre();\n  AsyncSecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByArtist();\n\n  // Local Secondary Indexes.\n  AsyncSecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; albumTracksByTitle();\n}\n</code></pre> <p>Write familiar code that is asynchronous under the hood. </p> Kotlin - SDK 2.xJava - SDK 2.x <pre><code>private val table: AsyncMusicTable\n\nsuspend fun changePlaylistName(playlistToken: String, newName: String) {\n  // Read.\n  val existing = checkNotNull(\n    table.playlistInfo.load(PlaylistInfo.Key(playlistToken)) // This is a suspend function.\n  ) { \"Playlist does not exist: $playlistToken\" }\n  // Modify.\n  val newPlaylist = existing.copy(\n    playlist_name = newName,\n    playlist_version = existing.playlist_version + 1\n  )\n  // Write.\n  table.playlistInfo.save( // This is a suspend function.\n    newPlaylist,\n    ifPlaylistVersionIs(existing.playlist_version)\n  )\n}\n\nprivate fun ifPlaylistVersionIs(playlist_version: Long): Expression {\n  return Expression.builder()\n    .expression(\"playlist_version = :playlist_version\")\n    .expressionValues(mapOf(\":playlist_version\" to AttributeValue.builder().n(\"$playlist_version\").build()))\n    .build()\n}\n</code></pre> <pre><code>private final AsyncMusicTable table;\n\npublic CompletableFuture&lt;Void&gt; changePlaylistName(String playlistToken, String newName) {\n  // Read.\n  return table.playlistInfo()\n      .loadAsync(new PlaylistInfo.Key(playlistToken))\n      .thenCompose(existing -&gt; {\n        if (existing == null) {\n          throw new IllegalStateException(\"Playlist does not exist: \" + playlistToken);\n        }\n        // Modify.\n        PlaylistInfo newPlaylist = new PlaylistInfo(\n            existing.playlist_token,\n            newName,\n            existing.playlist_tracks,\n            // playlist_version.\n            existing.playlist_version + 1\n        );\n        // Write.\n        return table.playlistInfo()\n            .saveAsync(\n                newPlaylist,\n                ifPlaylistVersionIs(existing.playlist_version)\n            );\n      });\n}\n\nprivate Expression ifPlaylistVersionIs(Long playlist_version) {\n  return Expression.builder()\n    .expression(\"playlist_version = :playlist_version\")\n    .expressionValues(\n        Map.of(\":playlist_version\", AttributeValue.builder().n(\"\" + playlist_version).build()))\n    .build();\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Asynchronous Programing - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/batch_read_write/","title":"Batch Read & Write","text":""},{"location":"guide/batch_read_write/#batch-load","title":"Batch Load","text":"<p><code>LogicalDb</code> lets you <code>batchLoad</code> multiple items from one or more tables using their primary keys.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val db: MusicDb\n\nfun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt; {\n  val results = db.batchLoad(\n    keys = playlist.playlist_tracks, // [AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ...]\n    consistentReads = false,\n  )\n  return results.getItems&lt;AlbumTrack&gt;()\n}\n</code></pre> <pre><code>private final MusicDb db;\n\npublic List&lt;AlbumTrack&gt; loadPlaylistTracks(PlaylistInfo playlist) {\n  ItemSet results = db.batchLoad(\n      // keys.\n      playlist.playlist_tracks, // [AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ...]\n      // consistentReads.\n      false\n  );\n  return results.getItems(AlbumTrack.class);\n}\n</code></pre> <pre><code>private val db: MusicDb\n\nfun loadPlaylistTracks(playlist: PlaylistInfo): List&lt;AlbumTrack&gt; {\n  val results = db.batchLoad(\n    keys = playlist.playlist_tracks, // [AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ...]\n    consistentReads = ConsistentReads.EVENTUAL,\n    retryStrategy = DefaultBatchLoadRetryStrategy()\n  )\n  return results.getItems&lt;AlbumTrack&gt;()\n}\n</code></pre> <pre><code>private final MusicDb db;\n\npublic List&lt;AlbumTrack&gt; loadPlaylistTracks(PlaylistInfo playlist) {\n  ItemSet results = db.batchLoad(\n      // keys.\n      playlist.playlist_tracks, // [AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ...]\n      // consistentReads.\n      ConsistentReads.EVENTUAL,\n      // retryStrategy.\n      new DefaultBatchLoadRetryStrategy()\n  );\n  return results.getItems(AlbumTrack.class);\n}\n</code></pre> <p>Batch load does not return items in any particular order</p> <p>In order to minimize response latency, BatchGetItem retrieves items in parallel.</p> <p>When designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the ProjectionExpression parameter.</p> <p>If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read.</p>"},{"location":"guide/batch_read_write/#batch-write","title":"Batch Write","text":"<p><code>LogicalDb</code> lets you batch write and delete multiple items in multiple tables.</p> <p>Batch writes do not take condition expression</p> <p>With BatchWriteItem, you can efficiently write or delete large amounts of data, such as from Amazon EMR, or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, BatchWriteItem does not behave in the same way as individual PutItem and DeleteItem calls would. For example, you cannot specify conditions on individual put and delete requests, and BatchWriteItem does not return deleted items in the response.    </p> <p><code>batchWrite</code> does not provide transaction guarantees.      Callers should always check the returned <code>BatchWriteResult</code>      because this method returns normally even if some writes were not performed.</p> <p>Batch writes could be partially successful</p> <p>The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified in BatchWriteItem are atomic;  however BatchWriteItem as a whole is not. If any requested operations fail because the table\u2019s  provisioned throughput is exceeded or an internal processing failure occurs, the failed operations  are returned in the UnprocessedItems response parameter.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val db: MusicDb\n\nfun backfill(\n  albumTracksToSave: List&lt;AlbumTrack&gt;,\n  albumTracksToDelete: List&lt;AlbumTrack.Key&gt;\n): Boolean {\n  val writeSet = BatchWriteSet.Builder()\n    .clobber(albumTracksToSave)\n    .delete(albumTracksToDelete)\n    .build()\n  val result = db.batchWrite(writeSet)\n  return result.isSuccessful\n}\n</code></pre> <pre><code>private final MusicDb db;\n\npublic boolean backfill(\n    List&lt;AlbumTrack&gt; albumTracksToSave,\n    List&lt;AlbumTrack.Key&gt; albumTracksToDelete\n) {\n  BatchWriteSet writeSet = new BatchWriteSet.Builder()\n      .clobber(albumTracksToSave)\n      .delete(albumTracksToDelete)\n      .build();\n  BatchWriteResult result = db.batchWrite(writeSet);\n  return result.isSuccessful();\n}\n</code></pre> <pre><code>private val db: MusicDb\n\nfun backfill(\n  albumTracksToSave: List&lt;AlbumTrack&gt;,\n  albumTracksToDelete: List&lt;AlbumTrack.Key&gt;\n): Boolean {\n  val writeSet = BatchWriteSet.Builder()\n    .clobber(albumTracksToSave)\n    .delete(albumTracksToDelete)\n    .build()\n  val result = db.batchWrite(\n    writeSet,\n    retryStrategy = DefaultBatchWriteRetryStrategy()\n  )\n  return result.isSuccessful\n}\n</code></pre> <pre><code>private final MusicDb db;\n\npublic boolean backfill(\n    List&lt;AlbumTrack&gt; albumTracksToSave,\n    List&lt;AlbumTrack.Key&gt; albumTracksToDelete\n) {\n  BatchWriteSet writeSet = new BatchWriteSet.Builder()\n      .clobber(albumTracksToSave)\n      .delete(albumTracksToDelete)\n      .build();\n  BatchWriteResult result = db.batchWrite(\n      writeSet,\n      // retryStrategy.\n      new DefaultBatchWriteRetryStrategy()\n  );\n  return result.isSuccessful();\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Batch Read &amp; Write - SDK 1.x (.kt, .java)</li> <li>Batch Read &amp; Write - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/crud/","title":"CRUD","text":"<p>We\u2019ve written some examples that demonstrate how to solve common problems with Tempest. Read through them to learn about how everything works together.</p> KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n}\n\ndata class AlbumInfo(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  val album_title: String,\n  val album_name: String,\n  val release_date: LocalDate,\n  val genre_name: String\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n\n  data class Key(\n    val album_token: String\n  ) {\n    val sort_key: String = \"\"\n  }\n}\n\ndata class AlbumTrack(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  val track_token: String,\n  val track_name: String,\n  val track_run_length: Duration\n) {\n  data class Key(\n    val album_token: String,\n    val track_token: String\n  )\n}\n</code></pre> <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n}\n\npublic class AlbumInfo {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  public final String album_title;\n  public final String artist_name;\n  public final LocalDate release_date;\n  public final String genre_name;\n\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n\n  public AlbumInfo(\n      String album_token,\n      String album_title,\n      String artist_name,\n      LocalDate release_date,\n      String genre_name) {\n    this.album_token = album_token;\n    this.album_title = album_title;\n    this.artist_name = artist_name;\n    this.release_date = release_date;\n    this.genre_name = genre_name;\n  }\n\n  public static class Key {\n    public final String album_token;\n    public final String sort_key = \"\";\n\n    public Key(String album_token) {\n      this.album_token = album_token;\n    }\n  }\n}\n\npublic class AlbumTrack {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  public final String track_token;\n  public final String track_title;\n  public final Duration run_length;\n\n  public AlbumTrack(\n      String album_token, \n      String track_token, \n      String track_title,\n      Duration run_length) {\n    this.album_token = album_token;\n    this.track_token = track_token;\n    this.track_title = track_title;\n    this.run_length = run_length;\n  }\n\n  public static class Key {\n    public final String album_token;\n    public final String track_token;\n\n    public Key(String album_token, String track_token) {\n      this.album_token = album_token;\n      this.track_token = track_token;\n    }\n  }\n}\n</code></pre>"},{"location":"guide/crud/#read","title":"Read","text":"<p>Use <code>load()</code> to read a value.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun getAlbumTitle(albumToken: String): String? {\n  val albumInfo = table.albumInfo.load(AlbumInfo.Key(albumToken)) ?: return null\n  return albumInfo.album_title\n}\n</code></pre> <pre><code>private final MusicTable table;\n\n@Nullable\npublic String getAlbumTitle(String albumToken) {\n  AlbumInfo albumInfo = table.albumInfo().load(new AlbumInfo.Key(albumToken));\n  if (albumInfo == null) {\n    return null;\n  }\n  return albumInfo.album_title;\n}\n</code></pre> <p>DynamoDB is eventually consistent by default</p> <p>For actions that only read data, this is usually fine! Once the read completes it could be updated anyway, so whether the read reflects very recent writes is typically insignificant. </p> <p>If your read immediately follows a write of the same item, you should use a strongly consistent read to ensure your read reflects the write.</p> KotlinJava <pre><code>fun readAfterWrite() {\n  // Write an item.\n  val item = AlbumInfo(\n    album_token = \"ALBUM_cafcf892\",\n    album_title = \"The Dark Side of the Moon\",\n    artist_name = \"Pink Floyd\",\n    release_date = LocalDate.of(1973, 3, 1),\n    genre_name = \"Progressive rock\"\n  )\n  table.albumInfo.save(item)\n  // Read that item.\n  val itemRead = table.albumInfo.load(item.key)\n  // Note that the value we just read might be older than the value we wrote.\n}\n</code></pre> <pre><code>public void readAfterWrite() {\n  // Write an item.\n  AlbumInfo item = new AlbumInfo(\n      // album_token.\n      \"ALBUM_cafcf892\",\n      // album_title.\n      \"The Dark Side of the Moon\",\n      // artist_name.\n      \"Pink Floyd\",\n      // release_date.\n      LocalDate.of(1973, 3, 1),\n      // genre_name.\n      \"Progressive rock\"\n  );\n  table.albumInfo().save(item);\n  // Read that item.\n  AlbumInfo itemRead = table.albumInfo().load(item.key);\n  // Note that the value we just read might be older than the value we wrote.\n}\n</code></pre> <p>If you need to read your writes, you may perform a strongly consistent read at a higher latency.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val table: MusicTable\n\nfun getAlbumTitle(albumToken: String): String? {\n  val albumInfo = table.albumInfo.load(\n    AlbumInfo.Key(albumToken), \n    consistentReads = true\n  ) ?: return null\n  return albumInfo.album_title\n}\n</code></pre> <pre><code>private final MusicTable table;\n\n@Nullable\npublic String getAlbumTitle(String albumToken) {\n  AlbumInfo albumInfo = table.albumInfo().load(\n      new AlbumInfo.Key(albumToken),\n      // consistentReads.\n      true);\n  if (albumInfo == null) {\n    return null;\n  }\n  return albumInfo.album_title;\n}\n</code></pre> <pre><code>private val table: MusicTable\n\nfun getAlbumTitle(albumToken: String): String? {\n  val albumInfo = table.albumInfo.load(\n    AlbumInfo.Key(albumToken), \n    consistentReads = ConsistentReads.CONSISTENT\n  ) ?: return null\n  return albumInfo.album_title\n}\n</code></pre> <pre><code>private final MusicTable table;\n\n@Nullable\npublic String getAlbumTitle(String albumToken) {\n  AlbumInfo albumInfo = table.albumInfo().load(\n      new AlbumInfo.Key(albumToken),\n      // consistentReads.\n      ConsistentReads.CONSISTENT);\n  if (albumInfo == null) {\n    return null;\n  }\n  return albumInfo.album_title;\n}\n</code></pre>"},{"location":"guide/crud/#update","title":"Update","text":"<p>By default, writes are unconditional. When there is a conflict, the last writer wins. </p> KotlinJava <pre><code>private val table: MusicTable\n\nfun addAlbum(albumInfo: AlbumInfo) {\n  table.albumInfo.save(albumInfo)\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void addAlbum(AlbumInfo albumInfo) {\n  table.albumInfo().save(albumInfo);\n}\n</code></pre> <p>To prevent lost updates across concurrent writes, you may specify a condition expression. If the condition expression evaluates to true, the operation is applied; otherwise, the operation is rolled back.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val table: MusicTable\n\nfun addAlbum(albumInfo: AlbumInfo) {\n  table.albumInfo.save(albumInfo, ifNotExist())\n}\n\nprivate fun ifNotExist(): Expression {\n  return Expression.builder()\n    .expression(\"attribute_not_exists(partition_key)\")\n    .build()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void addAlbum(AlbumInfo albumInfo) {\n  table.albumInfo().save(albumInfo, ifNotExist());\n}\n\nprivate Expression ifNotExist() {\n  return Expression.builder()\n    .expression(\"attribute_not_exists(partition_key)\")\n    .build();\n}\n</code></pre> <pre><code>private val table: MusicTable\n\nfun addAlbum(albumInfo: AlbumInfo) {\n  table.albumInfo.save(albumInfo, ifNotExist())\n}\n\nprivate fun ifNotExist(): DynamoDBSaveExpression {\n  return DynamoDBSaveExpression()\n    .withExpectedEntry(\"partition_key\", ExpectedAttributeValue().withExists(false))\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void addAlbum(AlbumInfo albumInfo) {\n  table.albumInfo().save(albumInfo, ifNotExist());\n}\n\nprivate DynamoDBSaveExpression ifNotExist() {\n  return new DynamoDBSaveExpression()\n      .withExpectedEntry(\"partition_key\", new ExpectedAttributeValue().withExists(false));\n}\n</code></pre>"},{"location":"guide/crud/#delete","title":"Delete","text":"<p>Use <code>delete()</code> to delete a value by key.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun deleteAlbum(albumToken: String) {\n  table.albumInfo.delete(AlbumInfo.Key(albumToken))\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void deleteAlbum(String albumToken) {\n  table.albumInfo().deleteKey(new AlbumInfo.Key(albumToken));\n}\n</code></pre> <p>Similarly, you can add a condition expression to the delete operation. </p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val table: MusicTable\n\nfun deleteAlbum(albumToken: String) {\n  table.albumInfo.delete(AlbumInfo.Key(albumToken), ifExist())\n}\n\nprivate fun ifExist(): Expression {\n  return Expression.builder()\n    .expression(\"attribute_exists(partition_key)\")\n    .build()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void deleteAlbum(String albumToken) {\n  table.albumInfo().deleteKey(new AlbumInfo.Key(albumToken), ifExist());\n}\n\nprivate Expression ifExist() {\n  return Expression.builder()\n    .expression(\"attribute_exists(partition_key)\")\n    .build();\n}\n</code></pre> <pre><code>private val table: MusicTable\n\nfun deleteAlbum(albumToken: String) {\n  table.albumInfo.delete(AlbumInfo.Key(albumToken), ifExist())\n}\n\nprivate fun ifExist(): DynamoDBSaveExpression {\n  return DynamoDBSaveExpression()\n    .withExpectedEntry(\"partition_key\", ExpectedAttributeValue().withExists(true))\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void deleteAlbum(String albumToken) {\n  table.albumInfo().deleteKey(new AlbumInfo.Key(albumToken), ifExist());\n}\n\nprivate DynamoDBDeleteExpression ifExist() {\n  return new DynamoDBDeleteExpression()\n      .withExpectedEntry(\"partition_key\", new ExpectedAttributeValue().withExists(true));\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>CRUD - SDK 1.x (.kt, .java)</li> <li>CRUD - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/data_modeling/","title":"Data Modeling","text":"<p>Warning</p> <p>For an RDBMS, you can create a normalized data model without thinking about access patterns. You can then extend it later when new questions and query requirements arise. By contrast, in Amazon DynamoDB, you shouldn\u2019t start designing your schema until you know the questions that it needs to answer. Understanding the business problems and the application use cases up front is absolutely essential.</p>"},{"location":"guide/data_modeling/#dynamodb-approach","title":"DynamoDB Approach","text":"<p>As explained in the project overview, DynamoDB approaches data modeling differently from relational databases. </p>"},{"location":"guide/data_modeling/#access-patterns","title":"Access Patterns","text":"<p>In each DynamoDB table, data is organized for locality of expected access patterns. This gives you excellent performance if the structure of the data and access patterns agree  and terrible performance otherwise.</p> <p>To design a DynamoDB table that scales efficiently, you must first identify the access patterns required by the business logic.</p> <p>Suppose we are building a music library with this entity model.</p> <p></p> <p>This music library needs to support the following access patterns.</p> The Most Common Access Patterns 1 Load album and its tracks by album token 2 Load track by track token 3 List tracks in a playlist 4 List albums by artist name 5 Find album by album title 6 Find track by track title ..."},{"location":"guide/data_modeling/#efficient-schema","title":"Efficient Schema","text":"<p>An efficient schema that keeps related data in close proximity has a major impact on cost and performance.  Instead of distributing related data items across multiple tables, you should keep related items in your table as close together as possible. Typically, this means storing related rows in the same table, and with the same partition key. Within a partition key, related rows should share a prefix of the sort key.</p> <p>We can design an efficient schema using these patterns:</p> <ul> <li>Denormalization: Schema flexibility lets DynamoDB store structured data, such as lists, sets, and nested objects, in a single item.</li> <li>Composite key aggregation: Deliberate key design puts related entities close together.</li> <li>Sort order: Related items can be grouped together and queried efficiently if their key design causes them to sort together.</li> <li>Global secondary indexes: By creating specific global secondary indexes, you can enable different queries than your main table can support, and that are still fast and inexpensive.</li> <li>Adjacency list: Adjacency lists are a design pattern that is useful for modeling many-to-many relationships. More generally, they provide a way to represent graph data (nodes and edges).</li> </ul> Primary Key Attributes partition_key sort_key ALBUM_1 INFO album_title album_artist release_date genre The Dark Side of the Moon Pink Floyd 1973-03-01 Progressive rock ALBUM_1 TRACK_1 track_title run_length Speak to Me PT1M13S ALBUM_1 TRACK_2 track_title run_length Breathe PT2M43S ALBUM_1 TRACK_3 track_title run_length On the Run PT3M36S ... ALBUM_2 INFO album_title album_artist release_date genre The Wall Pink Floyd 1979-11-30 Progressive rock ALBUM_2 TRACK_1 track_title run_length In the Flesh? PT3M20S ... PLAYLIST_1 INFO playlist_name playlist_size playlist_tracks playlist_version Psychedelic Rock Essentials 100 ALBUM_1/TRACK_1, ALBUM_1322/TRACK_9, ALBUM_3423/TRACK_3, ALBUM_84/TRACK_10, ALBUM_2/TRACK_5, ... 12 ... <p>This table uses a composite primary key, <code>(parition_key, sort_key)</code>, to identify each item.</p> <ul> <li>The key <code>(\"ALBUM_1\", \"INFO\")</code> identifies <code>ALBUM_1</code>\u2019s metadata.</li> <li>The key <code>(\"ALBUM_1\", \"TRACK_1\")</code> identifies <code>ALBUM_1</code>\u2019s first track.</li> <li>The key <code>(\"PLAYLIST_1\", \"INFO\")</code> identifies <code>PLAYLIST_1</code>\u2019s content.</li> </ul> <p>It uses secondary indexes to answer additional queries.</p> GSI Primary Key Projected Attributes artist_name partition_key Pink Floyd ALBUM_1 album_title sort_key release_date genre The Dark Side of the Moon INFO 1973-03-01 Progressive rock Pink Floyd ALBUM_2 album_title sort_key release_date genre The Wall INFO 1979-11-30 Progressive rock ... The Beatles ALBUM_232 album_title sort_key release_date genre Revolver INFO 1966-06-21 Rock ... <p>This global secondary index groups <code>AlbumInfo</code> by <code>artist_name</code> and sorts them by the primary index <code>parition_key</code>. </p>"},{"location":"guide/data_modeling/#tempest","title":"Tempest","text":"<p>Tempest lets you define strongly typed data models on top of your <code>DynamoDBMapper</code> classes.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>interface MusicDb : LogicalDb {\n   @TableName(\"music_items\")\n   val music: MusicTable\n}\n\ninterface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n\n  val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;\n\n  // Global Secondary Indexes.\n  val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;\n  val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;\n\n  // Local Secondary Indexes.\n  val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;\n}\n\n@DynamoDbBean\nclass MusicItem {\n  // Primary key.\n  @get:DynamoDbPartitionKey\n  @get:DynamoDbSecondarySortKey(indexNames = [\"genre_album_index\", \"artist_album_index\"])\n  var partition_key: String? = null\n  @get:DynamoDbSortKey\n  var sort_key: String? = null\n  // Attributes...\n}\n</code></pre> <pre><code>public interface MusicDb extends LogicalDb {\n  @TableName(\"music_items\")\n  MusicTable music();\n}\n\npublic interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n  InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n\n  InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; playlistInfo();\n\n  // Global Secondary Indexes.\n  SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumInfoByGenre();\n  SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByArtist();\n\n  // Local Secondary Indexes.\n  SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; albumTracksByTitle();\n}\n\n@DynamoDbBean\npublic class MusicItem {\n  // All Items.\n  String partition_key = null;\n  String sort_key = null;\n  // Attributes...\n\n  @DynamoDbAttribute(\"partition_key\")\n  @DynamoDbPartitionKey\n  @DynamoDbSecondarySortKey(indexNames = {\"genre_album_index\", \"artist_album_index\"})\n  public String getPartitionKey() {\n    return partition_key;\n  }\n\n  public void setPartitionKey(String partition_key) {\n    this.partition_key = partition_key;\n  }\n\n  @DynamoDbAttribute(\"sort_key\")\n  @DynamoDbSortKey\n  public String getSortKey() {\n    return sort_key;\n  }\n\n  public void setSortKey(String sort_key) {\n    this.sort_key = sort_key;\n  }\n  // Getters and setters...\n}\n</code></pre> <pre><code>interface MusicDb : LogicalDb {\n  val music: MusicTable\n}\n\ninterface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n\n  val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;\n\n  // Global Secondary Indexes.\n  val albumInfoByGenre: SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt;\n  val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;\n\n  // Local Secondary Indexes.\n  val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;\n}\n\n@DynamoDBTable(tableName = \"music_items\")\nclass MusicItem {\n  // Primary key.\n  @DynamoDBHashKey\n  @DynamoDBIndexRangeKey(globalSecondaryIndexNames = [\"genre_album_index\", \"artist_album_index\"])\n  var partition_key: String? = null\n  @DynamoDBRangeKey\n  var sort_key: String? = null\n  // Attributes...\n}\n</code></pre> <pre><code>public interface MusicDb extends LogicalDb {\n  MusicTable music();\n}\n\npublic interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n  InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n\n  InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; playlistInfo();\n\n  // Global Secondary Indexes.\n  SecondaryIndex&lt;AlbumInfo.GenreIndexOffset, AlbumInfo&gt; albumInfoByGenre();\n  SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByArtist();\n\n  // Local Secondary Indexes.\n  SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; albumTracksByTitle();\n}\n\n@DynamoDBTable(tableName = \"music_items\")\npublic class MusicItem {\n  // All Items.\n  String partition_key = null;\n  String sort_key = null;\n  // Attributes...\n\n  @DynamoDBHashKey(attributeName = \"partition_key\")\n  @DynamoDBIndexRangeKey(globalSecondaryIndexNames = {\"genre_album_index\", \"artist_album_index\"})\n  public String getPartitionKey() {\n    return partition_key;\n  }\n\n  public void setPartitionKey(String partition_key) {\n    this.partition_key = partition_key;\n  }\n\n  @DynamoDBRangeKey(attributeName = \"sort_key\")\n  public String getSortKey() {\n    return sort_key;\n  }\n\n  public void setSortKey(String sort_key) {\n    this.sort_key = sort_key;\n  }\n  // Getter and setters...\n}\n</code></pre> <p>Tempest has these components:</p> <ul> <li>Logical DB<ul> <li>Logical tables (1 to 1 with your DynamoDBMapper classes)<ul> <li>Inline views <ul> <li>Key type</li> <li>Item type</li> </ul> </li> <li>Secondary indexes <ul> <li>Offset type</li> <li>Item type</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"guide/data_modeling/#logical-db","title":"Logical DB","text":"<p>A <code>LogicalDb</code> is a collection of tables that implement the DynamoDB best practice of putting multiple item types into the same storage table. This makes it possible to perform aggregate operations and transactions on those item types.</p> <p>For example, you can batch load up to 100 items in a single request. </p> KotlinJava <pre><code>val items = musicDb.batchLoad(\n  AlbumTrack.Key(\"ALBUM_1\", \"TRACK_5\"),\n  AlbumTrack.Key(\"ALBUM_2\", \"TRACK_3\"),\n  PlaylistInfo.Key(\"PLAYLIST_1\"))\n</code></pre> <pre><code>ItemSet items = db.batchLoad(\n    List.of(\n        new AlbumTrack.Key(\"ALBUM_1\", \"TRACK_5\"),\n        new AlbumTrack.Key(\"ALBUM_2\", \"TRACK_3\"),\n        new PlaylistInfo.Key(\"PLAYLIST_1\")));\n</code></pre> <p>To create a <code>LogicalDb</code>, you need to pass in an instance of <code>DynamoDBMapper</code>.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>val enhancedClient = DynamoDbEnhancedClient.create()\nval db: MusicDb = LogicalDb(enhancedClient)\n</code></pre> <pre><code>DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.create();\nMusicDb db = LogicalDb.create(MusicDb.class, enhancedClient);\n</code></pre> <pre><code>val client: AmazonDynamoDB = AmazonDynamoDBClientBuilder.standard().build()\nval mapper: DynamoDBMapper = DynamoDBMapper(client)\nval db: MusicDb = LogicalDb(mapper)\n</code></pre> <pre><code>AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();\nDynamoDBMapper mapper = new DynamoDBMapper(client);\nMusicDb db = LogicalDb.create(MusicDb.class, mapper);\n</code></pre>"},{"location":"guide/data_modeling/#optional-configuration","title":"Optional Configuration","text":"<p>When you create an instance of DynamoDBMapper, it has certain default behaviors; you can override these defaults by using the DynamoDBMapperConfig class.</p> <p>The following code snippet creates a DynamoDBMapper with custom settings:</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>val client = DynamoDbClient.create()\nval enhancedClient = DynamoDbEnhancedClient.builder()\n  .dynamoDbClient(client)\n  .extensions(listOf(/* ... */))\n  .build()\nval db: MusicDb = LogicalDb(enhancedClient)\n</code></pre> <pre><code>DynamoDbClient client = DynamoDbClient.create();\nDynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n    .dynamoDbClient(client)\n    .extensions(List.of(/* ... */))\n    .build();\nMusicDb db = LogicalDb.create(MusicDb.class, enhancedClient);\n</code></pre> <pre><code>val client = AmazonDynamoDBClientBuilder.standard().build()\nval mapperConfig = DynamoDBMapperConfig.builder()\n  .withSaveBehavior(SaveBehavior.CLOBBER)\n  .withConsistentReads(ConsistentReads.CONSISTENT)\n  .withTableNameOverride(null)\n  .withPaginationLoadingStrategy(PaginationLoadingStrategy.EAGER_LOADING)\n  .build()\nval mapper = DynamoDBMapper(client, mapperConfig)\nval db: MusicDb = LogicalDb(mapper)\n</code></pre> <pre><code>AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();\nDynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()\n    .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.CLOBBER)\n    .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)\n    .withTableNameOverride(null)\n    .withPaginationLoadingStrategy(DynamoDBMapperConfig.PaginationLoadingStrategy.EAGER_LOADING)\n  .build();\nDynamoDBMapper mapper = new DynamoDBMapper(client, mapperConfig);\nMusicDb db = LogicalDb.create(MusicDb.class, mapper);\n</code></pre> <p>For more information, see the DynamoDBMapper documentation</p>"},{"location":"guide/data_modeling/#logical-table","title":"Logical Table","text":"<p>A <code>LogicalTable</code> is a collection of views on a DynamoDB table that makes it easy to model heterogeneous items using strongly typed data classes.</p>"},{"location":"guide/data_modeling/#inline-view","title":"Inline View","text":"<p>An <code>InlineView</code> lets you perform CRUD operations, queries, and scans on an entity type.</p> KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n}\n\ndata class AlbumInfo(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  val album_title: String,\n  val artist_name: String,\n  val release_date: LocalDate,\n  val genre_name: String\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n\n  data class Key(\n    val album_token: String\n  ) {\n    val sort_key: String = \"\"\n  }\n}\n</code></pre> <pre><code>public interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n}\n\npublic class AlbumInfo {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  public final String album_title;\n  public final String artist_name;\n  public final LocalDate release_date;\n  public final String genre_name;\n\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n\n  public AlbumInfo(\n      String album_token,\n      String album_title, \n      String artist_name,\n      LocalDate release_date,\n      String genre_name) {\n    this.album_token = album_token;\n    this.album_title = album_title;\n    this.artist_name = artist_name;\n    this.release_date = release_date;\n    this.genre_name = genre_name;\n  }\n\n  public static class Key {\n    public final String album_token;\n    public final String sort_key = \"\";\n\n    public Key(String album_token) {\n      this.album_token = album_token;\n    }\n  }\n}\n</code></pre> <p>The <code>albumInfo</code> view is a type-safe way to access <code>AlbumInfo</code> entities:</p> Primary Key Attributes partition_key sort_key ALBUM_1 INFO album_title album_artist release_date genre The Dark Side of the Moon Pink Floyd 1973-03-01 Progressive rock ... ALBUM_2 INFO album_title album_artist release_date genre The Wall Pink Floyd 1979-11-30 Progressive rock ... <p>Prefixes are 1:1 with Types</p> <p>A <code>LogicalTable</code> can have multiple <code>InlineView</code>s. Tempest requires you to declare a prefix on the sort key in each entity type. It uses the prefix to determine the entity type.</p> Prefix Type INFO_ AlbumInfo TRACK_ AlbumTrack KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfo: InlineView&lt;AlbumInfo.Key, AlbumInfo&gt;\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n}\n\ndata class AlbumInfo(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  // ...\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n}\n\ndata class AlbumTrack(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  val track_token: String,\n  // ...\n)\n</code></pre> <pre><code>public interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;AlbumInfo.Key, AlbumInfo&gt; albumInfo();\n  InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n}\n\npublic class AlbumInfo {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  // ...\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n  // ...\n}\n\npublic class AlbumTrack {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  public final String track_token;\n  // ...\n}\n</code></pre>"},{"location":"guide/data_modeling/#secondary-index","title":"Secondary Index","text":"<p>An <code>SecondaryIndex</code> lets you perform queries, and scans on an entity type.</p> KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumInfoByArtist: SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt;\n}\n\ndata class AlbumInfo(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  val album_title: String,\n  val artist_name: String,\n  val release_date: LocalDate,\n  val genre_name: String\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n\n  @ForIndex(\"artist_album_index\")\n  data class ArtistIndexOffset(\n    val artist_name: String,\n    val album_token: String? = null,\n    // To uniquely identify an item in pagination.\n    val sort_key: String? = null\n  )\n}\n</code></pre> <pre><code>public interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  SecondaryIndex&lt;AlbumInfo.ArtistIndexOffset, AlbumInfo&gt; albumInfoByArtist();\n}\n\npublic class AlbumInfo {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  public final String album_title;\n  public final String artist_name;\n  public final LocalDate release_date;\n  public final String genre_name;\n\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n\n  @ForIndex(name = \"artist_album_index\")\n  public static class ArtistIndexOffset {\n    public final String artist_name;\n    @Nullable\n    public final String album_token;\n    // To uniquely identify an item in pagination.\n    @Nullable\n    public final String sort_key;\n\n    public ArtistIndexOffset(String artist_name) {\n      this(artist_name, null, null);\n    }\n\n    public ArtistIndexOffset(String artist_name, String album_token) {\n      this(artist_name, album_token, null);\n    }\n\n    public ArtistIndexOffset(String artist_name, @Nullable String album_token,\n        @Nullable String sort_key) {\n      this.artist_name = artist_name;\n      this.album_token = album_token;\n      this.sort_key = sort_key;\n    }\n  }\n}\n</code></pre> <p>DynamoDB secondary indexes allows duplicate values. In order to uniquely identify an item in pagination, a secondary index offset type needs to include the primary index partition key and sort key in addition to the secondary index partition key and sort key.  </p> <p>Secondary index offset types are also required to have a <code>@ForIndex</code> annotation that tells Tempest the index name.</p> <p>Properties are always mapped by name</p> <p>Our secondary index data class properties have the exact same name as the properties in our DynamoDB mapper class. Tempest uses name equality to bind indexes, keys, and items to the DynamoDB mapper class. Each Tempest type represents a different logical subset of the available attributes.</p> <p>The mapper class is just the union of the fields in each item, key, and secondary index.</p> MusicItem AlbumInfo.Key AlbumInfo.ArtistIndexOffset AlbumInfo AlbumTrack.Key AlbumTrack partition_key partition_key partition_key partition_key partition_key partition_key sort_key sort_key sort_key sort_key sort_key sort_key album_title album_title artist_name artist_name artist_name release_date release_date genre genre track_title track_title run_length run_length"},{"location":"guide/data_modeling/#custom-attribute-types","title":"Custom Attribute Types","text":"<p>Tempest uses <code>DynamoDBMapper</code> to encode and decode entities.</p> <p><code>DynamoDBMapper</code> supports these primitive Java types. </p> <p>You may use <code>DynamoDBTypeConverter</code> to support custom attribute types.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>@DynamoDbBean\nclass MusicItem {\n  // ...\n  @get:DynamoDbAttribute\n  @get:DynamoDbConvertedBy(LocalDateTypeConverter::class)\n  var release_date: LocalDate? = null\n  // ...\n}\n\ninternal class LocalDateTypeConverter : AttributeConverter&lt;LocalDate&gt; {\n  override fun transformFrom(input: LocalDate): AttributeValue {\n    return AttributeValue.builder().s(input.toString()).build()\n  }\n\n  override fun transformTo(input: AttributeValue): LocalDate {\n    return LocalDate.parse(input.s())\n  }\n\n  override fun type(): EnhancedType&lt;LocalDate&gt; {\n    return EnhancedType.of(LocalDate::class.java)\n  }\n\n  override fun attributeValueType(): AttributeValueType {\n    return AttributeValueType.S\n  }\n}\n</code></pre> <pre><code>@DynamoDbBean\npublic class MusicItem {\n  // ...\n  @DynamoDbAttribute(\"release_date\")\n  @DynamoDbConvertedBy(LocalDateTypeConverter.class)\n  public String getReleaseDate() {\n    return release_date;\n  }\n  // ...\n}\n\nclass LocalDateTypeConverter implements AttributeConverter&lt;LocalDate&gt; {\n  @Override public AttributeValue transformFrom(LocalDate input) {\n    return AttributeValue.builder().s(input.toString()).build();\n  }\n\n  @Override public LocalDate transformTo(AttributeValue input) {\n    return LocalDate.parse(input.s());\n  }\n\n  @Override public EnhancedType&lt;LocalDate&gt; type() {\n    return EnhancedType.of(LocalDate.class);\n  }\n\n  @Override public AttributeValueType attributeValueType() {\n    return AttributeValueType.S;\n  }\n}\n</code></pre> <pre><code>@DynamoDBTable(tableName = \"music_items\")\nclass MusicItem {\n  // ...\n  @DynamoDBAttribute\n  @DynamoDBTypeConverted(converter = LocalDateTypeConverter::class)\n  var release_date: LocalDate? = null\n  // ...\n}\n\nclass LocalDateTypeConverter : DynamoDBTypeConverter&lt;String, LocalDate&gt; {\n  override fun unconvert(string: String): LocalDate {\n    return LocalDate.parse(string)\n  }\n\n  override fun convert(localDate: LocalDate): String {\n    return localDate.toString()\n  }\n}\n</code></pre> <pre><code>@DynamoDBTable(tableName = \"music_items\")\npublic class MusicItem {\n  // ...\n  @DynamoDBAttribute(attributeName = \"release_date\")\n  @DynamoDBTypeConverted(converter = LocalDateTypeConverter.class)\n  public LocalDate getReleaseDate() {\n    return release_date;\n  }\n  // ...\n}\n\nclass LocalDateTypeConverter implements DynamoDBTypeConverter&lt;String, LocalDate&gt; {\n  @Override public String convert(LocalDate object) {\n    return object.toString();\n  }\n\n  @Override public LocalDate unconvert(String object) {\n    return LocalDate.parse(object);\n  }\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/dynamodb_resources/","title":"DynamoDB Resources","text":"<ul> <li>Official Developer Guide</li> <li>Advanced Design Patterns for DynamoDB \u2014 Slide</li> <li>Amazon DynamoDB Under the Hood \u2014 Slide</li> <li>The What, Why, and When of Single-Table Design with DynamoDB</li> </ul>"},{"location":"guide/getting_started/","title":"Getting Started","text":"<p>Prerequisites</p> <p>In DynamoDB, tables, items, and attributes are the core components that you work with.  A table is a collection of items, and each item is a collection of attributes.  DynamoDB uses primary keys to uniquely identify each item in a table and secondary indexes to provide more querying flexibility.</p> <p>To learn more about DynamoDB, check out the official developer guide.</p>"},{"location":"guide/getting_started/#get-tempest","title":"Get Tempest","text":"<p>First, add Tempest to your project.</p> <p>For AWS SDK 1.x:</p> <pre><code>dependencies {\n  implementation \"app.cash.tempest:tempest:1.10.0\"\n}\n</code></pre> <p>For AWS SDK 2.x:</p> <pre><code>dependencies {\n  implementation \"app.cash.tempest:tempest2:1.10.0\"\n}\n</code></pre>"},{"location":"guide/getting_started/#start-coding","title":"Start Coding","text":"<p>Let\u2019s build a URL shortener with the following features:</p> <ul> <li>Creating custom aliases from a short URL to a destination URL.</li> <li>Redirecting existing short URLs to destination URLs.  </li> </ul> <p>We express it like this in code.</p> KotlinJava <pre><code>interface UrlShortener {\n  /** \n   * Creates a custom alias from [shortUrl] to [destinationUrl]. \n   * @return false if [shortUrl] is taken. \n   */\n  fun shorten(shortUrl: String, destinationUrl: String): Boolean\n\n  /** \n    * Redirects [shortUrl] to its destination. \n    * @return null if not found. \n    */\n  fun redirect(shortUrl: String): String?\n}\n</code></pre> <pre><code>public interface UrlShortener {\n  /**\n   * Creates a custom alias from {@code shortUrl} to {@code destinationUrl}.\n   * @return false if {@code shortUrl} is taken.\n   */\n  boolean shorten(String shortUrl, String destinationUrl);\n\n  /**\n   * Redirects {@code shortUrl} to its destination.\n   * @return null if not found.\n   */\n  @Nullable\n  String redirect(String shortUrl);\n}\n</code></pre> <p>We will store URL aliases in the following table.</p> Primary Key Attributes short_url SquareCLA destination_url https://docs.google.com/forms/d/e/1FAIpQLSeRVQ35-gq2vdSxD1kdh7CJwRdjmUA0EZ9gRXaWYoUeKPZEQQ/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&amp;ndplr=1 KindleWireless destination_url http://www.amazon.com/Kindle-Wireless-Reading-Display-Globally/dp/B003FSUDM4/ref=amb_link_353259562_2?pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-10&amp;pf_rd_r=11EYKTN682A79T370AM3&amp;pf_rd_t=201&amp;pf_rd_p=1270985982&amp;pf_rd_i=B002Y27P3M BestUrlShortener destination_url https://www.google.com/search?q=best+url+shortener&amp;oq=best+url+shortener&amp;aqs=chrome..69i57j69i64l2.8705j0j1&amp;sourceid=chrome&amp;ie=UTF-8 ... <p>To access this table in code, model it using  <code>DynamoDBMapper</code> or  <code>DynamoDbEnhancedClient</code>.</p> <p>Note: The base item type <code>AliasItem</code> is still used for the <code>LogicalTable</code>. This type is intended to model an empty row, so all its fields should be nullable with a <code>null</code> default value. Using non-nullable types or fields with default values will cause issues during serialization and querying.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>// Note: this POJO is not type-safe because its attributes are nullable and mutable.\n@DynamoDbBean\nclass AliasItem {\n  @get:DynamoDbPartitionKey\n  var short_url: String? = null\n  var destination_url: String? = null\n}\n</code></pre> <pre><code>// Note: this POJO is not type-safe because its attributes are nullable and mutable.\n@DynamoDbBean\npublic class AliasItem {\n  private String short_url;\n  private String destination_url;\n\n  @DynamoDbPartitionKey\n  @DynamoDbAttribute(\"short_url\")\n  public String getShortUrl() {\n    return short_url;\n  }\n\n  public void setShortUrl(String short_url) {\n    this.short_url = short_url;\n  }\n\n  @DynamoDbAttribute(\"destination_url\")\n  public String getDestinationUrl() {\n    return destination_url;\n  }\n\n  public void setDestinationUrl(String destination_url) {\n    this.destination_url = destination_url;\n  }\n\n}\n</code></pre> <pre><code>// Note: this POJO is not type-safe because its attributes are nullable and mutable.\n@DynamoDBTable(tableName = \"alias_items\")\nclass AliasItem {\n  @DynamoDBHashKey\n  var short_url: String? = null\n  @DynamoDBAttribute\n  var destination_url: String? = null\n}\n</code></pre> <pre><code>// Note: this POJO is not type-safe because its attributes are nullable and mutable.\n@DynamoDBTable(tableName = \"alias_items\")\npublic class AliasItem {\n  private String shortUrl;\n  private String destinationUrl;\n\n  @DynamoDBHashKey(attributeName = \"short_url\")\n  public String getShortUrl() {\n    return shortUrl;\n  }\n\n  public void setShortUrl(String short_url) {\n    this.shortUrl = short_url;\n  }\n\n  @DynamoDBAttribute(attributeName = \"destination_url\")\n  public String getDestinationUrl() {\n    return destinationUrl;\n  }\n\n  public void setDestinationUrl(String destination_url) {\n    this.destinationUrl = destination_url;\n  }\n}\n</code></pre> <p>Tempest lets you interact with <code>AliasItem</code> using strongly typed data classes.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>interface AliasDb : LogicalDb {\n  @TableName(\"alias_items\")\n  val aliasTable: AliasTable\n}\n\ninterface AliasTable : LogicalTable&lt;AliasItem&gt; {\n  val aliases: InlineView&lt;Alias.Key, Alias&gt;\n}\n\ndata class Alias(\n  val short_url: String,\n  val destination_url: String\n) {\n  data class Key(\n    val short_url: String \n  )\n}\n</code></pre> <pre><code>public interface AliasDb extends LogicalDb {\n  @TableName(\"alias_items\")\n  AliasTable aliasTable();\n}\n\npublic interface AliasTable extends LogicalTable&lt;AliasItem&gt; {\n  InlineView&lt;Alias.Key, Alias&gt; aliases();\n}\n\npublic class Alias {\n\n  public final String short_url;\n  public final String destination_url;\n\n  public Alias(String short_url, String destination_url) {\n    this.short_url = short_url;\n    this.destination_url = destination_url;\n  }\n\n  public Key key() {\n    return new Key(short_url);\n  }\n\n  public static class Key {\n\n    public final String short_url;\n\n    public Key(String short_url) {\n      this.short_url = short_url;\n    }\n  }\n}\n</code></pre> <pre><code>interface AliasDb: LogicalDb {\n  val aliasTable: AliasTable\n}\n\ninterface AliasTable : LogicalTable&lt;AliasItem&gt; {\n  val aliases: InlineView&lt;Alias.Key, Alias&gt;\n}\n\ndata class Alias(\n  val short_url: String,\n  val destination_url: String\n) {\n  data class Key(\n    val short_url: String \n  )\n}\n</code></pre> <pre><code>public interface AliasDb extends LogicalDb {\n  AliasTable aliasTable();\n}\n\npublic interface AliasTable extends LogicalTable&lt;AliasItem&gt; {\n  InlineView&lt;Alias.Key, Alias&gt; aliases();\n}\n\npublic class Alias {\n\n  public final String short_url;\n  public final String destination_url;\n\n  public Alias(String short_url, String destination_url) {\n    this.short_url = short_url;\n    this.destination_url = destination_url;\n  }\n\n  public Key key() {\n    return new Key(short_url);\n  }\n\n  public static class Key {\n\n    public final String short_url;\n\n    public Key(String short_url) {\n      this.short_url = short_url;\n    }\n  }\n}\n</code></pre> <p>Let\u2019s put everything together.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>class RealUrlShortener(\n  private val table: AliasTable\n) : UrlShortener {\n\n  override fun shorten(shortUrl: String, destinationUrl: String): Boolean {\n    val item = Alias(shortUrl, destinationUrl)\n    val ifNotExist = Expression.builder()\n      .expression(\"attribute_not_exists(short_url)\")\n      .build()\n    return try {\n      table.aliases.save(item, ifNotExist)\n      true\n    } catch (e: ConditionalCheckFailedException) {\n      println(\"Failed to shorten $shortUrl because it already exists!\")\n      false\n    }\n  }\n\n  override fun redirect(shortUrl: String): String? {\n    val key = Alias.Key(shortUrl)\n    return table.aliases.load(key)?.destination_url\n  }\n}\n\nfun main(args: Array&lt;String&gt;) {\n  val client = DynamoDbEnhancedClient.create()\n  val db = LogicalDb&lt;AliasDb&gt;(client)\n  urlShortener = RealUrlShortener(db.aliasTable)\n  urlShortener.shorten(\"tempest\", \"https://cashapp.github.io/tempest\")\n}\n</code></pre> <pre><code>public class RealUrlShortener implements UrlShortener {\n\n  private final AliasTable table;\n\n  public RealUrlShortener(AliasTable table) {\n    this.table = table;\n  }\n\n  @Override\n  public boolean shorten(String shortUrl, String destinationUrl) {\n    Alias item = new Alias(shortUrl, destinationUrl);\n    Expression ifNotExist = Expression.builder()\n        .expression(\"attribute_not_exists(short_url)\")\n        .build();\n    try {\n      table.aliases().save(item, ifNotExist);\n      return true;\n    } catch (ConditionalCheckFailedException e) {\n      System.out.println(\"Failed to shorten $shortUrl because it already exists!\");\n      return false;\n    }\n  }\n\n  @Override\n  @Nullable\n  public String redirect(String shortUrl) {\n    Alias.Key key = new Alias.Key(shortUrl);\n    Alias alias = table.aliases().load(key);\n    if (alias == null) {\n      return null;\n    }\n    return alias.destination_url;\n  }\n}\n\npublic static void main(String[] args) {\n  DynamoDbEnhancedClient client = DynamoDbEnhancedClient.create();\n  AliasDb db = LogicalDb.create(AliasDb.class, client);\n  UrlShortener urlShortener = new RealUrlShortener(db.aliasTable());\n  urlShortener.shorten(\"tempest\", \"https://cashapp.github.io/tempest\");\n}\n</code></pre> <pre><code>class RealUrlShortener(\n  private val table: AliasTable\n) : UrlShortener {\n\n  override fun shorten(shortUrl: String, destinationUrl: String): Boolean {\n    val item = Alias(shortUrl, destinationUrl)\n    val ifNotExist = DynamoDBSaveExpression()\n      .withExpectedEntry(\"short_url\", ExpectedAttributeValue()\n        .withExists(false))\n    return try {\n      table.aliases.save(item, ifNotExist)\n      true\n    } catch (e: ConditionalCheckFailedException) {\n      println(\"Failed to shorten $shortUrl because it already exists!\")\n      false\n    }\n  }\n\n  override fun redirect(shortUrl: String): String? {\n    val key = Alias.Key(shortUrl)\n    return table.aliases.load(key)?.destination_url\n  }\n}\n\nfun main(args: Array&lt;String&gt;) {\n  val client: AmazonDynamoDB = AmazonDynamoDBClientBuilder.standard().build()\n  val mapper: DynamoDBMapper = DynamoDBMapper(client)\n  val db: AliasDb = LogicalDb(mapper)\n  val urlShortener = RealUrlShortener(db.aliasTable)\n  urlShortener.shorten(\"tempest\", \"https://cashapp.github.io/tempest\")\n}\n</code></pre> <pre><code>public class RealUrlShortener implements UrlShortener {\n\n  private final AliasTable table;\n\n  public RealUrlShortener(AliasTable table) {\n    this.table = table;\n  }\n\n  @Override\n  public boolean shorten(String shortUrl, String destinationUrl) {\n    Alias item = new Alias(shortUrl, destinationUrl);\n    DynamoDBSaveExpression ifNotExist = new DynamoDBSaveExpression()\n        .withExpectedEntry(\n            \"short_url\",\n            new ExpectedAttributeValue().withExists(false));\n    try {\n      table.aliases().save(item, ifNotExist);\n      return true;\n    } catch (ConditionalCheckFailedException e) {\n      System.out.println(\"Failed to shorten $shortUrl because it already exists!\");\n      return false;\n    }\n  }\n\n  @Override\n  @Nullable\n  public String redirect(String shortUrl) {\n    Alias.Key key = new Alias.Key(shortUrl);\n    Alias alias = table.aliases().load(key);\n    if (alias == null) {\n      return null;\n    }\n    return alias.destination_url;\n  }\n}\n\npublic static void main(String[] args) {\n  AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().build();\n  DynamoDBMapper mapper = new DynamoDBMapper(client);\n  AliasDb db = LogicalDb.create(AliasDb.class, mapper);\n  UrlShortener urlShortener = new RealUrlShortener(db.aliasTable());\n  urlShortener.shorten(\"tempest\", \"https://cashapp.github.io/tempest\");\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>URL Shortener - SDK 1.x (.kt, .java)</li> <li>URL Shortener - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/optimistic_locking/","title":"Optimistic Locking","text":"<p>When two writers write to the same item at the same time, there is a conflict. By default, the last writer wins.</p> <p>To avoid conflicts in your application, check out these tools:</p> <ul> <li>Numeric attributes only: Atomic counters models numeric attributes that are incremented, unconditionally, without interfering with other write requests. </li> <li>Most use cases: Optimistic locking is a strategy to ensure that the client-side item that you are updating (or deleting) is the same as the item in Amazon DynamoDB. If you use this strategy, your database writes are protected from being overwritten by the writes of others, and vice versa. </li> </ul> <p>Global tables do not support optimistic locking</p> <p>DynamoDB global tables use a \u201clast writer wins\u201d reconciliation between concurrent updates. If you use global tables, last writer policy wins. So in this case, the locking strategy does not work as expected.</p> <p>Let\u2019s add a playlist feature to our music library:</p> KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val playlistInfo: InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt;\n}\n\ndata class PlaylistInfo(\n  @Attribute(name = \"partition_key\")\n  val playlist_token: String,\n  val playlist_name: String,\n  val playlist_tracks: List&lt;AlbumTrack.Key&gt;,\n  val playlist_version: Long = 1\n) {\n  @Attribute(prefix = \"INFO_\")\n  val sort_key: String = \"\"\n\n  data class Key(\n    val playlist_token: String\n  ) {\n    val sort_key: String = \"\"\n  }\n}\n</code></pre> <pre><code>public interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;PlaylistInfo.Key, PlaylistInfo&gt; playlistInfo();\n}\n\npublic class PlaylistInfo {\n  @Attribute(name = \"partition_key\")\n  public final String playlist_token;\n  public final String playlist_name;\n  public final List&lt;AlbumTrack.Key&gt; playlist_tracks;\n  public final Long playlist_version;\n  @Attribute(prefix = \"INFO_\")\n  public final String sort_key = \"\";\n\n  public PlaylistInfo(String playlist_token, String playlist_name,\n      List&lt;AlbumTrack.Key&gt; playlist_tracks) {\n    this(playlist_token, playlist_name, playlist_tracks, 1L);\n  }\n\n  public PlaylistInfo(String playlist_token, String playlist_name,\n      List&lt;AlbumTrack.Key&gt; playlist_tracks, Long playlist_version) {\n    this.playlist_token = playlist_token;\n    this.playlist_name = playlist_name;\n    this.playlist_tracks = playlist_tracks;\n    this.playlist_version = playlist_version;\n  }\n\n  public static class Key {\n    public final String playlist_token;\n    public final String sort_key = \"\";\n\n    public Key(String playlist_token) {\n      this.playlist_token = playlist_token;\n    }\n  }\n}\n</code></pre> <p>To serialize writes to the same playlist, we can have writers implement optimistic locking on the <code>playlist_version</code> attribute. </p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val table: MusicTable\n\nfun changePlaylistName(playlistToken: String, newName: String) {\n  // Read.\n  val existing = checkNotNull(\n    table.playlistInfo.load(PlaylistInfo.Key(playlistToken))\n  ) { \"Playlist does not exist: $playlistToken\" }\n  // Modify.\n  val newPlaylist = existing.copy(\n    playlist_name = newName,\n    playlist_version = existing.playlist_version + 1\n  )\n  // Write.\n  table.playlistInfo.save(\n    newPlaylist,\n    ifPlaylistVersionIs(existing.playlist_version)\n  )\n}\n\nprivate fun ifPlaylistVersionIs(playlist_version: Long): Expression {\n  return Expression.builder()\n    .expression(\"playlist_version = :playlist_version\")\n    .expressionValues(Map.of(\":playlist_version\", AttributeValue.builder().n(\"$playlist_version\").build()))\n    .build()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic void changePlaylistName(String playlistToken, String newName) {\n  // Read.\n  PlaylistInfo existing = table.playlistInfo().load(new PlaylistInfo.Key(playlistToken));\n  if (existing == null) {\n    throw new IllegalStateException(\"Playlist does not exist: \" + playlistToken);\n  }\n  // Modify.\n  PlaylistInfo newPlaylist = new PlaylistInfo(\n      existing.playlist_token,\n      newName,\n      existing.playlist_tracks,\n      // playlist_version.\n      existing.playlist_version + 1\n  );\n  // Write.\n  table.playlistInfo().save(\n      newPlaylist,\n      ifPlaylistVersionIs(existing.playlist_version)\n  );\n}\n\nprivate Expression ifPlaylistVersionIs(Long playlist_version) {\n  return Expression.builder()\n      .expression(\"playlist_version = :playlist_version\")\n      .expressionValues(Map.of(\":playlist_version\", AttributeValue.builder().n(\"\" + playlist_version).build()))\n      .build();\n}\n</code></pre> <pre><code>private val table: MusicTable\n\nfun changePlaylistName(playlistToken: String, newName: String) {\n  // Read.\n  val existing = checkNotNull(\n    table.playlistInfo.load(PlaylistInfo.Key(playlistToken))\n  ) { \"Playlist does not exist: $playlistToken\" }\n  // Modify.\n  val newPlaylist = existing.copy(\n    playlist_name = newName,\n    playlist_version = existing.playlist_version + 1\n  )\n  // Write.\n  table.playlistInfo.save(\n    newPlaylist,\n    ifPlaylistVersionIs(existing.playlist_version)\n  )\n}\n\nprivate fun ifPlaylistVersionIs(playlist_version: Long): DynamoDBSaveExpression {\n  return DynamoDBSaveExpression()\n    .withExpectedEntry(\n      \"playlist_version\",\n      ExpectedAttributeValue()\n        .withComparisonOperator(ComparisonOperator.EQ)\n        .withAttributeValueList(AttributeValue().withN(\"$playlist_version\"))\n    )\n}\n</code></pre> <pre><code>private MusicTable table;\n\npublic void changePlaylistName(String playlistToken, String newName) {\n  // Read.\n  PlaylistInfo existing = table.playlistInfo().load(new PlaylistInfo.Key(playlistToken));\n  if (existing == null) {\n    throw new IllegalStateException(\"Playlist does not exist: \" + playlistToken);\n  }\n  // Modify.\n  PlaylistInfo newPlaylist = new PlaylistInfo(\n      existing.playlist_token,\n      newName,\n      existing.playlist_tracks,\n      // playlist_version.\n      existing.playlist_version + 1\n  );\n  // Write.\n  table.playlistInfo().save(\n      newPlaylist,\n      ifPlaylistVersionIs(existing.playlist_version)\n  );\n}\n\nprivate DynamoDBSaveExpression ifPlaylistVersionIs(Long playlist_version) {\n  return new DynamoDBSaveExpression()\n      .withExpectedEntry(\n          \"playlist_version\",\n          new ExpectedAttributeValue()\n              .withComparisonOperator(ComparisonOperator.EQ)\n              .withAttributeValueList(new AttributeValue().withN(\"\" + playlist_version))\n      );\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Optimistic Locking - SDK 1.x (.kt, .java)</li> <li>Optimistic Locking - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/query_scan/","title":"Query & Scan","text":""},{"location":"guide/query_scan/#query","title":"Query","text":"<p>In each DynamoDB table and its secondary indexes, items are grouped by partition key and sorted by the sort key.</p> <p>To query an index, you must provide the name of the partition key attribute and a single value for that attribute. Query returns all items with that partition key value. Optionally, you can provide a sort key attribute and use a comparison operator to refine the search results.</p> <p>Global secondary index queries cannot fetch attributes from the base table</p> <p>A projection is the set of attributes that is copied from a table into a secondary index. The partition key and sort key of the table are always projected into the index; you can project other attributes to support your application\u2019s query requirements. When you query an index, Amazon DynamoDB can access any attribute in the projection as if those attributes were in a table of their own.</p> <p>Let\u2019s continue with the music library example.</p> KotlinJava <pre><code>interface MusicTable : LogicalTable&lt;MusicItem&gt; {\n  val albumTracks: InlineView&lt;AlbumTrack.Key, AlbumTrack&gt;\n  // Local Secondary Indexes.\n  val albumTracksByTitle: SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt;\n}\n\ndata class AlbumTrack(\n  @Attribute(name = \"partition_key\")\n  val album_token: String,\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  val track_token: String,\n  val track_title: String,\n  val run_length: Duration\n) {\n  data class Key(\n    val album_token: String,\n    val track_token: String = \"\"\n  )\n\n  @ForIndex(\"album_track_title_index\")\n  data class TitleIndexOffset(\n    val album_token: String,\n    val track_title: String,\n    // To uniquely identify an item in pagination.\n    val track_token: String? = null\n  )\n}\n</code></pre> <pre><code>public interface MusicTable extends LogicalTable&lt;MusicItem&gt; {\n  InlineView&lt;AlbumTrack.Key, AlbumTrack&gt; albumTracks();\n  // Local Secondary Indexes.\n  SecondaryIndex&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; albumTracksByTitle();\n}\n\npublic class AlbumTrack {\n  @Attribute(name = \"partition_key\")\n  public final String album_token;\n  @Attribute(name = \"sort_key\", prefix = \"TRACK_\")\n  public final String track_token;\n  public final String track_title;\n  public final Duration run_length;\n\n  public AlbumTrack(\n      String album_token,\n      String track_token,\n      String track_title,\n      Duration run_length) {\n    this.album_token = album_token;\n    this.track_token = track_token;\n    this.track_title = track_title;\n    this.run_length = run_length;\n  }\n\n  public static class Key {\n    public final String album_token;\n    public final String track_token;\n\n    public Key(String album_token, String track_token) {\n      this.album_token = album_token;\n      this.track_token = track_token;\n    }\n\n    public Key(String album_token) {\n      this(album_token, \"\");\n    }\n  }\n\n  @ForIndex(name = \"album_track_title_index\")\n  public static class TitleIndexOffset {\n    public final String album_token;\n    public final String track_title;\n    // To uniquely identify an item in pagination.\n    @Nullable\n    public final String track_token;\n\n    public TitleIndexOffset(String album_token, String track_title) {\n      this(album_token, track_title, null);\n    }\n\n    public TitleIndexOffset(String album_token, String track_title, String track_token) {\n      this.album_token = album_token;\n      this.track_title = track_title;\n      this.track_token = track_token;\n    }\n  }\n}\n</code></pre>"},{"location":"guide/query_scan/#key-condition","title":"Key Condition","text":""},{"location":"guide/query_scan/#partition-key-and-entity-type","title":"Partition Key and Entity Type","text":"<p>This uses the primary index to find all tracks in the given album, sorted by track number.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.query(\n    keyCondition = BeginsWith(\n      prefix = AlbumTrack.Key(albumToken)\n    )\n  )\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.Key(albumToken)\n      )\n  );\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#partition-key-and-sort-key-prefix","title":"Partition Key and Sort Key Prefix","text":"<p>This uses the secondary index to find all tracks in the given album whose title starts with \u201cI want \u201c, sorted by title.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracksByTitle.query(\n    keyCondition = BeginsWith(\n      prefix = AlbumTrack.TitleIndexOffset(albumToken, track_title = \"I want \")\n    )\n  )\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.TitleIndexOffset, AlbumTrack&gt; page = table.albumTracksByTitle().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.TitleIndexOffset(albumToken, \"I want \")\n      )\n  );\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#partition-key-and-sort-key-range","title":"Partition Key and Sort Key Range","text":"<p>This uses the primary index to find track 5 through 9 in the given album, sorted by track number.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.query(\n    keyCondition = Between(\n      startInclusive = AlbumTrack.Key(albumToken, track_number = 5), \n      endInclusive = AlbumTrack.Key(albumToken, track_number = 9))\n  )\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().query(\n      // keyCondition.\n      new Between&lt;&gt;(\n          // startInclusive.\n          new AlbumTrack.Key(albumToken, /* track_number */ 5L),\n          // endInclusive.\n          new AlbumTrack.Key(albumToken, /* track_number */ 9L))\n  );\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#descending-order","title":"Descending Order","text":"<p>By default, the sort order is ascending. To reverse the order, set the <code>asc</code> parameter to <code>false</code>.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.query(\n    keyCondition = BeginsWith(\n      prefix = AlbumTrack.Key(albumToken)\n    ),\n    asc = false\n  )\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.Key(albumToken)\n      ),\n      // config.\n      new QueryConfig.Builder()\n          .asc(false)\n          .build()\n  );\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#filter-expression","title":"Filter Expression","text":"<p>If you need to further refine the Query results, you can optionally provide a filter expression. A filter expression determines which items within the Query results should be returned to you. All of the other results are discarded.</p> <p>Filter expressions do not save cost</p> <p>A filter expression is applied after a Query finishes, but before the results are returned. Therefore, a Query consumes the same amount of read capacity, regardless of whether a filter expression is present.</p> <p>A Query operation can retrieve a maximum of 1 MB of data. This limit applies before the filter expression is evaluated.</p> <p>A filter expression cannot contain partition key or sort key attributes. You need to specify those attributes in the key condition expression, not the filter expression.</p> <p>This find all tracks in the given album that last longer than 3 minutes, sorted by track number.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava  - SDK 1.x <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.query(\n    keyCondition = BeginsWith(prefix = AlbumTrack.Key(albumToken)),\n    filterExpression = runLengthLongerThan(Duration.ofMinutes(3))\n  )\n  return page.contents\n}\n\nprivate fun runLengthLongerThan(duration: Duration): Expression {\n  return Expression.builder()\n    .expression(\"run_length &gt; :duration\")\n    .expressionValues(\n       mapOf(\n        \":duration\" to AttributeValue.builder().s(duration.toString()).build()))\n    .build()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.Key(albumToken)\n      ),\n      // config.\n      new QueryConfig.Builder()\n          .filterExpression(runLengthLongerThan(Duration.ofMinutes(3)))\n          .build()\n  );\n  return page.getContents();\n}\n\nprivate Expression runLengthLongerThan(Duration duration) {\n  return Expression.builder()\n    .expression(\"run_length &gt; :duration\")\n    .expressionValues(\n      Map.of(\":duration\", AttributeValue.builder().s(duration.toString()).build()))\n    .build();\n}\n</code></pre> <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.query(\n    keyCondition = BeginsWith(prefix = AlbumTrack.Key(albumToken)),\n    filterExpression = runLengthLongerThan(Duration.ofMinutes(3))\n  )\n  return page.contents\n}\n\nprivate fun runLengthLongerThan(duration: Duration): FilterExpression {\n  return FilterExpression(\n    \"run_length &gt; :duration\",\n    mapOf(\n      \":duration\" to AttributeValue().withS(duration.toString())\n    )\n  )\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().query(\n      // keyCondition.\n      new BeginsWith&lt;&gt;(\n          // prefix.\n          new AlbumTrack.Key(albumToken)\n      ),\n      // config.\n      new QueryConfig.Builder()\n          .filterExpression(runLengthLongerThan(Duration.ofMinutes(3)))\n          .build()\n  );\n  return page.getContents();\n}\n\nprivate FilterExpression runLengthLongerThan(Duration duration) {\n  return new FilterExpression(\n      \"run_length &gt; :duration\",\n      Map.of(\":duration\", new AttributeValue().withS(duration.toString()))\n  );\n}\n</code></pre>"},{"location":"guide/query_scan/#pagination","title":"Pagination","text":"KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracks(albumToken: String): List&lt;AlbumTrack&gt; {\n  val tracks = mutableListOf&lt;AlbumTrack&gt;()\n  var page: Page&lt;AlbumTrack.Key, AlbumTrack&gt;? = null\n  do {\n    page = table.albumTracks.query(\n      keyCondition = BeginsWith(AlbumTrack.Key(albumToken)),\n      pageSize = 10,\n      initialOffset = page?.offset\n    )\n    tracks.addAll(page.contents)\n  } while(page?.hasMorePages == true)\n  return tracks.toList()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracks(String albumToken) {\n  List&lt;AlbumTrack&gt; tracks = new ArrayList&lt;&gt;();\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = null;\n  do {\n    page = table.albumTracks().query(\n        // keyCondition.\n        new BeginsWith&lt;&gt;(new AlbumTrack.Key(albumToken)),\n        // config.\n        new QueryConfig.Builder()\n            .pageSize(10)\n            .build(),\n        // initialOffset.\n        page != null ? page.getOffset() : null\n    );\n    tracks.addAll(page.getContents());\n  } while (page.getHasMorePages());\n  return tracks;\n}\n</code></pre>"},{"location":"guide/query_scan/#specifying-the-offset","title":"Specifying the Offset","text":"KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAlbumTracksAfterTrack(albumToken: String, trackToken: String): List&lt;AlbumTrack&gt; {\n  val tracks = mutableListOf&lt;AlbumTrack&gt;()\n  var page: Page&lt;AlbumTrack.Key, AlbumTrack&gt;? = null\n  val offset = Offset(AlbumTrack.Key(trackToken))\n  do {\n    page = table.albumTracks.query(\n      keyCondition = BeginsWith(AlbumTrack.Key(albumToken)),\n      pageSize = 10,\n      initialOffset = page?.offset ?: offset\n    )\n    tracks.addAll(page.contents)\n  } while (page?.hasMorePages == true)\n  return tracks.toList()\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAlbumTracksAfterTrack(String albumToken, String trackToken) {\n  List&lt;AlbumTrack&gt; tracks = new ArrayList&lt;&gt;();\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = null;\n  Offset&lt;AlbumTrack.Key&gt; firstOffset = new Offset&lt;&gt;(new AlbumTrack.Key(albumToken, trackToken));\n\n  do {\n    page = table.albumTracks().query(\n        // keyCondition.\n        new BeginsWith&lt;&gt;(new AlbumTrack.Key(albumToken)),\n        // config.\n        new QueryConfig.Builder()\n                .pageSize(10)\n                .build(),\n        // initialOffset.\n        page != null ? page.getOffset() : firstOffset\n    );\n    tracks.addAll(page.getContents());\n  } while (page.getHasMorePages());\n  return tracks;\n}\n</code></pre>"},{"location":"guide/query_scan/#scan","title":"Scan","text":"<p>A Scan operation in Amazon DynamoDB reads every item in a table or a secondary index.</p> <p>By default, the Scan operation processes data sequentially. Amazon DynamoDB returns data to the application in 1 MB increments, and an application performs additional Scan operations to retrieve the next 1 MB of data.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAllAlbumTracks(): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.scan()\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\n\npublic List&lt;AlbumTrack&gt; loadAllAlbumTracks() {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().scan();\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#parallel-scan","title":"Parallel Scan","text":"<p>The larger the table or index being scanned, the more time the Scan takes to complete. In addition, a sequential Scan might not always be able to fully use the provisioned read throughput capacity: Even though DynamoDB distributes a large table\u2019s data across multiple physical partitions, a Scan operation can only read one partition at a time. For this reason, the throughput of a Scan is constrained by the maximum throughput of a single partition.</p> <p>To address these issues, the Scan operation can logically divide a table or secondary index into multiple segments, with multiple application workers scanning the segments in parallel. Each worker can be a thread (in programming languages that support multithreading) or an operating system process. To perform a parallel scan, each worker issues its own Scan request with an unique <code>WorkerId</code>.</p> KotlinJava <pre><code>private val table: MusicTable\n\nfun loadAllAlbumTracks(): List&lt;AlbumTrack&gt; = runBlocking {\n  val segment1 = async { loadSegment(1) }\n  val segment2 = async { loadSegment(2) }\n  segment1.await() + segment2.await()\n}\n\nprivate fun loadSegment(segment: Int): List&lt;AlbumTrack&gt; {\n  val page = table.albumTracks.scan(\n    workerId = WorkerId(segment, totalSegments = 2)\n  )\n  return page.contents\n}\n</code></pre> <pre><code>private final MusicTable table;\nprivate final ExecutorService executor;\n\npublic List&lt;AlbumTrack&gt; loadAllAlbumTracks() {\n  Future&lt;List&lt;AlbumTrack&gt;&gt; segment1 = executor.submit(() -&gt; loadSegment(1));\n  Future&lt;List&lt;AlbumTrack&gt;&gt; segment2 = executor.submit(() -&gt; loadSegment(2));\n  List&lt;AlbumTrack&gt; results = new ArrayList&lt;&gt;();\n  try {\n    results.addAll(segment1.get());\n    results.addAll(segment2.get());\n  } catch (InterruptedException | ExecutionException e) {\n    throw new IllegalStateException(\"Failed to load tracks\", e);\n  }\n  return results;\n}\n\nprivate List&lt;AlbumTrack&gt; loadSegment(int segment) {\n  Page&lt;AlbumTrack.Key, AlbumTrack&gt; page = table.albumTracks().scan(\n      new ScanConfig.Builder()\n          .workerId(new WorkerId(segment, /* totalSegments */ 2))\n          .build()\n  );\n  return page.getContents();\n}\n</code></pre>"},{"location":"guide/query_scan/#filter-expression_1","title":"Filter Expression","text":"<p>See query filter expression above.</p>"},{"location":"guide/query_scan/#pagination_1","title":"Pagination","text":"<p>See query pagination above.</p> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Query &amp; Scan - SDK 1.x (.kt, .java)</li> <li>Query &amp; Scan - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/testing/","title":"Testing","text":""},{"location":"guide/testing/#tempest-testing","title":"Tempest Testing","text":"<p>Tempest provides a library for testing DynamoDB clients using DynamoDBLocal . It comes with two implementations:</p> <ul> <li>JVM: This is the preferred option, running a <code>DynamoDBProxyServer</code> backed by <code>sqlite4java</code>,   which is available on most platforms.</li> <li>Docker: This runs dynamodb-local in a Docker   container.</li> </ul> <p>Feature matrix:</p> Feature tempest-testing-jvm tempest-testing-docker Start up time ~1s ~10s Memory usage Less More Dependency sqlite4java native library Docker"},{"location":"guide/testing/#junit-5-integration","title":"JUnit 5 Integration","text":"<p>To use <code>tempest-testing</code>, first add this library as a test dependency:</p> <p>For AWS SDK 1.x:</p> <pre><code>dependencies {\n  testImplementation \"app.cash.tempest:tempest-testing-jvm:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest-testing-junit5:1.10.0\"\n}\n// Or\ndependencies {\n  testImplementation \"app.cash.tempest:tempest-testing-docker:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest-testing-junit5:1.10.0\"\n}\n</code></pre> <p>For AWS SDK 2.x:</p> <pre><code>dependencies {\n  testImplementation \"app.cash.tempest:tempest2-testing-jvm:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest2-testing-junit5:1.10.0\"\n}\n// Or\ndependencies {\n  testImplementation \"app.cash.tempest:tempest2-testing-docker:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest2-testing-junit5:1.10.0\"\n}\n</code></pre> <p>Then in tests annotated with <code>@org.junit.jupiter.api.Test</code>, you may add <code>TestDynamoDb</code> as a test extension. This extension spins up a DynamoDB server. It shares the server across tests and keeps it running until the process exits. It also manages test tables for you, recreating them before each test.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>class MyTest {\n  @RegisterExtension\n  @JvmField\n  val db = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.TABLE_NAME, MusicItem::class.java))\n      .build()\n\n  private val musicTable by lazy { db.logicalDb&lt;MusicDb&gt;().music }\n\n  @Test\n  fun test() {\n    val albumInfo = AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    )\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo.save(albumInfo)\n  }\n\n  @Test\n  fun anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    val result = db.dynamoDb.describeTable(\n            DescribeTableRequest.builder().tableName(MusicItem.TABLE_NAME).build()\n    )\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @RegisterExtension\n  TestDynamoDb db = new TestDynamoDb.Builder(JvmDynamoDbServer.Factory.INSTANCE)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.TABLE_NAME, MusicItem.class))\n      .build();\n\n  MusicTable musicTable;\n\n  @BeforeEach\n  public void setup() {\n    musicTable = db.logicalDb(MusicDb.class).music();\n  }\n\n  @Test\n  public void test() {\n    AlbumInfo albumInfo = new AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    );\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo().save(albumInfo);\n  }\n\n  @Test\n  public void anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    DescribeTableResponse result = db.getDynamoDb().describeTable(\n            DescribeTableRequest.builder().tableName(MusicItem.TABLE_NAME).build()\n    );\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @RegisterExtension\n  @JvmField\n  val db = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem::class.java))\n      .build()\n\n  private val musicTable by lazy { db.logicalDb&lt;MusicDb&gt;().music }\n\n  @Test\n  fun test() {\n    val albumInfo = AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    )\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo.save(albumInfo)\n  }\n\n  @Test\n  fun anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    val result = db.dynamoDb.describeTable(\"music_items\")\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @RegisterExtension\n  TestDynamoDb db = new TestDynamoDb.Builder(JvmDynamoDbServer.Factory.INSTANCE)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.class))\n      .build();\n\n  MusicTable musicTable;\n\n  @BeforeEach\n  public void setup() {\n    musicTable = db.logicalDb(MusicDb.class).music();\n  }\n\n  @Test\n  public void test() {\n    AlbumInfo albumInfo = new AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    );\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo().save(albumInfo);\n  }\n\n  @Test\n  public void anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    DescribeTableResult result = db.getDynamoDb().describeTable(\"music_items\");\n    // Do something with the result...\n  }\n}\n</code></pre> <p>To customize test tables, mutate the <code>CreateTableRequest</code> in a lambda.</p> <pre><code>fun testDb() = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n  .addTable(\n    TestTable.create&lt;MusicItem&gt; { createTableRequest -&gt;\n      for (gsi in createTableRequest.globalSecondaryIndexes) {\n        gsi.withProjection(Projection().withProjectionType(ProjectionType.ALL))\n      }\n      createTableRequest\n    }\n  )\n  .build()\n</code></pre> <p>To use the Docker implementation, specify it in the builder.</p> <pre><code>fun testDb() = TestDynamoDb.Builder(DockerDynamoDbServer.Factory)\n  .addTable(TestTable.create&lt;MusicItem&gt;())\n  .build()\n</code></pre>"},{"location":"guide/testing/#junit-4-integration","title":"JUnit 4 Integration","text":"<p>To use <code>tempest-testing</code>, first add this library as a test dependency:</p> <p>For AWS SDK 1.x:</p> <pre><code>dependencies {\n  testImplementation \"app.cash.tempest:tempest-testing-jvm:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest-testing-junit4:1.10.0\"\n}\n// Or\ndependencies {\n  testImplementation \"app.cash.tempest:tempest-testing-docker:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest-testing-junit4:1.10.0\"\n}\n</code></pre> <p>For AWS SDK 2.x:</p> <pre><code>dependencies {\n  testImplementation \"app.cash.tempest:tempest2-testing-jvm:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest2-testing-junit4:1.10.0\"\n}\n// Or\ndependencies {\n  testImplementation \"app.cash.tempest:tempest2-testing-docker:1.10.0\"\n  testImplementation \"app.cash.tempest:tempest2-testing-junit4:1.10.0\"\n}\n</code></pre> <p>Then in tests annotated with <code>@org.junit.Test</code>, you may add <code>TestDynamoDb</code> as a test rule. This rule spins up a DynamoDB server. It shares the server across tests and keeps it running until the process exits. It also manages test tables for you, recreating them before each test.</p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>class MyTest {\n  @get:Rule\n  val db = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.TABLE_NAME, MusicItem::class.java))\n      .build()\n\n  private val musicTable by lazy { db.logicalDb&lt;MusicDb&gt;().music }\n\n  @Test\n  fun test() {\n    val albumInfo = AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    )\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo.save(albumInfo)\n  }\n\n  @Test\n  fun anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    val result = db.dynamoDb.describeTable(\n            DescribeTableRequest.builder().tableName(MusicItem.TABLE_NAME).build()\n    )\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @Rule\n  public TestDynamoDb db = new TestDynamoDb.Builder(JvmDynamoDbServer.Factory.INSTANCE)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.TABLE_NAME, MusicItem.class))\n      .build();\n\n  MusicTable musicTable;\n\n  @Before\n  public void setup() {\n    musicTable = db.logicalDb(MusicDb.class).music();\n  }\n\n  @Test\n  public void test() {\n    AlbumInfo albumInfo = new AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    );\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo().save(albumInfo);\n  }\n\n  @Test\n  public void anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    DescribeTableResponse result = db.getDynamoDb().describeTable(\n            DescribeTableRequest.builder().tableName(MusicItem.TABLE_NAME).build()\n    );\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @get:Rule\n  val db = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem::class.java))\n      .build()\n\n  private val musicTable by lazy { db.logicalDb&lt;MusicDb&gt;().music }\n\n  @Test\n  fun test() {\n    val albumInfo = AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    )\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo.save(albumInfo)\n  }\n\n  @Test\n  fun anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    val result = db.dynamoDb.describeTable(\"music_items\")\n    // Do something with the result...\n  }\n}\n</code></pre> <pre><code>class MyTest {\n  @Rule\n  public TestDynamoDb db = new TestDynamoDb.Builder(JvmDynamoDbServer.Factory.INSTANCE)\n      // `MusicItem` is annotated with `@DynamoDBTable`. Tempest recreates this table before each test.\n      .addTable(TestTable.create(MusicItem.class))\n      .build();\n\n  MusicTable musicTable;\n\n  @Before\n  public void setup() {\n    musicTable = db.logicalDb(MusicDb.class).music();\n  }\n\n  @Test\n  public void test() {\n    AlbumInfo albumInfo = new AlbumInfo(\n        \"ALBUM_1\",\n        \"after hours - EP\",\n        \"53 Thieves\",\n        LocalDate.of(2020, 2, 21),\n        \"Contemporary R&amp;B\"\n    );\n    // Talk to DynamoDB using Tempest's API.\n    musicTable.albumInfo().save(albumInfo);\n  }\n\n  @Test\n  public void anotherTest() {\n    // Talk to DynamoDB using the AWS SDK.\n    DescribeTableResult result = db.getDynamoDb().describeTable(\"music_items\");\n    // Do something with the result...\n  }\n}\n</code></pre> <p>To customize test tables, mutate the <code>CreateTableRequest</code> in a lambda.</p> <pre><code>fun testDb() = TestDynamoDb.Builder(JvmDynamoDbServer.Factory)\n  .addTable(\n    TestTable.create&lt;MusicItem&gt; { createTableRequest -&gt;\n      for (gsi in createTableRequest.globalSecondaryIndexes) {\n        gsi.withProjection(Projection().withProjectionType(ProjectionType.ALL))\n      }\n      createTableRequest\n    }\n  )\n  .build()\n</code></pre> <p>To use the Docker implementation, specify it in the builder.</p> <pre><code>fun testDb() = TestDynamoDb.Builder(DockerDynamoDbServer.Factory)\n  .addTable(TestTable.create&lt;MusicItem&gt;())\n  .build()\n</code></pre>"},{"location":"guide/testing/#other-testing-frameworks","title":"Other Testing Frameworks","text":"<p>Tempest testing is compatible with other testing frameworks. You\u2019ll need to write your own integration code. Feel free to reference the implementations above. Here is a simpler example:</p> <pre><code>import org.junit.jupiter.api.extension.AfterEachCallback\nimport org.junit.jupiter.api.extension.BeforeEachCallback\nimport org.junit.jupiter.api.extension.ExtensionContext\n// ...\n\nclass JUnit5TestDynamoDb(\n  private val testTables: List&lt;TestTable&gt;,\n) : BeforeEachCallback, AfterEachCallback {\n\n  private val service = TestDynamoDbService.create(JvmDynamoDbServer.Factory, testTables, 8000)\n\n  override fun beforeEach(context: ExtensionContext) {\n    service.startAsync()\n    service.awaitRunning()\n  }\n\n  override fun afterEach(context: ExtensionContext?) {\n    service.stopAsync()\n    service.awaitTerminated()\n  }\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Testing - SDK 1.x - JUnit4 - JVM (.kt, .java)</li> <li>Testing - SDK 1.x - JUnit4 - Docker (.kt, .java)</li> <li>Testing - SDK 1.x - JUnit5 - JVM (.kt, .java)</li> <li>Testing - SDK 1.x - JUnit5 - Docker (.kt, .java)</li> <li>Testing - SDK 2.x - JUnit4 - JVM (.kt, .java)</li> <li>Testing - SDK 2.x - JUnit4 - Docker (.kt, .java)</li> <li>Testing - SDK 2.x - JUnit5 - JVM (.kt, .java)</li> <li>Testing - SDK 2.x - JUnit5 - Docker (.kt, .java)</li> </ul>"},{"location":"guide/transaction/","title":"Transaction","text":"<p>Amazon DynamoDB transactions simplify the developer experience of making coordinated, all-or-nothing changes to multiple items both within and across tables. Transactions provide atomicity, consistency, isolation, and durability (ACID) in DynamoDB, helping you to maintain data correctness in your applications.</p> <p>Other regions could observe partial transactions</p> <p>Transactions are not supported across regions in global tables. For example, if you have a global table with replicas in the US East (Ohio) and US West (Oregon) regions and perform a <code>TransactWriteItems</code> operation in the US East (N. Virginia) Region, you may observe partially completed transactions in US West (Oregon) Region as changes are replicated. Changes will only be replicated to other regions once they have been committed in the source region.</p>"},{"location":"guide/transaction/#transactional-read","title":"Transactional Read","text":"<p><code>LogicalDb</code> lets you load a consistent snapshot of up to 25 items in a transaction.</p> KotlinJava <pre><code>private val db: MusicDb\n\nfun loadPlaylistTracks(playlist: PlaylistInfo) {\n  val results = db.transactionLoad(\n    playlist.track_tokens // [ AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ... ]\n  )\n  return results.getItems&lt;AlbumTrack&gt;()\n}\n</code></pre> <pre><code>private final MusicDb db;\n\npublic List&lt;AlbumTrack&gt; loadPlaylistTracks(PlaylistInfo playlist) {\n  ItemSet results = db.transactionLoad(\n      playlist.playlist_tracks // [ AlbumTrack.Key(\"ALBUM_1\", track_number = 1), AlbumTrack.Key(\"ALBUM_354\", 12), ... ]\n  );\n  return results.getItems(AlbumTrack.class);\n}\n</code></pre>"},{"location":"guide/transaction/#transactional-write","title":"Transactional Write","text":"<p><code>LogicalDb</code> lets you update, delete, and condition check up to 25 items atomically. </p> <p>The following example uses transactions to make sure it only adds valid album tracks to the playlist. </p> Kotlin - SDK 2.xJava - SDK 2.xKotlin - SDK 1.xJava - SDK 1.x <pre><code>private val db: MusicDb\nprivate val table: MusicTable\n\nfun addTrackToPlaylist(\n  playlistToken: String,\n  albumTrack: AlbumTrack.Key\n) {\n  // Read.\n  val existing = checkNotNull(\n    table.playlistInfo.load(PlaylistInfo.Key(playlistToken))\n  ) { \"Playlist does not exist: $playlistToken\" }\n  // Modify.\n  val newPlaylist = existing.copy(\n    playlist_tracks = existing.playlist_tracks + albumTrack,\n    playlist_version = existing.playlist_version + 1\n  )\n  // Write.\n  val writeSet = TransactionWriteSet.Builder()\n    .save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version))\n    // Add a playlist entry only if the album track exists.\n    .checkCondition(albumTrack, trackExists())\n    .build()\n  db.transactionWrite(writeSet)\n}\n\nprivate fun ifPlaylistVersionIs(playlist_version: Long): Expression {\n  return Expression.builder()\n    .expression(\"playlist_version = :playlist_version\")\n    .expressionValues(\n      mapOf(\":playlist_version\" to AttributeValue.builder().n(\"$playlist_version\").build())\n    )\n    .build()\n}\n\nprivate fun trackExists(): Expression {\n  return Expression.builder()\n    .expression(\"attribute_exists(track_title)\")\n    .build()\n}\n</code></pre> <pre><code>private final MusicDb db;\nprivate final MusicTable table;\n\npublic void addTrackToPlaylist(\n    String playlistToken,\n    AlbumTrack.Key albumTrack\n) {\n  // Read.\n  PlaylistInfo existing = table.playlistInfo().load(new PlaylistInfo.Key(playlistToken));\n  if (existing == null) {\n    throw new IllegalStateException(\"Playlist does not exist: \" + playlistToken);\n  }\n  // Modify.\n  List&lt;AlbumTrack.Key&gt; playlistTrackTokens = new ArrayList&lt;&gt;(existing.playlist_tracks);\n  playlistTrackTokens.add(albumTrack);\n  PlaylistInfo newPlaylist = new PlaylistInfo(\n      existing.playlist_token,\n      existing.playlist_name,\n      // playlist_tracks.\n      playlistTrackTokens,\n      // playlist_version.\n      existing.playlist_version + 1\n  );\n  // Write.\n  TransactionWriteSet writeSet = new TransactionWriteSet.Builder()\n      .save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version))\n      // Add a playlist entry only if the album track exists.\n      .checkCondition(albumTrack, trackExists())\n      .build();\n  db.transactionWrite(writeSet);\n}\n\nprivate Expression ifPlaylistVersionIs(Long playlist_version) {\n  return Expression.builder()\n    .expression(\"playlist_version = :playlist_version\")\n    .expressionValues(\n      Map.of(\":playlist_version\", AttributeValue.builder().n(\"\" + playlist_version).build()))\n    .build();\n}\n\nprivate Expression trackExists() {\n  return Expression.builder()\n    .expression(\"attribute_exists(track_title)\")\n    .build();\n}\n</code></pre> <pre><code>private val db: MusicDb\nprivate val table: MusicTable\n\nfun addTrackToPlaylist(\n  playlistToken: String,\n  albumTrack: AlbumTrack.Key\n) {\n  // Read.\n  val existing = checkNotNull(\n    table.playlistInfo.load(PlaylistInfo.Key(playlistToken))\n  ) { \"Playlist does not exist: $playlistToken\" }\n  // Modify.\n  val newPlaylist = existing.copy(\n    playlist_tracks = existing.playlist_tracks + albumTrack,\n    playlist_version = existing.playlist_version + 1\n  )\n  // Write.\n  val writeSet = TransactionWriteSet.Builder()\n    .save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version))\n    // Add a playlist entry only if the album track exists.\n    .checkCondition(albumTrack, trackExists())\n    .build()\n  db.transactionWrite(writeSet)\n}\n\nprivate fun ifPlaylistVersionIs(playlist_version: Long): DynamoDBTransactionWriteExpression {\n  return DynamoDBTransactionWriteExpression()\n    .withConditionExpression(\"playlist_version = :playlist_version\")\n    .withExpressionAttributeValues(\n      mapOf(\n        \":playlist_version\" to AttributeValue().withN(\"$playlist_version\")\n      )\n    )\n}\n\nprivate fun trackExists(): DynamoDBTransactionWriteExpression {\n  return DynamoDBTransactionWriteExpression()\n    .withConditionExpression(\"attribute_exists(track_title)\")\n}\n</code></pre> <pre><code>private final MusicDb db;\nprivate final MusicTable table;\n\npublic void addTrackToPlaylist(\n    String playlistToken,\n    AlbumTrack.Key albumTrack\n) {\n  // Read.\n  PlaylistInfo existing = table.playlistInfo().load(new PlaylistInfo.Key(playlistToken));\n  if (existing == null) {\n    throw new IllegalStateException(\"Playlist does not exist: \" + playlistToken);\n  }\n  // Modify.\n  List&lt;AlbumTrack.Key&gt; playlistTrackTokens = new ArrayList&lt;&gt;(existing.playlist_tracks);\n  playlistTrackTokens.add(albumTrack);\n  PlaylistInfo newPlaylist = new PlaylistInfo(\n      existing.playlist_token,\n      existing.playlist_name,\n      // playlist_tracks.\n      playlistTrackTokens,\n      // playlist_version.\n      existing.playlist_version + 1\n  );\n  // Write.\n  TransactionWriteSet writeSet = new TransactionWriteSet.Builder()\n      .save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version))\n      // Add a playlist entry only if the album track exists.\n      .checkCondition(albumTrack, trackExists())\n      .build();\n  db.transactionWrite(writeSet);\n}\n\nprivate DynamoDBTransactionWriteExpression ifPlaylistVersionIs(Long playlist_version) {\n  return new DynamoDBTransactionWriteExpression()\n      .withConditionExpression(\"playlist_version = :playlist_version\")\n      .withExpressionAttributeValues(\n          Map.of(\":playlist_version\", new AttributeValue().withN(\"$playlist_version\")));\n}\n\nprivate DynamoDBTransactionWriteExpression trackExists() {\n  return new DynamoDBTransactionWriteExpression()\n      .withConditionExpression(\"attribute_exists(track_title)\");\n}\n</code></pre>"},{"location":"guide/transaction/#writing-pager","title":"Writing Pager","text":"<p>To make the 25 item limit easier to work with, we created <code>WritingPager</code>: a control flow abstraction for paging transactional writes.</p> <p>The following example decomposes the operation into multiple transactions containing less than 25 items.</p> KotlinJava <pre><code>private val db: MusicDb\nprivate val table: MusicTable\n\nfun addTracksToPlaylist(\n  playlistToken: String,\n  albumTracks: List&lt;AlbumTrack.Key&gt;\n) {\n  db.transactionWritingPager(\n    albumTracks,\n    maxTransactionItems = 25,\n    handler = AlbumTrackWritingPagerHandler(playlistToken, table)\n  ).execute()\n}\n\nclass AlbumTrackWritingPagerHandler(\n  private val playlistToken: String,\n  private val table: MusicTable\n) : WritingPager.Handler&lt;AlbumTrack.Key&gt; {\n  private lateinit var currentPagePlaylistInfo: PlaylistInfo\n  private lateinit var currentPageTracks: List&lt;AlbumTrack.Key&gt;\n\n  override fun eachPage(proceed: () -&gt; Unit) {\n    proceed()\n  }\n\n  override fun beforePage(\n    remainingUpdates: List&lt;AlbumTrack.Key&gt;,\n    maxTransactionItems: Int\n  ): Int {\n    // Reserve 1 for the playlist info at the end.\n    currentPageTracks = remainingUpdates.take((maxTransactionItems - 1))\n    currentPagePlaylistInfo = table.playlistInfo.load(PlaylistInfo.Key(playlistToken))!!\n    return currentPageTracks.size\n  }\n\n  override fun item(builder: TransactionWriteSet.Builder, item: AlbumTrack.Key) {\n    builder.checkCondition(item, trackExists())\n  }\n\n  override fun finishPage(builder: TransactionWriteSet.Builder) {\n    val existing = currentPagePlaylistInfo\n    val newPlaylist = existing.copy(\n      playlist_tracks = existing.playlist_tracks + currentPageTracks,\n      playlist_version = existing.playlist_version + 1\n    )\n    builder.save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version))\n  }\n}\n</code></pre> <pre><code>private final MusicDb db;\nprivate final MusicTable table;\n\npublic void addTracksToPlaylist(\n    String playlistToken,\n    List&lt;AlbumTrack.Key&gt; albumTracks\n) {\n  new WritingPager&lt;&gt;(\n      db,\n      albumTracks,\n      // maxTransactionItems.\n      25,\n      // handler.\n      new AlbumTrackWritingPagerHandler(playlistToken, table)\n  ).execute();\n}\n\nclass AlbumTrackWritingPagerHandler implements WritingPager.Handler&lt;AlbumTrack.Key&gt; {\n  private final String playlistToken;\n  private final MusicTable table;\n  private PlaylistInfo currentPagePlaylistInfo;\n  private List&lt;AlbumTrack.Key&gt; currentPageTracks;\n\n  AlbumTrackWritingPagerHandler(String playlistToken,\n      MusicTable table) {\n    this.playlistToken = playlistToken;\n    this.table = table;\n  }\n\n  @Override public void eachPage(Function0&lt;Unit&gt; proceed) {\n    proceed.invoke();\n  }\n\n  @Override public int beforePage(List&lt;AlbumTrack.Key&gt; remainingUpdates,\n      int maxTransactionItems) {\n    // Reserve 1 for the playlist info at the end.\n    currentPageTracks = remainingUpdates.subList(0, maxTransactionItems - 1);\n    currentPagePlaylistInfo = table.playlistInfo().load(new PlaylistInfo.Key(playlistToken));\n    return currentPageTracks.size();\n  }\n\n  @Override public void item(TransactionWriteSet.Builder builder, AlbumTrack.Key item) {\n    builder.checkCondition(item, trackExists());\n  }\n\n  @Override public void finishPage(TransactionWriteSet.Builder builder) {\n    PlaylistInfo existing = currentPagePlaylistInfo;\n    List&lt;AlbumTrack.Key&gt; playlistTrackTokens = new ArrayList&lt;&gt;();\n    playlistTrackTokens.addAll(existing.playlist_tracks);\n    playlistTrackTokens.addAll(currentPageTracks);\n    PlaylistInfo newPlaylist = new PlaylistInfo(\n        existing.playlist_token,\n        existing.playlist_name,\n        // playlist_tracks.\n        playlistTrackTokens,\n        // playlist_version.\n        existing.playlist_version + 1\n    );\n    builder.save(newPlaylist, ifPlaylistVersionIs(existing.playlist_version));\n  }\n}\n</code></pre> <p>Check out the code samples on Github:</p> <ul> <li>Music Library - SDK 1.x (.kt, .java)</li> <li>Music Library - SDK 2.x (.kt, .java)</li> <li>Transaction - SDK 1.x (.kt, .java)</li> <li>Transaction - SDK 2.x (.kt, .java)</li> </ul>"},{"location":"guide/v2_upgrade_guide/","title":"Migration Guide from Tempest v1 to Tempest v2","text":"<p>This guide will explain some items that need to be changed when upgrading from Tempest 1 to Tempest 2</p>"},{"location":"guide/v2_upgrade_guide/#dependencies","title":"Dependencies","text":"<p>The first change is to swap the dependency from v1 to v2.</p>"},{"location":"guide/v2_upgrade_guide/#depenencieskt","title":"Depenencies.kt","text":"<pre><code>- val tempest = \"app.cash.tempest:tempest:{dependencies.tempestVersion}\"\n+ val tempest2 = \"app.cash.tempest:tempest2:{dependencies.tempestVersion}\"\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#buildgradlekts","title":"build.gradle.kts","text":"<pre><code>- implementation(Dependencies.tempest)\n+ implementation(Dependencies.tempest2)\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#import-changes","title":"Import Changes","text":"<p>Many of the classes and objects imported from a <code>tempest</code> or <code>aws</code> package will likely be found by just adding a 2 to the import path.</p> <pre><code>- import app.cash.tempest.BeginsWith\n+ import app.cash.tempest2.BeginsWith\n</code></pre> <p>Though some of your imports may have moved into Amazons new package structure</p> <pre><code>- import com.amazonaws.services.dynamodbv2.model.ConditionalCheckFailedException\n+ import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#logical-db-upgrades","title":"Logical DB Upgrades","text":"<p>One of the largest changes will be to your <code>LogicalDB</code> and the class used as your <code>LogicalTable&lt;T&gt;</code> type.</p>"},{"location":"guide/v2_upgrade_guide/#tablename-annotation","title":"TableName Annotation","text":"<p>In Tempest v1 your table would likely have been annotated with an <code>@DynamoDBTable</code> annotation. This is no longer on the table definition class, but has been moved to an annotation on the member variable inside the LogicalDb interface.</p> <p>Additionally, that annotation needs to be replaced with an <code>DynamoDbBean</code> annotation.</p>"},{"location":"guide/v2_upgrade_guide/#old","title":"Old","text":"<pre><code>interface DyDatabase : LogicalDb {\n  val table: DyTable\n}\n\ninterface DyTable : LogicalTable&lt;DyItem&gt; {\n  // View and Index member variables\n}\n\n@DynamoDBTable(tableName = TABLE_NAME)\nclass DyItem {\n  // Attribute Definitions\n}\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#new","title":"New","text":"<pre><code>interface DyDatabase : LogicalDb {\n  @TableName(TABLE_NAME)\n  val table: DyTable\n}\n\ninterface DyTable : LogicalTable&lt;DyItem&gt; {\n  // View and Index member variables\n}\n\n@DynamoDbBean\nclass DyItem {\n  // Attribute Definitions\n}\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#hash-key-annotation","title":"Hash Key Annotation","text":"<p><code>@DynamoDBHashKey</code> has been replaced by <code>@get:DynamoDbPartitionKey</code></p> <pre><code>- @DynamoDBHashKey\n+ @get:DynamoDbPartitionKey\n  var partition_key: String? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#range-key-annotation","title":"Range Key Annotation","text":"<p><code>@DynamoDBRangeKey</code> has been replaced by <code>@get:DynamoDbSortKey</code></p> <pre><code>- @DynamoDBRangeKey\n+ @get:DynamoDbSortKey\n  var sort_key: String? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#dynamodbattribute-annotation","title":"DynamoDBAttribute Annotation","text":"<p>The <code>@DynamoDBAttribute</code> is no longer needed on class member variables</p> <pre><code>- @DynamoDBAttribute\n  var description: String? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#index-on-hash-keys","title":"Index on Hash Keys","text":"<p><code>@DynamoDBIndexHashKey</code> has been replaced by <code>@get:DynamoDbSecondaryPartitionKey</code></p> <pre><code>- @DynamoDBIndexHashKey(globalSecondaryIndexName = ENTITY_TYPE_INDEX)\n+ @get:DynamoDbSecondaryPartitionKey(indexNames = [ENTITY_TYPE_INDEX])\n  var gsi_pk: String? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#index-on-range-keys","title":"Index on Range Keys","text":"<p><code>@DynamoDBIndexRangeKey</code> has been replaced by <code>@get:DynamoDbSecondarySortKey</code></p> <pre><code>- @DynamoDBIndexRangeKey(globalSecondaryIndexName = ENTITY_TYPE_INDEX)\n+ @get:DynamoDbSecondarySortKey(indexNames = [ENTITY_TYPE_INDEX])\n  var gsi_sk: String? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#version-attribute","title":"Version Attribute","text":"<p><code>@DynamoDBVersionAttribute</code> has been replaced by <code>@get:DynamoDbVersionAttribute</code></p> <pre><code>- @DynamoDBVersionAttribute\n+ @get:DynamoDbVersionAttribute\n  var version: Long? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#type-conversion-annotation","title":"Type Conversion Annotation","text":"<p><code>@DynamoDBTypeConverted</code> has been replaced by <code>@get:DynamoDbConvertedBy</code></p> <pre><code>- @DynamoDBTypeConverted(converter = InstantTypeConverter::class)\n+ @get:DynamoDbConvertedBy(InstantAttributeConverter::class)\n  var expires_at: Instant? = null\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#type-conversion-interface","title":"Type Conversion Interface","text":"<p>The <code>DynamoDBTypeConverter&lt;DBType, Mine&gt;</code> interface has been replaced by an <code>AttributeConverter&lt;Mine&gt;</code> interface.</p> <p>Instead of having two methods  * <code>fun convert(mine: Mine): DBType</code>  * <code>fun unconvert(dbType: DbType): Mine</code></p> <p>There are now four methods  * <code>fun transformFrom(mine: Mine): AttributeValue</code>     * essentially the same as convert  * <code>fun transformTo(input: AttributeValue): Mine</code>    * essentiall the same as unconvert  * <code>fun type(): EnhancedType&lt;Mine&gt;</code>    * Allows the Enhanced Dynamo SDK to avoid Type Erasure  * <code>fun attributeValueType(): AttributeValueType</code>    * Tells the SDK which value to expect from <code>transformFrom</code></p> <p>Included below is an example of the transformation from a <code>DynamoDBTypeConverter&lt;Long, Instant&gt;</code> to <code>AttributeConverter&lt;Instant&gt;</code></p>"},{"location":"guide/v2_upgrade_guide/#old_1","title":"Old","text":"<pre><code>internal class InstantTypeEpochConverter : DynamoDBTypeConverter&lt;Long, Instant&gt; {\n  override fun unconvert(epochSeconds: Long): Instant {\n    return Instant.ofEpochSecond(epochSeconds)\n  }\n\n  override fun convert(instant: Instant): Long {\n    return instant.epochSecond\n  }\n}\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#new_1","title":"New","text":"<pre><code>internal class InstantTypeEpochConverter : AttributeConverter&lt;Instant&gt; {\n  override fun transformFrom(input: Instant): AttributeValue {\n    val timeLongAsString = input.epochSecond.toString()\n    return AttributeValue.builder()\n      .n(timeLongAsString)\n      .build()\n  }\n\n  override fun transformTo(input: AttributeValue): Instant {\n    val timeLong = input.n().toLong()\n    return Instant.ofEpochSecond(timeLong)\n  }\n\n  override fun type(): EnhancedType&lt;Instant&gt; {\n    return EnhancedType.of(Instant::class.java)\n  }\n\n  override fun attributeValueType(): AttributeValueType {\n    return AttributeValueType.N\n  }\n}\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#creating-your-logicaldb","title":"Creating your LogicalDb","text":"<p>Previously you could create your <code>LogicalDb</code> object using an <code>AmazonDynamoDB</code> object. However, the new <code>LogicalDb</code> objects require <code>DynamoDbEnhancedClient</code> objects, which themselves can be created using the new base <code>DynamoDbClient</code> object.</p>"},{"location":"guide/v2_upgrade_guide/#new-creation-semantics","title":"New Creation Semantics","text":"<pre><code>fun createClient(\n  awsRegionName: String, \n  awsCredentialsProvider: AwsCredentialsProvider,\n) : DynamoDbClient = \n  DynamoDbClient.builder()\n    .region(Region.of(awsRegionName))\n    .credentialsProvider(awsCredentialsProvider)\n    .build()\n\nfun createEnhancedClient(dynamoDbClient: DynamoDbClient): DynamoDbEnhancedClient =\n  // Includes Version and Atomic Counters extensions by default, \n  DynamoDbEnhancedClient.builder()\n    .dynamoDbClient(dynamoDbClient)\n    .build()\n\nfun createEnhancedClientWithExtensions(dynamoDbClient: DynamoDbClient): DynamoDbEnhancedClient =\n   DynamoDbEnhancedClient.builder()\n      .dynamoDbClient(dynamoDbClient)\n      .extensions(\n         // Default extensions must be added explicitly when adding additional extensions.\n         // Includes Version and Atomic Counters.\n         defaultExtensions() +\n           // Only works for updated_at timestamps, created_at must be supplied by the caller.\n           // updated_at and created_at will not match on initial write.\n           AutoGeneratedTimestampRecordExtension.create() +\n           // Custom tempest extension for created_at and updated_at timestamps, supporting Instant and Date.\n           // updated_at and created_at will match on initial write.\n           TempestAutoGeneratedCreatedAtTimestampRecordExtension.create() +\n           // Required to be installed last for use of [Async]View.saveWithResult methods.\n           WithResultExtension.create()\n      )\n      .build()\n\nfun createLogicalDb(dynamoDbEnhancedClient: DynamoDbEnhancedClient): DyDatabase =\n  LogicalDb&lt;DyDatabase&gt;(dynamoDbEnhancedClient)\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#api-type-changes","title":"API Type changes","text":""},{"location":"guide/v2_upgrade_guide/#consistent-read-enum","title":"Consistent Read Enum","text":"<p>When doing a <code>load</code> from an <code>InlineView</code> object in Tempest 1 the consistent read was specified via an enum. In Tempest 2 the option is now a boolean specifying to use consistent reads or not.</p> <pre><code>val key = ...\nval entity = dyDatabase.dyTable.dyEntitiy.load(\n  key = key,\n- consistentReads = DynamoDBMapperConfig.ConsistentReads.CONSISTENT\n+ consistentReads = true\n)\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#changes-to-misk","title":"Changes to Misk","text":"<p>If you are using Misk you will need to update your dependencies and DI configuration</p>"},{"location":"guide/v2_upgrade_guide/#dependencies_1","title":"Dependencies","text":"<pre><code>-val miskAwsDynamodb = \"com.squareup.misk:misk-aws-dynamodb:VERSION\"\n-val miskAwsDynamodbTesting = \"com.squareup.misk:misk-aws-dynamodb-testing:VERSION\"\n+val miskAws2Dynamodb = \"com.squareup.misk:misk-aws2-dynamodb:VERSION\"\n+val miskAws2DynamodbTesting = \"com.squareup.misk:misk-aws2-dynamodb-testing:VERSION\"\n</code></pre>"},{"location":"guide/v2_upgrade_guide/#dynamodbmodule","title":"DynamoDbModule","text":"<p>Changes to the configuration of the <code>RealDynamoDbModule</code> are due to changes in the AWS SDK v2 for the Dynamo Client. An example of the changes is below</p> <pre><code>-import misk.dynamodb.RealDynamoDbModule\n-import com.amazonaws.ClientConfiguration\n-install(\n-  RealDynamoDbModule(\n-    ClientConfiguration()\n-      .withMaxErrorRetry(DYNAMO_CLIENT_MAX_ERROR_RETRIES)\n-      // Set a timeout per retry.\n-      .withRequestTimeout(DYNAMO_REQUEST_TIMEOUT_MILLIS)\n-      .withRetryPolicy(\n-        PredefinedRetryPolicies\n-          .getDynamoDBDefaultRetryPolicyWithCustomMaxRetries(DYNAMO_CLIENT_MAX_ERROR_RETRIES)\n-      ),\n-    DyItem::class\n-  )\n-)\n+import misk.aws2.dynamodb.RealDynamoDbModule\n+import misk.aws2.dynamodb.RequiredDynamoDbTable\n+import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration\n+install(\n+  RealDynamoDbModule(\n+    ClientOverrideConfiguration.builder()\n+      .retryPolicy(\n+        RetryPolicy.defaultRetryPolicy().copy {\n+          it.numRetries(\n+            DYNAMO_CLIENT_MAX_ERROR_RETRIES\n+          )\n+        }\n+      )\n+      .apiCallAttemptTimeout(Duration.ofMillis(DYNAMO_REQUEST_TIMEOUT_MILLIS.toLong()))\n+      .apiCallTimeout(Duration.ofMillis(DYNAMO_CLIENT_EXECUTION_TIMEOUT_MILLIS.toLong()))\n+      .build(),\n+    listOf(\n+      Constants.DyTable,\n+    ).map { RequiredDynamoDbTable(it) }\n+  )\n+)\n</code></pre>"}]}