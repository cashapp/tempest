/*
 * Copyright 2021 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package app.cash.tempest2

import app.cash.tempest2.extensions.WithResultExtension
import app.cash.tempest2.extensions.WithResultExtension.Companion.WithResultExtensionInstalledLast
import app.cash.tempest2.musiclibrary.testDb
import app.cash.tempest2.musiclibrary.versionedattribute.VersionedAttribute
import app.cash.tempest2.musiclibrary.versionedattribute.VersionedAttributeDb
import app.cash.tempest2.testing.logicalDb
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.api.extension.RegisterExtension
import software.amazon.awssdk.enhanced.dynamodb.Expression
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension
import software.amazon.awssdk.enhanced.dynamodb.internal.client.ExtensionResolver.defaultExtensions
import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException
import kotlin.time.Duration.Companion.hours

@OptIn(WithResultExtensionInstalledLast::class)
class DynamoDbViewWithResultTest {

  @RegisterExtension
  @JvmField
  val db = testDb()

  private val fakeClock = FakeClock()

  private val autoGeneratedTimestampRecordExtension =
    AutoGeneratedTimestampRecordExtension.builder().baseClock(fakeClock).build()

  private val versionedAttributeTable by lazy {
    db.logicalDb<VersionedAttributeDb>(
      defaultExtensions() + autoGeneratedTimestampRecordExtension + WithResultExtension.create()
    ).versionedAttributes
  }

  private val versionedAttributeTableWithoutExtension by lazy {
    db.logicalDb<VersionedAttributeDb>(
      defaultExtensions() + autoGeneratedTimestampRecordExtension
    ).versionedAttributes
  }

  @Test
  fun saveAndVerifyResult() {
    val item = VersionedAttribute(
      partition_key = "item_one",
      description = "one of the items",
      created_at = fakeClock.instant()
    )

    fakeClock.add(1.hours)

    val result = versionedAttributeTable.attributes.saveWithResult(item)
    assertThat(WithResultExtension.currentRequestTrackerKey.get()).isNull()
    assertThat(result).isEqualTo(
      item.copy(
        version = 1L,
        updated_at = fakeClock.instant()
      )
    )
    println(result)

    fakeClock.add(1.hours)

    val updatedDescription = result.copy(
      description = "a new name for the item"
    )

    val updatedResult = versionedAttributeTable.attributes.saveWithResult(updatedDescription)
    assertThat(updatedResult).isEqualTo(
      updatedDescription.copy(
        version = 2L,
        updated_at = fakeClock.instant()
      )
    )
    println(updatedResult)
  }

  @Test
  fun saveIfNotExist() {
    val item = VersionedAttribute(
      partition_key = "item_one",
      description = "one of the items",
      created_at = fakeClock.instant()
    )

    fakeClock.add(1.hours)

    val result = versionedAttributeTable.attributes.saveWithResult(item)
    assertThat(WithResultExtension.currentRequestTrackerKey.get()).isNull()
    assertThat(result).isEqualTo(
      item.copy(
        version = 1L,
        updated_at = fakeClock.instant()
      )
    )
    println(result)

    fakeClock.add(1.hours)

    val updatedDescription = result.copy(
      description = "a new name for the item"
    )

    // This fails because the item already exists.
    assertThrows<ConditionalCheckFailedException> {
      versionedAttributeTable.attributes.saveWithResult(updatedDescription, ifNotExist())
    }

    assertThat(WithResultExtension.currentRequestTrackerKey.get()).isNull()
  }

  @Test
  fun optimisticLocking() {
    val item = VersionedAttribute(
      partition_key = "item_one",
      description = "one of the items",
      created_at = fakeClock.instant()
    )

    fakeClock.add(1.hours)

    val result = versionedAttributeTable.attributes.saveWithResult(item)
    assertThat(WithResultExtension.currentRequestTrackerKey.get()).isNull()
    assertThat(result).isEqualTo(
      item.copy(
        version = 1L,
        updated_at = fakeClock.instant()
      )
    )
    println(result)

    // This fails because the version is not updated.
    assertThrows<ConditionalCheckFailedException> {
      versionedAttributeTable.attributes.saveWithResult(item)
    }

    assertThat(WithResultExtension.currentRequestTrackerKey.get()).isNull()
  }

  @Test
  fun failsIfExtensionNotInstalled() {
    val item = VersionedAttribute(
      partition_key = "item_one",
      description = "one of the items",
      created_at = fakeClock.instant()
    )

    fakeClock.add(1.hours)

    val ex = assertThrows<IllegalStateException> {
      versionedAttributeTableWithoutExtension.attributes.saveWithResult(item)
    }

    assertThat(ex).hasMessageContaining("Resulting Item was not updated. Did you forget to install the ApplyUpdatesExtension?")
  }

  private fun ifNotExist(): Expression {
    return Expression.builder()
      .expression("attribute_not_exists(partition_key)")
      .build()
  }
}